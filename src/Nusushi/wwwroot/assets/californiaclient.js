var Californiaclient =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/assets/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
    if (true) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
        // CommonJS
        factory(exports);
    } else {
        // Browser globals
        factory(root.maquette = {});
    }
}(this, function (exports) {
    'use strict';
    // Comment that is displayed in the API documentation for the maquette module:
    /**
 * Welcome to the API documentation of the **maquette** library.
 *
 * [[http://maquettejs.org/|To the maquette homepage]]
 */
    Object.defineProperty(exports, '__esModule', { value: true });
    var NAMESPACE_W3 = 'http://www.w3.org/';
    var NAMESPACE_SVG = NAMESPACE_W3 + '2000/svg';
    var NAMESPACE_XLINK = NAMESPACE_W3 + '1999/xlink';
    // Utilities
    var emptyArray = [];
    var extend = function (base, overrides) {
        var result = {};
        Object.keys(base).forEach(function (key) {
            result[key] = base[key];
        });
        if (overrides) {
            Object.keys(overrides).forEach(function (key) {
                result[key] = overrides[key];
            });
        }
        return result;
    };
    // Hyperscript helper functions
    var same = function (vnode1, vnode2) {
        if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {
            return false;
        }
        if (vnode1.properties && vnode2.properties) {
            if (vnode1.properties.key !== vnode2.properties.key) {
                return false;
            }
            return vnode1.properties.bind === vnode2.properties.bind;
        }
        return !vnode1.properties && !vnode2.properties;
    };
    var toTextVNode = function (data) {
        return {
            vnodeSelector: '',
            properties: undefined,
            children: undefined,
            text: data.toString(),
            domNode: null
        };
    };
    var appendChildren = function (parentSelector, insertions, main) {
        for (var i = 0, length_1 = insertions.length; i < length_1; i++) {
            var item = insertions[i];
            if (Array.isArray(item)) {
                appendChildren(parentSelector, item, main);
            } else {
                if (item !== null && item !== undefined) {
                    if (!item.hasOwnProperty('vnodeSelector')) {
                        item = toTextVNode(item);
                    }
                    main.push(item);
                }
            }
        }
    };
    // Render helper functions
    var missingTransition = function () {
        throw new Error('Provide a transitions object to the projectionOptions to do animations');
    };
    var DEFAULT_PROJECTION_OPTIONS = {
        namespace: undefined,
        eventHandlerInterceptor: undefined,
        styleApplyer: function (domNode, styleName, value) {
            // Provides a hook to add vendor prefixes for browsers that still need it.
            domNode.style[styleName] = value;
        },
        transitions: {
            enter: missingTransition,
            exit: missingTransition
        }
    };
    var applyDefaultProjectionOptions = function (projectorOptions) {
        return extend(DEFAULT_PROJECTION_OPTIONS, projectorOptions);
    };
    var checkStyleValue = function (styleValue) {
        if (typeof styleValue !== 'string') {
            throw new Error('Style values must be strings');
        }
    };
    var setProperties = function (domNode, properties, projectionOptions) {
        if (!properties) {
            return;
        }
        var eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;
        var propNames = Object.keys(properties);
        var propCount = propNames.length;
        var _loop_1 = function (i) {
            var propName = propNames[i];
            /* tslint:disable:no-var-keyword: edge case */
            var propValue = properties[propName];
            /* tslint:enable:no-var-keyword */
            if (propName === 'className') {
                throw new Error('Property "className" is not supported, use "class".');
            } else if (propName === 'class') {
                propValue.split(/\s+/).forEach(function (token) {
                    return domNode.classList.add(token);
                });
            } else if (propName === 'classes') {
                // object with string keys and boolean values
                var classNames = Object.keys(propValue);
                var classNameCount = classNames.length;
                for (var j = 0; j < classNameCount; j++) {
                    var className = classNames[j];
                    if (propValue[className]) {
                        domNode.classList.add(className);
                    }
                }
            } else if (propName === 'styles') {
                // object with string keys and string (!) values
                var styleNames = Object.keys(propValue);
                var styleCount = styleNames.length;
                for (var j = 0; j < styleCount; j++) {
                    var styleName = styleNames[j];
                    var styleValue = propValue[styleName];
                    if (styleValue) {
                        checkStyleValue(styleValue);
                        projectionOptions.styleApplyer(domNode, styleName, styleValue);
                    }
                }
            } else if (propName !== 'key' && propValue !== null && propValue !== undefined) {
                var type = typeof propValue;
                if (type === 'function') {
                    if (propName.lastIndexOf('on', 0) === 0) {
                        if (eventHandlerInterceptor) {
                            propValue = eventHandlerInterceptor(propName, propValue, domNode, properties);    // intercept eventhandlers
                        }
                        if (propName === 'oninput') {
                            (function () {
                                // record the evt.target.value, because IE and Edge sometimes do a requestAnimationFrame between changing value and running oninput
                                var oldPropValue = propValue;
                                propValue = function (evt) {
                                    oldPropValue.apply(this, [evt]);
                                    evt.target['oninput-value'] = evt.target.value;    // may be HTMLTextAreaElement as well
                                };
                            }());
                        }
                        domNode[propName] = propValue;
                    }
                } else if (type === 'string' && propName !== 'value' && propName !== 'innerHTML') {
                    if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {
                        domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);
                    } else {
                        domNode.setAttribute(propName, propValue);
                    }
                } else {
                    domNode[propName] = propValue;
                }
            }
        };
        for (var i = 0; i < propCount; i++) {
            _loop_1(i);
        }
    };
    var updateProperties = function (domNode, previousProperties, properties, projectionOptions) {
        if (!properties) {
            return;
        }
        var propertiesUpdated = false;
        var propNames = Object.keys(properties);
        var propCount = propNames.length;
        for (var i = 0; i < propCount; i++) {
            var propName = propNames[i];
            // assuming that properties will be nullified instead of missing is by design
            var propValue = properties[propName];
            var previousValue = previousProperties[propName];
            if (propName === 'class') {
                if (previousValue !== propValue) {
                    throw new Error('"class" property may not be updated. Use the "classes" property for conditional css classes.');
                }
            } else if (propName === 'classes') {
                var classList = domNode.classList;
                var classNames = Object.keys(propValue);
                var classNameCount = classNames.length;
                for (var j = 0; j < classNameCount; j++) {
                    var className = classNames[j];
                    var on = !!propValue[className];
                    var previousOn = !!previousValue[className];
                    if (on === previousOn) {
                        continue;
                    }
                    propertiesUpdated = true;
                    if (on) {
                        classList.add(className);
                    } else {
                        classList.remove(className);
                    }
                }
            } else if (propName === 'styles') {
                var styleNames = Object.keys(propValue);
                var styleCount = styleNames.length;
                for (var j = 0; j < styleCount; j++) {
                    var styleName = styleNames[j];
                    var newStyleValue = propValue[styleName];
                    var oldStyleValue = previousValue[styleName];
                    if (newStyleValue === oldStyleValue) {
                        continue;
                    }
                    propertiesUpdated = true;
                    if (newStyleValue) {
                        checkStyleValue(newStyleValue);
                        projectionOptions.styleApplyer(domNode, styleName, newStyleValue);
                    } else {
                        projectionOptions.styleApplyer(domNode, styleName, '');
                    }
                }
            } else {
                if (!propValue && typeof previousValue === 'string') {
                    propValue = '';
                }
                if (propName === 'value') {
                    var domValue = domNode[propName];
                    if (domValue !== propValue    // The 'value' in the DOM tree !== newValue
&& (domNode['oninput-value'] ? domValue === domNode['oninput-value']    // If the last reported value to 'oninput' does not match domValue, do nothing and wait for oninput
 : propValue !== previousValue    // Only update the value if the vdom changed
)) {
                        domNode[propName] = propValue;
                        // Reset the value, even if the virtual DOM did not change
                        domNode['oninput-value'] = undefined;
                    }
                    // else do not update the domNode, otherwise the cursor position would be changed
                    if (propValue !== previousValue) {
                        propertiesUpdated = true;
                    }
                } else if (propValue !== previousValue) {
                    var type = typeof propValue;
                    if (type === 'function') {
                        throw new Error('Functions may not be updated on subsequent renders (property: ' + propName + '). Hint: declare event handler functions outside the render() function.');
                    }
                    if (type === 'string' && propName !== 'innerHTML') {
                        if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {
                            domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);
                        } else if (propName === 'role' && propValue === '') {
                            domNode.removeAttribute(propName);
                        } else {
                            domNode.setAttribute(propName, propValue);
                        }
                    } else {
                        if (domNode[propName] !== propValue) {
                            domNode[propName] = propValue;
                        }
                    }
                    propertiesUpdated = true;
                }
            }
        }
        return propertiesUpdated;
    };
    var findIndexOfChild = function (children, sameAs, start) {
        if (sameAs.vnodeSelector !== '') {
            // Never scan for text-nodes
            for (var i = start; i < children.length; i++) {
                if (same(children[i], sameAs)) {
                    return i;
                }
            }
        }
        return -1;
    };
    var nodeAdded = function (vNode, transitions) {
        if (vNode.properties) {
            var enterAnimation = vNode.properties.enterAnimation;
            if (enterAnimation) {
                if (typeof enterAnimation === 'function') {
                    enterAnimation(vNode.domNode, vNode.properties);
                } else {
                    transitions.enter(vNode.domNode, vNode.properties, enterAnimation);
                }
            }
        }
    };
    var nodeToRemove = function (vNode, transitions) {
        var domNode = vNode.domNode;
        if (vNode.properties) {
            var exitAnimation = vNode.properties.exitAnimation;
            if (exitAnimation) {
                domNode.style.pointerEvents = 'none';
                var removeDomNode = function () {
                    if (domNode.parentNode) {
                        domNode.parentNode.removeChild(domNode);
                    }
                };
                if (typeof exitAnimation === 'function') {
                    exitAnimation(domNode, removeDomNode, vNode.properties);
                    return;
                } else {
                    transitions.exit(vNode.domNode, vNode.properties, exitAnimation, removeDomNode);
                    return;
                }
            }
        }
        if (domNode.parentNode) {
            domNode.parentNode.removeChild(domNode);
        }
    };
    var checkDistinguishable = function (childNodes, indexToCheck, parentVNode, operation) {
        var childNode = childNodes[indexToCheck];
        if (childNode.vnodeSelector === '') {
            return;    // Text nodes need not be distinguishable
        }
        var properties = childNode.properties;
        var key = properties ? properties.key === undefined ? properties.bind : properties.key : undefined;
        if (!key) {
            for (var i = 0; i < childNodes.length; i++) {
                if (i !== indexToCheck) {
                    var node = childNodes[i];
                    if (same(node, childNode)) {
                        if (operation === 'added') {
                            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' + 'added, but there is now more than one. You must add unique key properties to make them distinguishable.');
                        } else {
                            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' + 'removed, but there were more than one. You must add unique key properties to make them distinguishable.');
                        }
                    }
                }
            }
        }
    };
    var createDom;
    var updateDom;
    var updateChildren = function (vnode, domNode, oldChildren, newChildren, projectionOptions) {
        if (oldChildren === newChildren) {
            return false;
        }
        oldChildren = oldChildren || emptyArray;
        newChildren = newChildren || emptyArray;
        var oldChildrenLength = oldChildren.length;
        var newChildrenLength = newChildren.length;
        var transitions = projectionOptions.transitions;
        var oldIndex = 0;
        var newIndex = 0;
        var i;
        var textUpdated = false;
        while (newIndex < newChildrenLength) {
            var oldChild = oldIndex < oldChildrenLength ? oldChildren[oldIndex] : undefined;
            var newChild = newChildren[newIndex];
            if (oldChild !== undefined && same(oldChild, newChild)) {
                textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;
                oldIndex++;
            } else {
                var findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);
                if (findOldIndex >= 0) {
                    // Remove preceding missing children
                    for (i = oldIndex; i < findOldIndex; i++) {
                        nodeToRemove(oldChildren[i], transitions);
                        checkDistinguishable(oldChildren, i, vnode, 'removed');
                    }
                    textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;
                    oldIndex = findOldIndex + 1;
                } else {
                    // New child
                    createDom(newChild, domNode, oldIndex < oldChildrenLength ? oldChildren[oldIndex].domNode : undefined, projectionOptions);
                    nodeAdded(newChild, transitions);
                    checkDistinguishable(newChildren, newIndex, vnode, 'added');
                }
            }
            newIndex++;
        }
        if (oldChildrenLength > oldIndex) {
            // Remove child fragments
            for (i = oldIndex; i < oldChildrenLength; i++) {
                nodeToRemove(oldChildren[i], transitions);
                checkDistinguishable(oldChildren, i, vnode, 'removed');
            }
        }
        return textUpdated;
    };
    var addChildren = function (domNode, children, projectionOptions) {
        if (!children) {
            return;
        }
        for (var i = 0; i < children.length; i++) {
            createDom(children[i], domNode, undefined, projectionOptions);
        }
    };
    var initPropertiesAndChildren = function (domNode, vnode, projectionOptions) {
        addChildren(domNode, vnode.children, projectionOptions);
        // children before properties, needed for value property of <select>.
        if (vnode.text) {
            domNode.textContent = vnode.text;
        }
        setProperties(domNode, vnode.properties, projectionOptions);
        if (vnode.properties && vnode.properties.afterCreate) {
            vnode.properties.afterCreate.apply(vnode.properties.bind || vnode.properties, [
                domNode,
                projectionOptions,
                vnode.vnodeSelector,
                vnode.properties,
                vnode.children
            ]);
        }
    };
    createDom = function (vnode, parentNode, insertBefore, projectionOptions) {
        var domNode, i, c, start = 0, type, found;
        var vnodeSelector = vnode.vnodeSelector;
        var doc = parentNode.ownerDocument;
        if (vnodeSelector === '') {
            domNode = vnode.domNode = doc.createTextNode(vnode.text);
            if (insertBefore !== undefined) {
                parentNode.insertBefore(domNode, insertBefore);
            } else {
                parentNode.appendChild(domNode);
            }
        } else {
            for (i = 0; i <= vnodeSelector.length; ++i) {
                c = vnodeSelector.charAt(i);
                if (i === vnodeSelector.length || c === '.' || c === '#') {
                    type = vnodeSelector.charAt(start - 1);
                    found = vnodeSelector.slice(start, i);
                    if (type === '.') {
                        domNode.classList.add(found);
                    } else if (type === '#') {
                        domNode.id = found;
                    } else {
                        if (found === 'svg') {
                            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });
                        }
                        if (projectionOptions.namespace !== undefined) {
                            domNode = vnode.domNode = doc.createElementNS(projectionOptions.namespace, found);
                        } else {
                            domNode = vnode.domNode = vnode.domNode || doc.createElement(found);
                            if (found === 'input' && vnode.properties && vnode.properties.type !== undefined) {
                                // IE8 and older don't support setting input type after the DOM Node has been added to the document
                                domNode.setAttribute('type', vnode.properties.type);
                            }
                        }
                        if (insertBefore !== undefined) {
                            parentNode.insertBefore(domNode, insertBefore);
                        } else if (domNode.parentNode !== parentNode) {
                            parentNode.appendChild(domNode);
                        }
                    }
                    start = i + 1;
                }
            }
            initPropertiesAndChildren(domNode, vnode, projectionOptions);
        }
    };
    updateDom = function (previous, vnode, projectionOptions) {
        var domNode = previous.domNode;
        var textUpdated = false;
        if (previous === vnode) {
            return false;    // By contract, VNode objects may not be modified anymore after passing them to maquette
        }
        var updated = false;
        if (vnode.vnodeSelector === '') {
            if (vnode.text !== previous.text) {
                var newVNode = domNode.ownerDocument.createTextNode(vnode.text);
                domNode.parentNode.replaceChild(newVNode, domNode);
                vnode.domNode = newVNode;
                textUpdated = true;
                return textUpdated;
            }
        } else {
            if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) {
                projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });
            }
            if (previous.text !== vnode.text) {
                updated = true;
                if (vnode.text === undefined) {
                    domNode.removeChild(domNode.firstChild);    // the only textnode presumably
                } else {
                    domNode.textContent = vnode.text;
                }
            }
            updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;
            updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;
            if (vnode.properties && vnode.properties.afterUpdate) {
                vnode.properties.afterUpdate.apply(vnode.properties.bind || vnode.properties, [
                    domNode,
                    projectionOptions,
                    vnode.vnodeSelector,
                    vnode.properties,
                    vnode.children
                ]);
            }
        }
        if (updated && vnode.properties && vnode.properties.updateAnimation) {
            vnode.properties.updateAnimation(domNode, vnode.properties, previous.properties);
        }
        vnode.domNode = previous.domNode;
        return textUpdated;
    };
    var createProjection = function (vnode, projectionOptions) {
        return {
            update: function (updatedVnode) {
                if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {
                    throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');
                }
                updateDom(vnode, updatedVnode, projectionOptions);
                vnode = updatedVnode;
            },
            domNode: vnode.domNode
        };
    };
    // The other two parameters are not added here, because the Typescript compiler creates surrogate code for destructuring 'children'.
    exports.h = function (selector) {
        var properties = arguments[1];
        if (typeof selector !== 'string') {
            throw new Error();
        }
        var childIndex = 1;
        if (properties && !properties.hasOwnProperty('vnodeSelector') && !Array.isArray(properties) && typeof properties === 'object') {
            childIndex = 2;
        } else {
            // Optional properties argument was omitted
            properties = undefined;
        }
        var text;
        var children;
        var argsLength = arguments.length;
        // Recognize a common special case where there is only a single text node
        if (argsLength === childIndex + 1) {
            var onlyChild = arguments[childIndex];
            if (typeof onlyChild === 'string') {
                text = onlyChild;
            } else if (onlyChild !== undefined && onlyChild !== null && onlyChild.length === 1 && typeof onlyChild[0] === 'string') {
                text = onlyChild[0];
            }
        }
        if (text === undefined) {
            children = [];
            for (; childIndex < argsLength; childIndex++) {
                var child = arguments[childIndex];
                if (child === null || child === undefined) {
                } else if (Array.isArray(child)) {
                    appendChildren(selector, child, children);
                } else if (child.hasOwnProperty('vnodeSelector')) {
                    children.push(child);
                } else {
                    children.push(toTextVNode(child));
                }
            }
        }
        return {
            vnodeSelector: selector,
            properties: properties,
            children: children,
            text: text === '' ? undefined : text,
            domNode: null
        };
    };
    /**
 * Contains simple low-level utility functions to manipulate the real DOM.
 */
    exports.dom = {
        /**
     * Creates a real DOM tree from `vnode`. The [[Projection]] object returned will contain the resulting DOM Node in
     * its [[Projection.domNode|domNode]] property.
     * This is a low-level method. Users will typically use a [[Projector]] instead.
     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]
     * objects may only be rendered once.
     * @param projectionOptions - Options to be used to create and update the projection.
     * @returns The [[Projection]] which also contains the DOM Node that was created.
     */
        create: function (vnode, projectionOptions) {
            projectionOptions = applyDefaultProjectionOptions(projectionOptions);
            createDom(vnode, document.createElement('div'), undefined, projectionOptions);
            return createProjection(vnode, projectionOptions);
        },
        /**
     * Appends a new child node to the DOM which is generated from a [[VNode]].
     * This is a low-level method. Users will typically use a [[Projector]] instead.
     * @param parentNode - The parent node for the new child node.
     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]
     * objects may only be rendered once.
     * @param projectionOptions - Options to be used to create and update the [[Projection]].
     * @returns The [[Projection]] that was created.
     */
        append: function (parentNode, vnode, projectionOptions) {
            projectionOptions = applyDefaultProjectionOptions(projectionOptions);
            createDom(vnode, parentNode, undefined, projectionOptions);
            return createProjection(vnode, projectionOptions);
        },
        /**
     * Inserts a new DOM node which is generated from a [[VNode]].
     * This is a low-level method. Users wil typically use a [[Projector]] instead.
     * @param beforeNode - The node that the DOM Node is inserted before.
     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function.
     * NOTE: [[VNode]] objects may only be rendered once.
     * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].
     * @returns The [[Projection]] that was created.
     */
        insertBefore: function (beforeNode, vnode, projectionOptions) {
            projectionOptions = applyDefaultProjectionOptions(projectionOptions);
            createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);
            return createProjection(vnode, projectionOptions);
        },
        /**
     * Merges a new DOM node which is generated from a [[VNode]] with an existing DOM Node.
     * This means that the virtual DOM and the real DOM will have one overlapping element.
     * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided.
     * This is a low-level method. Users wil typically use a [[Projector]] instead.
     * @param element - The existing element to adopt as the root of the new virtual DOM. Existing attributes and child nodes are preserved.
     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]] objects
     * may only be rendered once.
     * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].
     * @returns The [[Projection]] that was created.
     */
        merge: function (element, vnode, projectionOptions) {
            projectionOptions = applyDefaultProjectionOptions(projectionOptions);
            vnode.domNode = element;
            initPropertiesAndChildren(element, vnode, projectionOptions);
            return createProjection(vnode, projectionOptions);
        },
        /**
     * Replaces an existing DOM node with a node generated from a [[VNode]].
     * This is a low-level method. Users will typically use a [[Projector]] instead.
     * @param element - The node for the [[VNode]] to replace.
     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]
     * objects may only be rendered once.
     * @param projectionOptions - Options to be used to create and update the [[Projection]].
     * @returns The [[Projection]] that was created.
     */
        replace: function (element, vnode, projectionOptions) {
            projectionOptions = applyDefaultProjectionOptions(projectionOptions);
            createDom(vnode, element.parentNode, element, projectionOptions);
            element.parentNode.removeChild(element);
            return createProjection(vnode, projectionOptions);
        }
    };
    /**
 * Creates a [[CalculationCache]] object, useful for caching [[VNode]] trees.
 * In practice, caching of [[VNode]] trees is not needed, because achieving 60 frames per second is almost never a problem.
 * For more information, see [[CalculationCache]].
 *
 * @param <Result> The type of the value that is cached.
 */
    exports.createCache = function () {
        var cachedInputs;
        var cachedOutcome;
        return {
            invalidate: function () {
                cachedOutcome = undefined;
                cachedInputs = undefined;
            },
            result: function (inputs, calculation) {
                if (cachedInputs) {
                    for (var i = 0; i < inputs.length; i++) {
                        if (cachedInputs[i] !== inputs[i]) {
                            cachedOutcome = undefined;
                        }
                    }
                }
                if (!cachedOutcome) {
                    cachedOutcome = calculation();
                    cachedInputs = inputs;
                }
                return cachedOutcome;
            }
        };
    };
    /**
 * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.
 * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.
 *
 * @param <Source>       The type of source items. A database-record for instance.
 * @param <Target>       The type of target items. A [[Component]] for instance.
 * @param getSourceKey   `function(source)` that must return a key to identify each source object. The result must either be a string or a number.
 * @param createResult   `function(source, index)` that must create a new result object from a given source. This function is identical
 *                       to the `callback` argument in `Array.map(callback)`.
 * @param updateResult   `function(source, target, index)` that updates a result to an updated source.
 */
    exports.createMapping = function (getSourceKey, createResult, updateResult) {
        var keys = [];
        var results = [];
        return {
            results: results,
            map: function (newSources) {
                var newKeys = newSources.map(getSourceKey);
                var oldTargets = results.slice();
                var oldIndex = 0;
                for (var i = 0; i < newSources.length; i++) {
                    var source = newSources[i];
                    var sourceKey = newKeys[i];
                    if (sourceKey === keys[oldIndex]) {
                        results[i] = oldTargets[oldIndex];
                        updateResult(source, oldTargets[oldIndex], i);
                        oldIndex++;
                    } else {
                        var found = false;
                        for (var j = 1; j < keys.length + 1; j++) {
                            var searchIndex = (oldIndex + j) % keys.length;
                            if (keys[searchIndex] === sourceKey) {
                                results[i] = oldTargets[searchIndex];
                                updateResult(newSources[i], oldTargets[searchIndex], i);
                                oldIndex = searchIndex + 1;
                                found = true;
                                break;
                            }
                        }
                        if (!found) {
                            results[i] = createResult(source, i);
                        }
                    }
                }
                results.length = newSources.length;
                keys = newKeys;
            }
        };
    };
    /**
 * Creates a [[Projector]] instance using the provided projectionOptions.
 *
 * For more information, see [[Projector]].
 *
 * @param projectorOptions   Options that influence how the DOM is rendered and updated.
 */
    exports.createProjector = function (projectorOptions) {
        var projector;
        var projectionOptions = applyDefaultProjectionOptions(projectorOptions);
        projectionOptions.eventHandlerInterceptor = function (propertyName, eventHandler, domNode, properties) {
            return function () {
                // intercept function calls (event handlers) to do a render afterwards.
                projector.scheduleRender();
                return eventHandler.apply(properties.bind || this, arguments);
            };
        };
        var renderCompleted = true;
        var scheduled;
        var stopped = false;
        var projections = [];
        var renderFunctions = [];
        // matches the projections array
        var doRender = function () {
            scheduled = undefined;
            if (!renderCompleted) {
                return;    // The last render threw an error, it should be logged in the browser console.
            }
            renderCompleted = false;
            for (var i = 0; i < projections.length; i++) {
                var updatedVnode = renderFunctions[i]();
                projections[i].update(updatedVnode);
            }
            renderCompleted = true;
        };
        projector = {
            renderNow: doRender,
            scheduleRender: function () {
                if (!scheduled && !stopped) {
                    scheduled = requestAnimationFrame(doRender);
                }
            },
            stop: function () {
                if (scheduled) {
                    cancelAnimationFrame(scheduled);
                    scheduled = undefined;
                }
                stopped = true;
            },
            resume: function () {
                stopped = false;
                renderCompleted = true;
                projector.scheduleRender();
            },
            append: function (parentNode, renderMaquetteFunction) {
                projections.push(exports.dom.append(parentNode, renderMaquetteFunction(), projectionOptions));
                renderFunctions.push(renderMaquetteFunction);
            },
            insertBefore: function (beforeNode, renderMaquetteFunction) {
                projections.push(exports.dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));
                renderFunctions.push(renderMaquetteFunction);
            },
            merge: function (domNode, renderMaquetteFunction) {
                projections.push(exports.dom.merge(domNode, renderMaquetteFunction(), projectionOptions));
                renderFunctions.push(renderMaquetteFunction);
            },
            replace: function (domNode, renderMaquetteFunction) {
                projections.push(exports.dom.replace(domNode, renderMaquetteFunction(), projectionOptions));
                renderFunctions.push(renderMaquetteFunction);
            },
            detach: function (renderMaquetteFunction) {
                for (var i = 0; i < renderFunctions.length; i++) {
                    if (renderFunctions[i] === renderMaquetteFunction) {
                        renderFunctions.splice(i, 1);
                        return projections.splice(i, 1)[0];
                    }
                }
                throw new Error('renderMaquetteFunction was not found');
            }
        };
        return projector;
    };
}));
//# sourceMappingURL=maquette.js.map


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(15));
__export(__webpack_require__(17));
__export(__webpack_require__(18));
__export(__webpack_require__(19));
__export(__webpack_require__(20));
__export(__webpack_require__(21));
__export(__webpack_require__(22));
__export(__webpack_require__(23));
__export(__webpack_require__(24));
__export(__webpack_require__(25));
__export(__webpack_require__(26));
__export(__webpack_require__(27));
__export(__webpack_require__(28));
__export(__webpack_require__(29));
__export(__webpack_require__(30));
__export(__webpack_require__(31));
__export(__webpack_require__(32));
__export(__webpack_require__(33));
__export(__webpack_require__(34));
__export(__webpack_require__(35));
__export(__webpack_require__(36));

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var maquette = __webpack_require__(1);
var h = maquette.h;
var CaliforniaGenerated_1 = __webpack_require__(2);
var PagePreview_1 = __webpack_require__(37);
var PropertyBar_1 = __webpack_require__(39);
var CaliforniaRouter_1 = __webpack_require__(41);
var ClientState_1 = __webpack_require__(4);
var CaliforniaClientPartialData_1 = __webpack_require__(42);
exports.DEFAULT_EXCEPTION = "unexpected error";
exports.UI_Z_INDEX = 11;
var RESIZE_HANDLER_DELAY_MS = 200;
function getArrayForEnum(targetEnum) {
    return Object.keys(targetEnum).map(function (key) {
        return targetEnum[key];
    }).filter(function (value) {
        return typeof value === "string";
    });
}
exports.getArrayForEnum = getArrayForEnum;
;
function parseIntFromAttribute(element, attributeName) {
    if (element === undefined) {
        console.log("cannot read attribute: element is null");
    }
    var attr = element.attributes.getNamedItem(attributeName);
    if (attr === null) {
        console.log("could not find attribute " + attributeName + " on target");
        console.log(element);
        return 0;
    } else {
        return parseInt(attr.value);
    }
}
exports.parseIntFromAttribute = parseIntFromAttribute;
;
function parseStringFromAttribute(element, attributeName) {
    if (element === undefined) {
        console.log("cannot read attribute: element is null");
    }
    var attr = element.attributes.getNamedItem(attributeName);
    if (attr === null) {
        console.log("could not find attribute " + attributeName + " on target");
        console.log(element);
        return "";
    } else {
        return attr.value;
    }
}
exports.parseStringFromAttribute = parseStringFromAttribute;
;
var CaliforniaApp = function () {
    function CaliforniaApp() {
        var _this = this;
        this.californiaMainDiv = document.getElementById("california-main");
        this.styleSheet = document.getElementById("california-styles").sheet;
        this.pagePreviewHolder = undefined;
        this._propertyBars = [];
        this._propertyBarVMs = [];
        this._propertyBarBoxTreeDomReferences = [];
        this._propertyBarBoxTreeScrollHandled = [];
        this.isAjaxRequestRunning = false;
        this.resizeRtime = new Date();
        this.resizeTimeout = false;
        this.navigationHeigthPx = 32;
        this.controlAreaWidthPx = 500;
        this._propertyBarCount = 4;
        this.clientData = {
            CurrentRevision: 0,
            StatusText: "",
            CaliforniaEvent: CaliforniaGenerated_1.CaliforniaEvent.ReadInitialClientData,
            CaliforniaProject: new CaliforniaGenerated_1.CaliforniaProject(),
            AllCssProperties: [],
            StyleAtomCssPropertyMapping: {},
            UrlToReadAndEdit: "",
            UrlToReadOnly: "",
            PartialUpdate: new CaliforniaClientPartialData_1.CaliforniaClientPartialData(),
            ThirdPartyFonts: []
        };
        this.resizeCheckHandler = function () {
            var curTime = Date.now();
            if (curTime - CaliforniaApp.CaliforniaAppInstance.resizeRtime.getMilliseconds() < RESIZE_HANDLER_DELAY_MS) {
                setTimeout(CaliforniaApp.CaliforniaAppInstance.resizeCheckHandler, RESIZE_HANDLER_DELAY_MS);
            } else {
                CaliforniaApp.CaliforniaAppInstance.resizeChangedHandler();
                CaliforniaApp.CaliforniaAppInstance.resizeTimeout = false;
            }
        };
        this.resizeChangedHandler = function () {
            CaliforniaApp.CaliforniaAppInstance.state.overrideResponsiveDeviceId = 0;
            CaliforniaApp.CaliforniaAppInstance.router.setupUiForDevice();
            CaliforniaApp.CaliforniaAppInstance.projector.scheduleRender();
        };
        this.renderCaliforniaApp = function () {
            var appStyles = {
                "width": "100%",
                "max-width": "100%",
                "height": "100%",
                "max-height": "100%",
                "display": "flex",
                "flex-flow": "row nowrap"
            };
            var renderedPropertyBars = [];
            var maxRenderedPropertyBarCount = _this.state.visiblePropertyBarMaxCount > _this._propertyBarCount ? _this._propertyBarCount : _this.state.visiblePropertyBarMaxCount;
            for (var i = 0; i < maxRenderedPropertyBarCount; i++) {
                renderedPropertyBars.push(_this._propertyBars[i].renderPropertyBar());
            }
            return h(
                "div",
                { styles: appStyles },
                _this.pagePreview.renderPreviewArea(),
                _this.state.isHideUserInterface || _this.state.editViewMode === ClientState_1.EditViewMode.PagePreviewOnly ? undefined : renderedPropertyBars,
                _this._propertyBars[0].renderPropertyBarPoppersRenderOnce()
            );
        };
        this.projector = maquette.createProjector();
        this.pagePreview = new PagePreview_1.PagePreview(this);
        this.pagePreviewVM = this.pagePreview.viewModel;
        for (var i = 0; i < this.propertyBarCount; i++) {
            var propertyBar = new PropertyBar_1.PropertyBar(this, i);
            this._propertyBars.push(propertyBar);
            this._propertyBarVMs.push(propertyBar.viewModel);
            this._propertyBarBoxTreeDomReferences.push(undefined);
            this._propertyBarBoxTreeScrollHandled.push(false);
        }
        this.controller = new CaliforniaGenerated_1.CaliforniaController(this);
        this.router = new CaliforniaRouter_1.CaliforniaRouter(this);
        this.state = new ClientState_1.ClientState(this);
        this.controller.InitialClientDataJson(new Date().toString()).done(function (data) {
            CaliforniaApp.CaliforniaAppInstance.router.updateData(data, true);
        }).fail(function () {
            console.log("could not get data");
        });
        document.addEventListener("DOMContentLoaded", function () {
            CaliforniaApp.CaliforniaAppInstance.projector.append(CaliforniaApp.CaliforniaAppInstance.californiaMainDiv, CaliforniaApp.CaliforniaAppInstance.renderCaliforniaApp);
        });
        window.addEventListener("resize", function () {
            CaliforniaApp.CaliforniaAppInstance.resizeRtime = new Date();
            if (CaliforniaApp.CaliforniaAppInstance.resizeTimeout === false) {
                CaliforniaApp.CaliforniaAppInstance.resizeTimeout = true;
                setTimeout(CaliforniaApp.CaliforniaAppInstance.resizeCheckHandler, RESIZE_HANDLER_DELAY_MS);
            }
        });
    }
    ;
    Object.defineProperty(CaliforniaApp.prototype, "propertyBarCount", {
        get: function get() {
            return this._propertyBarCount;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(CaliforniaApp.prototype, "propertyBars", {
        get: function get() {
            return this._propertyBars;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(CaliforniaApp.prototype, "propertyBarVMs", {
        get: function get() {
            return this._propertyBarVMs;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(CaliforniaApp.prototype, "propertyBarBoxTreeDomReferences", {
        get: function get() {
            return this._propertyBarBoxTreeDomReferences;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(CaliforniaApp.prototype, "propertyBarBoxTreeScrollHandled", {
        get: function get() {
            return this._propertyBarBoxTreeScrollHandled;
        },
        enumerable: true,
        configurable: true
    });
    ;
    return CaliforniaApp;
}();
exports.CaliforniaApp = CaliforniaApp;
;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var CaliforniaGenerated_1 = __webpack_require__(2);
var PropertyBarVM_1 = __webpack_require__(5);
var currentApp;
var currentClientState;
exports.STATIC_MARGIN_PX = 25;
var SelectionMode;
(function (SelectionMode) {
    SelectionMode[SelectionMode["Styles"] = 0] = "Styles";
    SelectionMode[SelectionMode["Content"] = 1] = "Content";
})(SelectionMode = exports.SelectionMode || (exports.SelectionMode = {}));
;
var ReadyState;
(function (ReadyState) {
    ReadyState[ReadyState["Ok"] = 0] = "Ok";
    ReadyState[ReadyState["Pending"] = 1] = "Pending";
})(ReadyState = exports.ReadyState || (exports.ReadyState = {}));
;
var EditViewMode;
(function (EditViewMode) {
    EditViewMode[EditViewMode["Default"] = 0] = "Default";
    EditViewMode[EditViewMode["SidebarOnly"] = 1] = "SidebarOnly";
    EditViewMode[EditViewMode["PagePreviewOnly"] = 2] = "PagePreviewOnly";
})(EditViewMode = exports.EditViewMode || (exports.EditViewMode = {}));
;
var ClientState = function () {
    function ClientState(californiaAppArg) {
        this.isDataLoaded = false;
        this.isHideUserInterface = false;
        this.editViewMode = EditViewMode.Default;
        this.currentSelectionMode = SelectionMode.Content;
        this.currentReadyState = ReadyState.Ok;
        this.isJaxOn = false;
        this.lowestWidthThresholdResponsiveDeviceId = 0;
        this.highestWidthThresholdResponsiveDeviceId = 0;
        this.specialStyleHolder = undefined;
        this.currentResponsiveDeviceId = 0;
        this.noneResponsiveDeviceId = 0;
        this.defaultSymmetricPagePreviewHolderMarginPx = exports.STATIC_MARGIN_PX;
        this.overrideResponsiveDeviceId = 0;
        this.isEnoughAvailableSpacePagePreview = true;
        this.targetPagePreviewHolderMarginPx = exports.STATIC_MARGIN_PX;
        this.visiblePropertyBarMaxCount = 2;
        this.popupTargetPropertyBarIndex = 0;
        this.currentTransactionMode = PropertyBarVM_1.TransactionMode.MoveLayoutMoleculeIntoLayoutMolecule;
        this.highlightedLayoutBaseId = 0;
        this.isSelectAllTextArea = false;
        this.lastCommand = CaliforniaGenerated_1.CaliforniaEvent.ReadInitialClientData;
        this.lastCaliforniaEventData = [];
        this.selectedLayoutBaseId = 0;
        this.preselectedLayoutBaseId = 0;
        this.preselectedCaliforniaViewId = 0;
        this.isDrawHelperLines = false;
        this.hoveredBoxTreeLayoutBaseId = 0;
        this.hoveredPagePreviewLayoutBaseId = 0;
        this.hoveredInsertLayoutBaseId = 0;
        this.backupSortOrder = undefined;
        this.backupOwnerRowId = undefined;
        this.backupPlacedBoxInBoxId = undefined;
        this.newBoxStyleMoleculeId = 0;
        currentClientState = this;
        currentApp = californiaAppArg;
    }
    ;
    return ClientState;
}();
exports.ClientState = ClientState;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var maquette = __webpack_require__(1);
var h = maquette.h;
var CaliforniaGenerated_1 = __webpack_require__(2);
var PropertyBarMode;
(function (PropertyBarMode) {
    PropertyBarMode[PropertyBarMode["None"] = 0] = "None";
    PropertyBarMode[PropertyBarMode["CaliforniaView"] = 1] = "CaliforniaView";
    PropertyBarMode[PropertyBarMode["LayoutMolecules"] = 2] = "LayoutMolecules";
    PropertyBarMode[PropertyBarMode["LayoutAtoms"] = 3] = "LayoutAtoms";
    PropertyBarMode[PropertyBarMode["AllStyleQuantums"] = 4] = "AllStyleQuantums";
    PropertyBarMode[PropertyBarMode["AllStyleAtoms"] = 5] = "AllStyleAtoms";
    PropertyBarMode[PropertyBarMode["AllStyleMolecules"] = 6] = "AllStyleMolecules";
    PropertyBarMode[PropertyBarMode["StyleMolecule"] = 7] = "StyleMolecule";
    PropertyBarMode[PropertyBarMode["AllLayoutMolecules"] = 8] = "AllLayoutMolecules";
    PropertyBarMode[PropertyBarMode["LayoutBase"] = 9] = "LayoutBase";
    PropertyBarMode[PropertyBarMode["AllCaliforniaViews"] = 10] = "AllCaliforniaViews";
})(PropertyBarMode = exports.PropertyBarMode || (exports.PropertyBarMode = {}));
;
var PopupSecondaryMode;
(function (PopupSecondaryMode) {
    PopupSecondaryMode[PopupSecondaryMode["None"] = 0] = "None";
    PopupSecondaryMode[PopupSecondaryMode["SelectBoxIntoBox"] = 1] = "SelectBoxIntoBox";
    PopupSecondaryMode[PopupSecondaryMode["SelectBoxIntoBoxAtomInPlace"] = 2] = "SelectBoxIntoBoxAtomInPlace";
})(PopupSecondaryMode = exports.PopupSecondaryMode || (exports.PopupSecondaryMode = {}));
;
var PopupMode;
(function (PopupMode) {
    PopupMode[PopupMode["None"] = 0] = "None";
    PopupMode[PopupMode["AddCssProperty"] = 1] = "AddCssProperty";
    PopupMode[PopupMode["AllCssProperties"] = 2] = "AllCssProperties";
    PopupMode[PopupMode["UpdateCssValue"] = 3] = "UpdateCssValue";
    PopupMode[PopupMode["MatchingQuantums"] = 4] = "MatchingQuantums";
    PopupMode[PopupMode["UpdateCssQuantum"] = 5] = "UpdateCssQuantum";
    PopupMode[PopupMode["AllCssPropertiesForQuantum"] = 6] = "AllCssPropertiesForQuantum";
    PopupMode[PopupMode["InsertLayoutRowIntoView"] = 7] = "InsertLayoutRowIntoView";
    PopupMode[PopupMode["InsertLayoutAtomIntoBox"] = 8] = "InsertLayoutAtomIntoBox";
    PopupMode[PopupMode["SelectBox"] = 9] = "SelectBox";
    PopupMode[PopupMode["MoveStyleAtom"] = 10] = "MoveStyleAtom";
    PopupMode[PopupMode["ShareCaliforniaProject"] = 11] = "ShareCaliforniaProject";
    PopupMode[PopupMode["SelectInteractionTarget"] = 12] = "SelectInteractionTarget";
    PopupMode[PopupMode["SelectInteractionTargetLayoutFilter"] = 13] = "SelectInteractionTargetLayoutFilter";
    PopupMode[PopupMode["CaliforniaViewSelection"] = 14] = "CaliforniaViewSelection";
    PopupMode[PopupMode["EditUserDefinedCss"] = 15] = "EditUserDefinedCss";
    PopupMode[PopupMode["SuggestedCssValues"] = 16] = "SuggestedCssValues";
})(PopupMode = exports.PopupMode || (exports.PopupMode = {}));
;
var TransactionMode;
(function (TransactionMode) {
    TransactionMode[TransactionMode["MoveLayoutMoleculeIntoLayoutMolecule"] = 0] = "MoveLayoutMoleculeIntoLayoutMolecule";
    TransactionMode[TransactionMode["MoveLayoutMoleculeBeforeLayoutMolecule"] = 1] = "MoveLayoutMoleculeBeforeLayoutMolecule";
    TransactionMode[TransactionMode["SyncLayoutStylesImitating"] = 2] = "SyncLayoutStylesImitating";
})(TransactionMode = exports.TransactionMode || (exports.TransactionMode = {}));
var currentApp;
var PropertyBarVM = function () {
    function PropertyBarVM(propertyBarArg, targetIndex, californiaAppArg) {
        var _this = this;
        this.propertyBarVMIndex = -1;
        this.currentPropertyBarMode = PropertyBarMode.None;
        this.currentPopupMode = PopupMode.None;
        this.currentSecondaryPopupMode = PopupSecondaryMode.None;
        this.tempQuantumName = "Quantum";
        this.tempCssPropertyName = "";
        this.tempCssValue = "";
        this.lastUsedTempCssValue = "";
        this.tempPseudoSelector = "";
        this.tempCaliforniaViewName = "";
        this.tempCssValueForInteraction = "";
        this.selectedStyleAtomId = 0;
        this.selectedStyleValueId = 0;
        this.selectedStyleQuantumId = 0;
        this.selectedStyleMoleculeId = 0;
        this._selectedCaliforniaViewId = 0;
        this.selectedResponsiveDeviceId = 0;
        this.selectedStateModifier = "";
        this.selectedStyleAtomType = CaliforniaGenerated_1.StyleAtomType.Generic;
        this.selectedLayoutBaseIdForFilter = 0;
        this.selectedLayoutStyleInteraction = 0;
        this.tempOriginalContent = "";
        this.tempContent = "";
        this.editedLayoutAtomId = 0;
        this.tempUserDefinedCss = "";
        this._deepestLevelActiveView = 0;
        this.selectedStyleAtomIdForPopup = 0;
        this.isSyncedWithBoxTreeToTheLeft = false;
        this.isSyncedWithPagePreview = false;
        this.setSelectedResponsiveDeviceId = function (responsiveDeviceId, isForce) {
            if (isForce || _this.currentVM.selectedResponsiveDeviceId == 0) {
                _this.currentVM.selectedResponsiveDeviceId = responsiveDeviceId;
            }
        };
        this.setSelectedCaliforniaView = function (californiaView, isForce) {
            if (isForce || _this.currentVM.selectedCaliforniaViewId == 0) {
                _this.currentVM._selectedCaliforniaViewId = californiaView.CaliforniaViewId;
                _this.currentVM._deepestLevelActiveView = californiaView.DeepestLevel;
                _this.currentVM.boxTreeProjector.map([californiaView]);
            } else {
                _this.currentVM.boxTreeProjector.map([]);
                _this.currentVM._deepestLevelActiveView = 0;
                _this.currentVM._selectedCaliforniaViewId = 0;
            }
        };
        this.updateData = function (styleQuantums, styleAtoms, styleMolecules, layoutMolecules, allCaliforniaViews, instanceableAtomsView, instanceableRowsView) {
            _this.currentVM.styleQuantumProjector.map(styleQuantums);
            _this.currentVM.styleAtomProjector.map(styleAtoms);
            _this.currentVM.styleMoleculeProjector.map(styleMolecules);
            _this.currentVM.allLayoutMoleculesProjector.map(layoutMolecules);
            _this.currentVM.allCaliforniaViewsProjector.map(allCaliforniaViews);
            _this.currentVM.instanceableAtomProjector.map(instanceableAtomsView.PlacedLayoutRows);
            _this.currentVM.instanceableMoleculeProjector.map(instanceableRowsView.PlacedLayoutRows);
        };
        currentApp = californiaAppArg;
        this.propertyBarVMIndex = targetIndex;
        this.styleQuantumProjector = propertyBarArg.renderStyleQuantumArray(propertyBarArg);
        this.styleAtomProjector = propertyBarArg.renderStyleAtomArray(propertyBarArg);
        this.styleMoleculeProjector = propertyBarArg.renderStyleMoleculeArray(propertyBarArg);
        this.instanceableAtomProjector = propertyBarArg.renderLayoutRowArray(propertyBarArg);
        this.instanceableMoleculeProjector = propertyBarArg.renderLayoutRowArray(propertyBarArg);
        this.allLayoutMoleculesProjector = propertyBarArg.renderLayoutMoleculeArray(propertyBarArg);
        this.allCaliforniaViewsProjector = propertyBarArg.renderCaliforniaViewArray(propertyBarArg);
        this.boxTreeProjector = propertyBarArg.renderBoxTreeForCaliforniaView(propertyBarArg);
    }
    ;
    Object.defineProperty(PropertyBarVM.prototype, "currentVM", {
        get: function get() {
            return currentApp.propertyBarVMs[this.propertyBarVMIndex];
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PropertyBarVM.prototype, "selectedCaliforniaViewId", {
        get: function get() {
            return this._selectedCaliforniaViewId;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PropertyBarVM.prototype, "deepestLevelActiveView", {
        get: function get() {
            return this._deepestLevelActiveView;
        },
        enumerable: true,
        configurable: true
    });
    ;
    PropertyBarVM.prototype.clearSelectedCaliforniaView = function (isClearWhenNonEqual, clearWhenEqualsCaliforniaViewId) {
        if (isClearWhenNonEqual === true || this.currentVM.selectedCaliforniaViewId == clearWhenEqualsCaliforniaViewId) {
            this.currentVM._selectedCaliforniaViewId = 0;
            this.currentVM._deepestLevelActiveView = 0;
            this.currentVM.boxTreeProjector.map([]);
        }
    };
    ;
    return PropertyBarVM;
}();
exports.PropertyBarVM = PropertyBarVM;

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(global) {/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.3
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';

var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
var timeoutDuration = 0;
for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
    timeoutDuration = 1;
    break;
  }
}

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var css = getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null;

  // NOTE: 1 DOM access here
  var offsetParent = element.offsetParent;
  // Skip hidden elements which don't have an offsetParent
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }

  // .offsetParent will return the closest TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);
}

function getWindowSizes() {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};
  var width = sizes.width || element.clientWidth || result.right - result.left;
  var height = sizes.height || element.clientHeight || result.bottom - result.top;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);

  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
  if (fixedPosition && parent.nodeName === 'HTML') {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop, 10);
    var marginLeft = parseFloat(styles.marginLeft, 10);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  return isFixed(getParentNode(element));
}

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // NOTE: 1 DOM access here

  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  boundaries.left += padding;
  boundaries.top += padding;
  boundaries.right -= padding;
  boundaries.bottom -= padding;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var styles = getComputedStyle(element);
  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  data.positionFixed = this.options.positionFixed;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroy the popper
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicity asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger onUpdate callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  // Avoid blurry text by using full pixel integers.
  // For pixel-perfect positioning, top/bottom prefers rounded
  // values, while left/right prefers floored values.
  var offsets = {
    left: Math.floor(popper.left),
    top: Math.round(popper.top),
    bottom: Math.round(popper.bottom),
    right: Math.floor(popper.right)
  };

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    top = -offsetParentRect.height + offsets.bottom;
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    left = -offsetParentRect.width + offsets.right;
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjuction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-right` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification
  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];

  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

  // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;

  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unitless, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the height.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * An scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper this makes sure the popper has always a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier, can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near eachothers
   * without leaving any gap between the two. Expecially useful when the arrow is
   * enabled and you want to assure it to point to its reference element.
   * It cares only about the first axis, you can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjuction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations).
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position,
     * the popper will never be placed outside of the defined boundaries
     * (except if keepTogether is enabled)
     */
    boundariesElement: 'viewport'
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3d transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties.
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define you own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3d transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties.
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the informations used by Popper.js
 * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements.
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overriden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass as 3rd argument an object with the same
 * structure of this object, example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated, this callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Create a new Popper.js instance
   * @class Popper
   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as popper.
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedule an update, it will run on the next UI update available
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

/* harmony default export */ __webpack_exports__["default"] = (Popper);
//# sourceMappingURL=popper.js.map

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(12)))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var ContentAtomType;
(function (ContentAtomType) {
    ContentAtomType[ContentAtomType["Text"] = 0] = "Text";
    ContentAtomType[ContentAtomType["Html"] = 1] = "Html";
    ContentAtomType[ContentAtomType["Picture"] = 2] = "Picture";
    ContentAtomType[ContentAtomType["Link"] = 3] = "Link";
    ContentAtomType[ContentAtomType["NavLink"] = 4] = "NavLink";
})(ContentAtomType = exports.ContentAtomType || (exports.ContentAtomType = {}));

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0);
__webpack_require__(9);
__webpack_require__(10);
__webpack_require__(11);
__webpack_require__(6);
__webpack_require__(13);
module.exports = __webpack_require__(14);


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery Validation Plugin v1.17.0
 *
 * https://jqueryvalidation.org/
 *
 * Copyright (c) 2017 Jörn Zaefferer
 * Released under the MIT license
 */
(function( factory ) {
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (typeof module === "object" && module.exports) {
		module.exports = factory( require( "jquery" ) );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

$.extend( $.fn, {

	// https://jqueryvalidation.org/validate/
	validate: function( options ) {

		// If nothing is selected, return nothing; can't chain anyway
		if ( !this.length ) {
			if ( options && options.debug && window.console ) {
				console.warn( "Nothing selected, can't validate, returning nothing." );
			}
			return;
		}

		// Check if a validator for this form was already created
		var validator = $.data( this[ 0 ], "validator" );
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr( "novalidate", "novalidate" );

		validator = new $.validator( options, this[ 0 ] );
		$.data( this[ 0 ], "validator", validator );

		if ( validator.settings.onsubmit ) {

			this.on( "click.validate", ":submit", function( event ) {

				// Track the used submit button to properly handle scripted
				// submits later.
				validator.submitButton = event.currentTarget;

				// Allow suppressing validation by adding a cancel class to the submit button
				if ( $( this ).hasClass( "cancel" ) ) {
					validator.cancelSubmit = true;
				}

				// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
				if ( $( this ).attr( "formnovalidate" ) !== undefined ) {
					validator.cancelSubmit = true;
				}
			} );

			// Validate the form on submit
			this.on( "submit.validate", function( event ) {
				if ( validator.settings.debug ) {

					// Prevent form submit to be able to see console output
					event.preventDefault();
				}
				function handle() {
					var hidden, result;

					// Insert a hidden input as a replacement for the missing submit button
					// The hidden input is inserted in two cases:
					//   - A user defined a `submitHandler`
					//   - There was a pending request due to `remote` method and `stopRequest()`
					//     was called to submit the form in case it's valid
					if ( validator.submitButton && ( validator.settings.submitHandler || validator.formSubmitted ) ) {
						hidden = $( "<input type='hidden'/>" )
							.attr( "name", validator.submitButton.name )
							.val( $( validator.submitButton ).val() )
							.appendTo( validator.currentForm );
					}

					if ( validator.settings.submitHandler ) {
						result = validator.settings.submitHandler.call( validator, validator.currentForm, event );
						if ( hidden ) {

							// And clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						if ( result !== undefined ) {
							return result;
						}
						return false;
					}
					return true;
				}

				// Prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			} );
		}

		return validator;
	},

	// https://jqueryvalidation.org/valid/
	valid: function() {
		var valid, validator, errorList;

		if ( $( this[ 0 ] ).is( "form" ) ) {
			valid = this.validate().form();
		} else {
			errorList = [];
			valid = true;
			validator = $( this[ 0 ].form ).validate();
			this.each( function() {
				valid = validator.element( this ) && valid;
				if ( !valid ) {
					errorList = errorList.concat( validator.errorList );
				}
			} );
			validator.errorList = errorList;
		}
		return valid;
	},

	// https://jqueryvalidation.org/rules/
	rules: function( command, argument ) {
		var element = this[ 0 ],
			settings, staticRules, existingRules, data, param, filtered;

		// If nothing is selected, return empty object; can't chain anyway
		if ( element == null ) {
			return;
		}

		if ( !element.form && element.hasAttribute( "contenteditable" ) ) {
			element.form = this.closest( "form" )[ 0 ];
			element.name = this.attr( "name" );
		}

		if ( element.form == null ) {
			return;
		}

		if ( command ) {
			settings = $.data( element.form, "validator" ).settings;
			staticRules = settings.rules;
			existingRules = $.validator.staticRules( element );
			switch ( command ) {
			case "add":
				$.extend( existingRules, $.validator.normalizeRule( argument ) );

				// Remove messages from rules, but allow them to be set separately
				delete existingRules.messages;
				staticRules[ element.name ] = existingRules;
				if ( argument.messages ) {
					settings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );
				}
				break;
			case "remove":
				if ( !argument ) {
					delete staticRules[ element.name ];
					return existingRules;
				}
				filtered = {};
				$.each( argument.split( /\s/ ), function( index, method ) {
					filtered[ method ] = existingRules[ method ];
					delete existingRules[ method ];
				} );
				return filtered;
			}
		}

		data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.classRules( element ),
			$.validator.attributeRules( element ),
			$.validator.dataRules( element ),
			$.validator.staticRules( element )
		), element );

		// Make sure required is at front
		if ( data.required ) {
			param = data.required;
			delete data.required;
			data = $.extend( { required: param }, data );
		}

		// Make sure remote is at back
		if ( data.remote ) {
			param = data.remote;
			delete data.remote;
			data = $.extend( data, { remote: param } );
		}

		return data;
	}
} );

// Custom selectors
$.extend( $.expr.pseudos || $.expr[ ":" ], {		// '|| $.expr[ ":" ]' here enables backwards compatibility to jQuery 1.7. Can be removed when dropping jQ 1.7.x support

	// https://jqueryvalidation.org/blank-selector/
	blank: function( a ) {
		return !$.trim( "" + $( a ).val() );
	},

	// https://jqueryvalidation.org/filled-selector/
	filled: function( a ) {
		var val = $( a ).val();
		return val !== null && !!$.trim( "" + val );
	},

	// https://jqueryvalidation.org/unchecked-selector/
	unchecked: function( a ) {
		return !$( a ).prop( "checked" );
	}
} );

// Constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

// https://jqueryvalidation.org/jQuery.validator.format/
$.validator.format = function( source, params ) {
	if ( arguments.length === 1 ) {
		return function() {
			var args = $.makeArray( arguments );
			args.unshift( source );
			return $.validator.format.apply( this, args );
		};
	}
	if ( params === undefined ) {
		return source;
	}
	if ( arguments.length > 2 && params.constructor !== Array  ) {
		params = $.makeArray( arguments ).slice( 1 );
	}
	if ( params.constructor !== Array ) {
		params = [ params ];
	}
	$.each( params, function( i, n ) {
		source = source.replace( new RegExp( "\\{" + i + "\\}", "g" ), function() {
			return n;
		} );
	} );
	return source;
};

$.extend( $.validator, {

	defaults: {
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		pendingClass: "pending",
		validClass: "valid",
		errorElement: "label",
		focusCleanup: false,
		focusInvalid: true,
		errorContainer: $( [] ),
		errorLabelContainer: $( [] ),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function( element ) {
			this.lastActive = element;

			// Hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup ) {
				if ( this.settings.unhighlight ) {
					this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				}
				this.hideThese( this.errorsFor( element ) );
			}
		},
		onfocusout: function( element ) {
			if ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {
				this.element( element );
			}
		},
		onkeyup: function( element, event ) {

			// Avoid revalidate the field when pressing one of the following keys
			// Shift       => 16
			// Ctrl        => 17
			// Alt         => 18
			// Caps lock   => 20
			// End         => 35
			// Home        => 36
			// Left arrow  => 37
			// Up arrow    => 38
			// Right arrow => 39
			// Down arrow  => 40
			// Insert      => 45
			// Num lock    => 144
			// AltGr key   => 225
			var excludedKeys = [
				16, 17, 18, 20, 35, 36, 37,
				38, 39, 40, 45, 144, 225
			];

			if ( event.which === 9 && this.elementValue( element ) === "" || $.inArray( event.keyCode, excludedKeys ) !== -1 ) {
				return;
			} else if ( element.name in this.submitted || element.name in this.invalid ) {
				this.element( element );
			}
		},
		onclick: function( element ) {

			// Click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted ) {
				this.element( element );

			// Or option elements, check parent select in that case
			} else if ( element.parentNode.name in this.submitted ) {
				this.element( element.parentNode );
			}
		},
		highlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).addClass( errorClass ).removeClass( validClass );
			} else {
				$( element ).addClass( errorClass ).removeClass( validClass );
			}
		},
		unhighlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).removeClass( errorClass ).addClass( validClass );
			} else {
				$( element ).removeClass( errorClass ).addClass( validClass );
			}
		}
	},

	// https://jqueryvalidation.org/jQuery.validator.setDefaults/
	setDefaults: function( settings ) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date (ISO).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		equalTo: "Please enter the same value again.",
		maxlength: $.validator.format( "Please enter no more than {0} characters." ),
		minlength: $.validator.format( "Please enter at least {0} characters." ),
		rangelength: $.validator.format( "Please enter a value between {0} and {1} characters long." ),
		range: $.validator.format( "Please enter a value between {0} and {1}." ),
		max: $.validator.format( "Please enter a value less than or equal to {0}." ),
		min: $.validator.format( "Please enter a value greater than or equal to {0}." ),
		step: $.validator.format( "Please enter a multiple of {0}." )
	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $( this.settings.errorLabelContainer );
			this.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );
			this.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = ( this.groups = {} ),
				rules;
			$.each( this.settings.groups, function( key, value ) {
				if ( typeof value === "string" ) {
					value = value.split( /\s/ );
				}
				$.each( value, function( index, name ) {
					groups[ name ] = key;
				} );
			} );
			rules = this.settings.rules;
			$.each( rules, function( key, value ) {
				rules[ key ] = $.validator.normalizeRule( value );
			} );

			function delegate( event ) {

				// Set form expando on contenteditable
				if ( !this.form && this.hasAttribute( "contenteditable" ) ) {
					this.form = $( this ).closest( "form" )[ 0 ];
					this.name = $( this ).attr( "name" );
				}

				var validator = $.data( this.form, "validator" ),
					eventType = "on" + event.type.replace( /^validate/, "" ),
					settings = validator.settings;
				if ( settings[ eventType ] && !$( this ).is( settings.ignore ) ) {
					settings[ eventType ].call( validator, this, event );
				}
			}

			$( this.currentForm )
				.on( "focusin.validate focusout.validate keyup.validate",
					":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " +
					"[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " +
					"[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " +
					"[type='radio'], [type='checkbox'], [contenteditable], [type='button']", delegate )

				// Support: Chrome, oldIE
				// "select" is provided as event.target when clicking a option
				.on( "click.validate", "select, option, [type='radio'], [type='checkbox']", delegate );

			if ( this.settings.invalidHandler ) {
				$( this.currentForm ).on( "invalid-form.validate", this.settings.invalidHandler );
			}
		},

		// https://jqueryvalidation.org/Validator.form/
		form: function() {
			this.checkForm();
			$.extend( this.submitted, this.errorMap );
			this.invalid = $.extend( {}, this.errorMap );
			if ( !this.valid() ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ] );
			}
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {
				this.check( elements[ i ] );
			}
			return this.valid();
		},

		// https://jqueryvalidation.org/Validator.element/
		element: function( element ) {
			var cleanElement = this.clean( element ),
				checkElement = this.validationTargetFor( cleanElement ),
				v = this,
				result = true,
				rs, group;

			if ( checkElement === undefined ) {
				delete this.invalid[ cleanElement.name ];
			} else {
				this.prepareElement( checkElement );
				this.currentElements = $( checkElement );

				// If this element is grouped, then validate all group elements already
				// containing a value
				group = this.groups[ checkElement.name ];
				if ( group ) {
					$.each( this.groups, function( name, testgroup ) {
						if ( testgroup === group && name !== checkElement.name ) {
							cleanElement = v.validationTargetFor( v.clean( v.findByName( name ) ) );
							if ( cleanElement && cleanElement.name in v.invalid ) {
								v.currentElements.push( cleanElement );
								result = v.check( cleanElement ) && result;
							}
						}
					} );
				}

				rs = this.check( checkElement ) !== false;
				result = result && rs;
				if ( rs ) {
					this.invalid[ checkElement.name ] = false;
				} else {
					this.invalid[ checkElement.name ] = true;
				}

				if ( !this.numberOfInvalids() ) {

					// Hide error containers on last error
					this.toHide = this.toHide.add( this.containers );
				}
				this.showErrors();

				// Add aria-invalid status for screen readers
				$( element ).attr( "aria-invalid", !rs );
			}

			return result;
		},

		// https://jqueryvalidation.org/Validator.showErrors/
		showErrors: function( errors ) {
			if ( errors ) {
				var validator = this;

				// Add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = $.map( this.errorMap, function( message, name ) {
					return {
						message: message,
						element: validator.findByName( name )[ 0 ]
					};
				} );

				// Remove items from success list
				this.successList = $.grep( this.successList, function( element ) {
					return !( element.name in errors );
				} );
			}
			if ( this.settings.showErrors ) {
				this.settings.showErrors.call( this, this.errorMap, this.errorList );
			} else {
				this.defaultShowErrors();
			}
		},

		// https://jqueryvalidation.org/Validator.resetForm/
		resetForm: function() {
			if ( $.fn.resetForm ) {
				$( this.currentForm ).resetForm();
			}
			this.invalid = {};
			this.submitted = {};
			this.prepareForm();
			this.hideErrors();
			var elements = this.elements()
				.removeData( "previousValue" )
				.removeAttr( "aria-invalid" );

			this.resetElements( elements );
		},

		resetElements: function( elements ) {
			var i;

			if ( this.settings.unhighlight ) {
				for ( i = 0; elements[ i ]; i++ ) {
					this.settings.unhighlight.call( this, elements[ i ],
						this.settings.errorClass, "" );
					this.findByName( elements[ i ].name ).removeClass( this.settings.validClass );
				}
			} else {
				elements
					.removeClass( this.settings.errorClass )
					.removeClass( this.settings.validClass );
			}
		},

		numberOfInvalids: function() {
			return this.objectLength( this.invalid );
		},

		objectLength: function( obj ) {
			/* jshint unused: false */
			var count = 0,
				i;
			for ( i in obj ) {

				// This check allows counting elements with empty error
				// message as invalid elements
				if ( obj[ i ] !== undefined && obj[ i ] !== null && obj[ i ] !== false ) {
					count++;
				}
			}
			return count;
		},

		hideErrors: function() {
			this.hideThese( this.toHide );
		},

		hideThese: function( errors ) {
			errors.not( this.containers ).text( "" );
			this.addWrapper( errors ).hide();
		},

		valid: function() {
			return this.size() === 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if ( this.settings.focusInvalid ) {
				try {
					$( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [] )
					.filter( ":visible" )
					.focus()

					// Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger( "focusin" );
				} catch ( e ) {

					// Ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive && $.grep( this.errorList, function( n ) {
				return n.element.name === lastActive.name;
			} ).length === 1 && lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {};

			// Select all valid inputs inside the form (no submit or reset buttons)
			return $( this.currentForm )
			.find( "input, select, textarea, [contenteditable]" )
			.not( ":submit, :reset, :image, :disabled" )
			.not( this.settings.ignore )
			.filter( function() {
				var name = this.name || $( this ).attr( "name" ); // For contenteditable
				if ( !name && validator.settings.debug && window.console ) {
					console.error( "%o has no name assigned", this );
				}

				// Set form expando on contenteditable
				if ( this.hasAttribute( "contenteditable" ) ) {
					this.form = $( this ).closest( "form" )[ 0 ];
					this.name = name;
				}

				// Select only the first element for each name, and only those with rules specified
				if ( name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {
					return false;
				}

				rulesCache[ name ] = true;
				return true;
			} );
		},

		clean: function( selector ) {
			return $( selector )[ 0 ];
		},

		errors: function() {
			var errorClass = this.settings.errorClass.split( " " ).join( "." );
			return $( this.settings.errorElement + "." + errorClass, this.errorContext );
		},

		resetInternals: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $( [] );
			this.toHide = $( [] );
		},

		reset: function() {
			this.resetInternals();
			this.currentElements = $( [] );
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor( element );
		},

		elementValue: function( element ) {
			var $element = $( element ),
				type = element.type,
				val, idx;

			if ( type === "radio" || type === "checkbox" ) {
				return this.findByName( element.name ).filter( ":checked" ).val();
			} else if ( type === "number" && typeof element.validity !== "undefined" ) {
				return element.validity.badInput ? "NaN" : $element.val();
			}

			if ( element.hasAttribute( "contenteditable" ) ) {
				val = $element.text();
			} else {
				val = $element.val();
			}

			if ( type === "file" ) {

				// Modern browser (chrome & safari)
				if ( val.substr( 0, 12 ) === "C:\\fakepath\\" ) {
					return val.substr( 12 );
				}

				// Legacy browsers
				// Unix-based path
				idx = val.lastIndexOf( "/" );
				if ( idx >= 0 ) {
					return val.substr( idx + 1 );
				}

				// Windows-based path
				idx = val.lastIndexOf( "\\" );
				if ( idx >= 0 ) {
					return val.substr( idx + 1 );
				}

				// Just the file name
				return val;
			}

			if ( typeof val === "string" ) {
				return val.replace( /\r/g, "" );
			}
			return val;
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );

			var rules = $( element ).rules(),
				rulesCount = $.map( rules, function( n, i ) {
					return i;
				} ).length,
				dependencyMismatch = false,
				val = this.elementValue( element ),
				result, method, rule, normalizer;

			// Prioritize the local normalizer defined for this element over the global one
			// if the former exists, otherwise user the global one in case it exists.
			if ( typeof rules.normalizer === "function" ) {
				normalizer = rules.normalizer;
			} else if (	typeof this.settings.normalizer === "function" ) {
				normalizer = this.settings.normalizer;
			}

			// If normalizer is defined, then call it to retreive the changed value instead
			// of using the real one.
			// Note that `this` in the normalizer is `element`.
			if ( normalizer ) {
				val = normalizer.call( element, val );

				if ( typeof val !== "string" ) {
					throw new TypeError( "The normalizer should return a string value." );
				}

				// Delete the normalizer from rules to avoid treating it as a pre-defined method.
				delete rules.normalizer;
			}

			for ( method in rules ) {
				rule = { method: method, parameters: rules[ method ] };
				try {
					result = $.validator.methods[ method ].call( this, val, element, rule.parameters );

					// If a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result === "dependency-mismatch" && rulesCount === 1 ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result === "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor( element ) );
						return;
					}

					if ( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch ( e ) {
					if ( this.settings.debug && window.console ) {
						console.log( "Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e );
					}
					if ( e instanceof TypeError ) {
						e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
					}

					throw e;
				}
			}
			if ( dependencyMismatch ) {
				return;
			}
			if ( this.objectLength( rules ) ) {
				this.successList.push( element );
			}
			return true;
		},

		// Return the custom message for the given element and validation method
		// specified in the element's HTML5 data attribute
		// return the generic message if present and no method specific message is present
		customDataMessage: function( element, method ) {
			return $( element ).data( "msg" + method.charAt( 0 ).toUpperCase() +
				method.substring( 1 ).toLowerCase() ) || $( element ).data( "msg" );
		},

		// Return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[ name ];
			return m && ( m.constructor === String ? m : m[ method ] );
		},

		// Return the first defined argument, allowing empty strings
		findDefined: function() {
			for ( var i = 0; i < arguments.length; i++ ) {
				if ( arguments[ i ] !== undefined ) {
					return arguments[ i ];
				}
			}
			return undefined;
		},

		// The second parameter 'rule' used to be a string, and extended to an object literal
		// of the following form:
		// rule = {
		//     method: "method name",
		//     parameters: "the given method parameters"
		// }
		//
		// The old behavior still supported, kept to maintain backward compatibility with
		// old code, and will be removed in the next major release.
		defaultMessage: function( element, rule ) {
			if ( typeof rule === "string" ) {
				rule = { method: rule };
			}

			var message = this.findDefined(
					this.customMessage( element.name, rule.method ),
					this.customDataMessage( element, rule.method ),

					// 'title' is never undefined, so handle empty string as undefined
					!this.settings.ignoreTitle && element.title || undefined,
					$.validator.messages[ rule.method ],
					"<strong>Warning: No message defined for " + element.name + "</strong>"
				),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message === "function" ) {
				message = message.call( this, rule.parameters, element );
			} else if ( theregex.test( message ) ) {
				message = $.validator.format( message.replace( theregex, "{$1}" ), rule.parameters );
			}

			return message;
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule );

			this.errorList.push( {
				message: message,
				element: element,
				method: rule.method
			} );

			this.errorMap[ element.name ] = message;
			this.submitted[ element.name ] = message;
		},

		addWrapper: function( toToggle ) {
			if ( this.settings.wrapper ) {
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			}
			return toToggle;
		},

		defaultShowErrors: function() {
			var i, elements, error;
			for ( i = 0; this.errorList[ i ]; i++ ) {
				error = this.errorList[ i ];
				if ( this.settings.highlight ) {
					this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				}
				this.showLabel( error.element, error.message );
			}
			if ( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if ( this.settings.success ) {
				for ( i = 0; this.successList[ i ]; i++ ) {
					this.showLabel( this.successList[ i ] );
				}
			}
			if ( this.settings.unhighlight ) {
				for ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {
					this.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not( this.invalidElements() );
		},

		invalidElements: function() {
			return $( this.errorList ).map( function() {
				return this.element;
			} );
		},

		showLabel: function( element, message ) {
			var place, group, errorID, v,
				error = this.errorsFor( element ),
				elementID = this.idOrName( element ),
				describedBy = $( element ).attr( "aria-describedby" );

			if ( error.length ) {

				// Refresh error/success class
				error.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );

				// Replace message on existing label
				error.html( message );
			} else {

				// Create error element
				error = $( "<" + this.settings.errorElement + ">" )
					.attr( "id", elementID + "-error" )
					.addClass( this.settings.errorClass )
					.html( message || "" );

				// Maintain reference to the element to be placed into the DOM
				place = error;
				if ( this.settings.wrapper ) {

					// Make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					place = error.hide().show().wrap( "<" + this.settings.wrapper + "/>" ).parent();
				}
				if ( this.labelContainer.length ) {
					this.labelContainer.append( place );
				} else if ( this.settings.errorPlacement ) {
					this.settings.errorPlacement.call( this, place, $( element ) );
				} else {
					place.insertAfter( element );
				}

				// Link error back to the element
				if ( error.is( "label" ) ) {

					// If the error is a label, then associate using 'for'
					error.attr( "for", elementID );

					// If the element is not a child of an associated label, then it's necessary
					// to explicitly apply aria-describedby
				} else if ( error.parents( "label[for='" + this.escapeCssMeta( elementID ) + "']" ).length === 0 ) {
					errorID = error.attr( "id" );

					// Respect existing non-error aria-describedby
					if ( !describedBy ) {
						describedBy = errorID;
					} else if ( !describedBy.match( new RegExp( "\\b" + this.escapeCssMeta( errorID ) + "\\b" ) ) ) {

						// Add to end of list if not already present
						describedBy += " " + errorID;
					}
					$( element ).attr( "aria-describedby", describedBy );

					// If this element is grouped, then assign to all elements in the same group
					group = this.groups[ element.name ];
					if ( group ) {
						v = this;
						$.each( v.groups, function( name, testgroup ) {
							if ( testgroup === group ) {
								$( "[name='" + v.escapeCssMeta( name ) + "']", v.currentForm )
									.attr( "aria-describedby", error.attr( "id" ) );
							}
						} );
					}
				}
			}
			if ( !message && this.settings.success ) {
				error.text( "" );
				if ( typeof this.settings.success === "string" ) {
					error.addClass( this.settings.success );
				} else {
					this.settings.success( error, element );
				}
			}
			this.toShow = this.toShow.add( error );
		},

		errorsFor: function( element ) {
			var name = this.escapeCssMeta( this.idOrName( element ) ),
				describer = $( element ).attr( "aria-describedby" ),
				selector = "label[for='" + name + "'], label[for='" + name + "'] *";

			// 'aria-describedby' should directly reference the error element
			if ( describer ) {
				selector = selector + ", #" + this.escapeCssMeta( describer )
					.replace( /\s+/g, ", #" );
			}

			return this
				.errors()
				.filter( selector );
		},

		// See https://api.jquery.com/category/selectors/, for CSS
		// meta-characters that should be escaped in order to be used with JQuery
		// as a literal part of a name/id or any selector.
		escapeCssMeta: function( string ) {
			return string.replace( /([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1" );
		},

		idOrName: function( element ) {
			return this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );
		},

		validationTargetFor: function( element ) {

			// If radio/checkbox, validate first element in group instead
			if ( this.checkable( element ) ) {
				element = this.findByName( element.name );
			}

			// Always apply ignore filter
			return $( element ).not( this.settings.ignore )[ 0 ];
		},

		checkable: function( element ) {
			return ( /radio|checkbox/i ).test( element.type );
		},

		findByName: function( name ) {
			return $( this.currentForm ).find( "[name='" + this.escapeCssMeta( name ) + "']" );
		},

		getLength: function( value, element ) {
			switch ( element.nodeName.toLowerCase() ) {
			case "select":
				return $( "option:selected", element ).length;
			case "input":
				if ( this.checkable( element ) ) {
					return this.findByName( element.name ).filter( ":checked" ).length;
				}
			}
			return value.length;
		},

		depend: function( param, element ) {
			return this.dependTypes[ typeof param ] ? this.dependTypes[ typeof param ]( param, element ) : true;
		},

		dependTypes: {
			"boolean": function( param ) {
				return param;
			},
			"string": function( param, element ) {
				return !!$( param, element.form ).length;
			},
			"function": function( param, element ) {
				return param( element );
			}
		},

		optional: function( element ) {
			var val = this.elementValue( element );
			return !$.validator.methods.required.call( this, val, element ) && "dependency-mismatch";
		},

		startRequest: function( element ) {
			if ( !this.pending[ element.name ] ) {
				this.pendingRequest++;
				$( element ).addClass( this.settings.pendingClass );
				this.pending[ element.name ] = true;
			}
		},

		stopRequest: function( element, valid ) {
			this.pendingRequest--;

			// Sometimes synchronization fails, make sure pendingRequest is never < 0
			if ( this.pendingRequest < 0 ) {
				this.pendingRequest = 0;
			}
			delete this.pending[ element.name ];
			$( element ).removeClass( this.settings.pendingClass );
			if ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {
				$( this.currentForm ).submit();

				// Remove the hidden input that was used as a replacement for the
				// missing submit button. The hidden input is added by `handle()`
				// to ensure that the value of the used submit button is passed on
				// for scripted submits triggered by this method
				if ( this.submitButton ) {
					$( "input:hidden[name='" + this.submitButton.name + "']", this.currentForm ).remove();
				}

				this.formSubmitted = false;
			} else if ( !valid && this.pendingRequest === 0 && this.formSubmitted ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ] );
				this.formSubmitted = false;
			}
		},

		previousValue: function( element, method ) {
			method = typeof method === "string" && method || "remote";

			return $.data( element, "previousValue" ) || $.data( element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, { method: method } )
			} );
		},

		// Cleans up all forms and elements, removes validator-specific events
		destroy: function() {
			this.resetForm();

			$( this.currentForm )
				.off( ".validate" )
				.removeData( "validator" )
				.find( ".validate-equalTo-blur" )
					.off( ".validate-equalTo" )
					.removeClass( "validate-equalTo-blur" );
		}

	},

	classRuleSettings: {
		required: { required: true },
		email: { email: true },
		url: { url: true },
		date: { date: true },
		dateISO: { dateISO: true },
		number: { number: true },
		digits: { digits: true },
		creditcard: { creditcard: true }
	},

	addClassRules: function( className, rules ) {
		if ( className.constructor === String ) {
			this.classRuleSettings[ className ] = rules;
		} else {
			$.extend( this.classRuleSettings, className );
		}
	},

	classRules: function( element ) {
		var rules = {},
			classes = $( element ).attr( "class" );

		if ( classes ) {
			$.each( classes.split( " " ), function() {
				if ( this in $.validator.classRuleSettings ) {
					$.extend( rules, $.validator.classRuleSettings[ this ] );
				}
			} );
		}
		return rules;
	},

	normalizeAttributeRule: function( rules, type, method, value ) {

		// Convert the value to a number for number inputs, and for text for backwards compability
		// allows type="date" and others to be compared as strings
		if ( /min|max|step/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {
			value = Number( value );

			// Support Opera Mini, which returns NaN for undefined minlength
			if ( isNaN( value ) ) {
				value = undefined;
			}
		}

		if ( value || value === 0 ) {
			rules[ method ] = value;
		} else if ( type === method && type !== "range" ) {

			// Exception: the jquery validate 'range' method
			// does not test for the html5 'range' type
			rules[ method ] = true;
		}
	},

	attributeRules: function( element ) {
		var rules = {},
			$element = $( element ),
			type = element.getAttribute( "type" ),
			method, value;

		for ( method in $.validator.methods ) {

			// Support for <input required> in both html5 and older browsers
			if ( method === "required" ) {
				value = element.getAttribute( method );

				// Some browsers return an empty string for the required attribute
				// and non-HTML5 browsers might have required="" markup
				if ( value === "" ) {
					value = true;
				}

				// Force non-HTML5 browsers to return bool
				value = !!value;
			} else {
				value = $element.attr( method );
			}

			this.normalizeAttributeRule( rules, type, method, value );
		}

		// 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
		if ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {
			delete rules.maxlength;
		}

		return rules;
	},

	dataRules: function( element ) {
		var rules = {},
			$element = $( element ),
			type = element.getAttribute( "type" ),
			method, value;

		for ( method in $.validator.methods ) {
			value = $element.data( "rule" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );
			this.normalizeAttributeRule( rules, type, method, value );
		}
		return rules;
	},

	staticRules: function( element ) {
		var rules = {},
			validator = $.data( element.form, "validator" );

		if ( validator.settings.rules ) {
			rules = $.validator.normalizeRule( validator.settings.rules[ element.name ] ) || {};
		}
		return rules;
	},

	normalizeRules: function( rules, element ) {

		// Handle dependency check
		$.each( rules, function( prop, val ) {

			// Ignore rule when param is explicitly false, eg. required:false
			if ( val === false ) {
				delete rules[ prop ];
				return;
			}
			if ( val.param || val.depends ) {
				var keepRule = true;
				switch ( typeof val.depends ) {
				case "string":
					keepRule = !!$( val.depends, element.form ).length;
					break;
				case "function":
					keepRule = val.depends.call( element, element );
					break;
				}
				if ( keepRule ) {
					rules[ prop ] = val.param !== undefined ? val.param : true;
				} else {
					$.data( element.form, "validator" ).resetElements( $( element ) );
					delete rules[ prop ];
				}
			}
		} );

		// Evaluate parameters
		$.each( rules, function( rule, parameter ) {
			rules[ rule ] = $.isFunction( parameter ) && rule !== "normalizer" ? parameter( element ) : parameter;
		} );

		// Clean number parameters
		$.each( [ "minlength", "maxlength" ], function() {
			if ( rules[ this ] ) {
				rules[ this ] = Number( rules[ this ] );
			}
		} );
		$.each( [ "rangelength", "range" ], function() {
			var parts;
			if ( rules[ this ] ) {
				if ( $.isArray( rules[ this ] ) ) {
					rules[ this ] = [ Number( rules[ this ][ 0 ] ), Number( rules[ this ][ 1 ] ) ];
				} else if ( typeof rules[ this ] === "string" ) {
					parts = rules[ this ].replace( /[\[\]]/g, "" ).split( /[\s,]+/ );
					rules[ this ] = [ Number( parts[ 0 ] ), Number( parts[ 1 ] ) ];
				}
			}
		} );

		if ( $.validator.autoCreateRanges ) {

			// Auto-create ranges
			if ( rules.min != null && rules.max != null ) {
				rules.range = [ rules.min, rules.max ];
				delete rules.min;
				delete rules.max;
			}
			if ( rules.minlength != null && rules.maxlength != null ) {
				rules.rangelength = [ rules.minlength, rules.maxlength ];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function( data ) {
		if ( typeof data === "string" ) {
			var transformed = {};
			$.each( data.split( /\s/ ), function() {
				transformed[ this ] = true;
			} );
			data = transformed;
		}
		return data;
	},

	// https://jqueryvalidation.org/jQuery.validator.addMethod/
	addMethod: function( name, method, message ) {
		$.validator.methods[ name ] = method;
		$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];
		if ( method.length < 3 ) {
			$.validator.addClassRules( name, $.validator.normalizeRule( name ) );
		}
	},

	// https://jqueryvalidation.org/jQuery.validator.methods/
	methods: {

		// https://jqueryvalidation.org/required-method/
		required: function( value, element, param ) {

			// Check if dependency is met
			if ( !this.depend( param, element ) ) {
				return "dependency-mismatch";
			}
			if ( element.nodeName.toLowerCase() === "select" ) {

				// Could be an array for select-multiple or a string, both are fine this way
				var val = $( element ).val();
				return val && val.length > 0;
			}
			if ( this.checkable( element ) ) {
				return this.getLength( value, element ) > 0;
			}
			return value.length > 0;
		},

		// https://jqueryvalidation.org/email-method/
		email: function( value, element ) {

			// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
			// Retrieved 2014-01-14
			// If you have a problem with this implementation, report a bug against the above spec
			// Or use custom methods to implement your own email validation
			return this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );
		},

		// https://jqueryvalidation.org/url-method/
		url: function( value, element ) {

			// Copyright (c) 2010-2013 Diego Perini, MIT licensed
			// https://gist.github.com/dperini/729294
			// see also https://mathiasbynens.be/demo/url-regex
			// modified to allow protocol-relative URLs
			return this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test( value );
		},

		// https://jqueryvalidation.org/date-method/
		date: function( value, element ) {
			return this.optional( element ) || !/Invalid|NaN/.test( new Date( value ).toString() );
		},

		// https://jqueryvalidation.org/dateISO-method/
		dateISO: function( value, element ) {
			return this.optional( element ) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test( value );
		},

		// https://jqueryvalidation.org/number-method/
		number: function( value, element ) {
			return this.optional( element ) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test( value );
		},

		// https://jqueryvalidation.org/digits-method/
		digits: function( value, element ) {
			return this.optional( element ) || /^\d+$/.test( value );
		},

		// https://jqueryvalidation.org/minlength-method/
		minlength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || length >= param;
		},

		// https://jqueryvalidation.org/maxlength-method/
		maxlength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || length <= param;
		},

		// https://jqueryvalidation.org/rangelength-method/
		rangelength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || ( length >= param[ 0 ] && length <= param[ 1 ] );
		},

		// https://jqueryvalidation.org/min-method/
		min: function( value, element, param ) {
			return this.optional( element ) || value >= param;
		},

		// https://jqueryvalidation.org/max-method/
		max: function( value, element, param ) {
			return this.optional( element ) || value <= param;
		},

		// https://jqueryvalidation.org/range-method/
		range: function( value, element, param ) {
			return this.optional( element ) || ( value >= param[ 0 ] && value <= param[ 1 ] );
		},

		// https://jqueryvalidation.org/step-method/
		step: function( value, element, param ) {
			var type = $( element ).attr( "type" ),
				errorMessage = "Step attribute on input type " + type + " is not supported.",
				supportedTypes = [ "text", "number", "range" ],
				re = new RegExp( "\\b" + type + "\\b" ),
				notSupported = type && !re.test( supportedTypes.join() ),
				decimalPlaces = function( num ) {
					var match = ( "" + num ).match( /(?:\.(\d+))?$/ );
					if ( !match ) {
						return 0;
					}

					// Number of digits right of decimal point.
					return match[ 1 ] ? match[ 1 ].length : 0;
				},
				toInt = function( num ) {
					return Math.round( num * Math.pow( 10, decimals ) );
				},
				valid = true,
				decimals;

			// Works only for text, number and range input types
			// TODO find a way to support input types date, datetime, datetime-local, month, time and week
			if ( notSupported ) {
				throw new Error( errorMessage );
			}

			decimals = decimalPlaces( param );

			// Value can't have too many decimals
			if ( decimalPlaces( value ) > decimals || toInt( value ) % toInt( param ) !== 0 ) {
				valid = false;
			}

			return this.optional( element ) || valid;
		},

		// https://jqueryvalidation.org/equalTo-method/
		equalTo: function( value, element, param ) {

			// Bind to the blur event of the target in order to revalidate whenever the target field is updated
			var target = $( param );
			if ( this.settings.onfocusout && target.not( ".validate-equalTo-blur" ).length ) {
				target.addClass( "validate-equalTo-blur" ).on( "blur.validate-equalTo", function() {
					$( element ).valid();
				} );
			}
			return value === target.val();
		},

		// https://jqueryvalidation.org/remote-method/
		remote: function( value, element, param, method ) {
			if ( this.optional( element ) ) {
				return "dependency-mismatch";
			}

			method = typeof method === "string" && method || "remote";

			var previous = this.previousValue( element, method ),
				validator, data, optionDataString;

			if ( !this.settings.messages[ element.name ] ) {
				this.settings.messages[ element.name ] = {};
			}
			previous.originalMessage = previous.originalMessage || this.settings.messages[ element.name ][ method ];
			this.settings.messages[ element.name ][ method ] = previous.message;

			param = typeof param === "string" && { url: param } || param;
			optionDataString = $.param( $.extend( { data: value }, param.data ) );
			if ( previous.old === optionDataString ) {
				return previous.valid;
			}

			previous.old = optionDataString;
			validator = this;
			this.startRequest( element );
			data = {};
			data[ element.name ] = value;
			$.ajax( $.extend( true, {
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				context: validator.currentForm,
				success: function( response ) {
					var valid = response === true || response === "true",
						errors, message, submitted;

					validator.settings.messages[ element.name ][ method ] = previous.originalMessage;
					if ( valid ) {
						submitted = validator.formSubmitted;
						validator.resetInternals();
						validator.toHide = validator.errorsFor( element );
						validator.formSubmitted = submitted;
						validator.successList.push( element );
						validator.invalid[ element.name ] = false;
						validator.showErrors();
					} else {
						errors = {};
						message = response || validator.defaultMessage( element, { method: method, parameters: value } );
						errors[ element.name ] = previous.message = message;
						validator.invalid[ element.name ] = true;
						validator.showErrors( errors );
					}
					previous.valid = valid;
					validator.stopRequest( element, valid );
				}
			}, param ) );
			return "pending";
		}
	}

} );

// Ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

var pendingRequests = {},
	ajax;

// Use a prefilter if available (1.5+)
if ( $.ajaxPrefilter ) {
	$.ajaxPrefilter( function( settings, _, xhr ) {
		var port = settings.port;
		if ( settings.mode === "abort" ) {
			if ( pendingRequests[ port ] ) {
				pendingRequests[ port ].abort();
			}
			pendingRequests[ port ] = xhr;
		}
	} );
} else {

	// Proxy ajax
	ajax = $.ajax;
	$.ajax = function( settings ) {
		var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
			port = ( "port" in settings ? settings : $.ajaxSettings ).port;
		if ( mode === "abort" ) {
			if ( pendingRequests[ port ] ) {
				pendingRequests[ port ].abort();
			}
			pendingRequests[ port ] = ajax.apply( this, arguments );
			return pendingRequests[ port ];
		}
		return ajax.apply( this, arguments );
	};
}
return $;
}));

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*!
** Unobtrusive validation support library for jQuery and jQuery Validate
** Copyright (C) Microsoft Corporation. All rights reserved.
*/

/*jslint white: true, browser: true, onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true, strict: false */
/*global document: false, jQuery: false */

(function ($) {
    var $jQval = $.validator,
        adapters,
        data_validation = "unobtrusiveValidation";

    function setValidationValues(options, ruleName, value) {
        options.rules[ruleName] = value;
        if (options.message) {
            options.messages[ruleName] = options.message;
        }
    }

    function splitAndTrim(value) {
        return value.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
    }

    function escapeAttributeValue(value) {
        // As mentioned on http://api.jquery.com/category/selectors/
        return value.replace(/([!"#$%&'()*+,./:;<=>?@\[\\\]^`{|}~])/g, "\\$1");
    }

    function getModelPrefix(fieldName) {
        return fieldName.substr(0, fieldName.lastIndexOf(".") + 1);
    }

    function appendModelPrefix(value, prefix) {
        if (value.indexOf("*.") === 0) {
            value = value.replace("*.", prefix);
        }
        return value;
    }

    function onError(error, inputElement) {  // 'this' is the form element
        var container = $(this).find("[data-valmsg-for='" + escapeAttributeValue(inputElement[0].name) + "']"),
            replaceAttrValue = container.attr("data-valmsg-replace"),
            replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== false : null;

        container.removeClass("field-validation-valid").addClass("field-validation-error");
        error.data("unobtrusiveContainer", container);

        if (replace) {
            container.empty();
            error.removeClass("input-validation-error").appendTo(container);
        }
        else {
            error.hide();
        }
    }

    function onErrors(event, validator) {  // 'this' is the form element
        var container = $(this).find("[data-valmsg-summary=true]"),
            list = container.find("ul");

        if (list && list.length && validator.errorList.length) {
            list.empty();
            container.addClass("validation-summary-errors").removeClass("validation-summary-valid");

            $.each(validator.errorList, function () {
                $("<li />").html(this.message).appendTo(list);
            });
        }
    }

    function onSuccess(error) {  // 'this' is the form element
        var container = error.data("unobtrusiveContainer");

        if (container) {
            var replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;

            container.addClass("field-validation-valid").removeClass("field-validation-error");
            error.removeData("unobtrusiveContainer");

            if (replace) {
                container.empty();
            }
        }
    }

    function onReset(event) {  // 'this' is the form element
        var $form = $(this),
            key = '__jquery_unobtrusive_validation_form_reset';
        if ($form.data(key)) {
            return;
        }
        // Set a flag that indicates we're currently resetting the form.
        $form.data(key, true);
        try {
            $form.data("validator").resetForm();
        } finally {
            $form.removeData(key);
        }

        $form.find(".validation-summary-errors")
            .addClass("validation-summary-valid")
            .removeClass("validation-summary-errors");
        $form.find(".field-validation-error")
            .addClass("field-validation-valid")
            .removeClass("field-validation-error")
            .removeData("unobtrusiveContainer")
            .find(">*")  // If we were using valmsg-replace, get the underlying error
                .removeData("unobtrusiveContainer");
    }

    function validationInfo(form) {
        var $form = $(form),
            result = $form.data(data_validation),
            onResetProxy = $.proxy(onReset, form),
            defaultOptions = $jQval.unobtrusive.options || {},
            execInContext = function (name, args) {
                var func = defaultOptions[name];
                func && $.isFunction(func) && func.apply(form, args);
            }

        if (!result) {
            result = {
                options: {  // options structure passed to jQuery Validate's validate() method
                    errorClass: defaultOptions.errorClass || "input-validation-error",
                    errorElement: defaultOptions.errorElement || "span",
                    errorPlacement: function () {
                        onError.apply(form, arguments);
                        execInContext("errorPlacement", arguments);
                    },
                    invalidHandler: function () {
                        onErrors.apply(form, arguments);
                        execInContext("invalidHandler", arguments);
                    },
                    messages: {},
                    rules: {},
                    success: function () {
                        onSuccess.apply(form, arguments);
                        execInContext("success", arguments);
                    }
                },
                attachValidation: function () {
                    $form
                        .off("reset." + data_validation, onResetProxy)
                        .on("reset." + data_validation, onResetProxy)
                        .validate(this.options);
                },
                validate: function () {  // a validation function that is called by unobtrusive Ajax
                    $form.validate();
                    return $form.valid();
                }
            };
            $form.data(data_validation, result);
        }

        return result;
    }

    $jQval.unobtrusive = {
        adapters: [],

        parseElement: function (element, skipAttach) {
            /// <summary>
            /// Parses a single HTML element for unobtrusive validation attributes.
            /// </summary>
            /// <param name="element" domElement="true">The HTML element to be parsed.</param>
            /// <param name="skipAttach" type="Boolean">[Optional] true to skip attaching the
            /// validation to the form. If parsing just this single element, you should specify true.
            /// If parsing several elements, you should specify false, and manually attach the validation
            /// to the form when you are finished. The default is false.</param>
            var $element = $(element),
                form = $element.parents("form")[0],
                valInfo, rules, messages;

            if (!form) {  // Cannot do client-side validation without a form
                return;
            }

            valInfo = validationInfo(form);
            valInfo.options.rules[element.name] = rules = {};
            valInfo.options.messages[element.name] = messages = {};

            $.each(this.adapters, function () {
                var prefix = "data-val-" + this.name,
                    message = $element.attr(prefix),
                    paramValues = {};

                if (message !== undefined) {  // Compare against undefined, because an empty message is legal (and falsy)
                    prefix += "-";

                    $.each(this.params, function () {
                        paramValues[this] = $element.attr(prefix + this);
                    });

                    this.adapt({
                        element: element,
                        form: form,
                        message: message,
                        params: paramValues,
                        rules: rules,
                        messages: messages
                    });
                }
            });

            $.extend(rules, { "__dummy__": true });

            if (!skipAttach) {
                valInfo.attachValidation();
            }
        },

        parse: function (selector) {
            /// <summary>
            /// Parses all the HTML elements in the specified selector. It looks for input elements decorated
            /// with the [data-val=true] attribute value and enables validation according to the data-val-*
            /// attribute values.
            /// </summary>
            /// <param name="selector" type="String">Any valid jQuery selector.</param>

            // $forms includes all forms in selector's DOM hierarchy (parent, children and self) that have at least one
            // element with data-val=true
            var $selector = $(selector),
                $forms = $selector.parents()
                                  .addBack()
                                  .filter("form")
                                  .add($selector.find("form"))
                                  .has("[data-val=true]");

            $selector.find("[data-val=true]").each(function () {
                $jQval.unobtrusive.parseElement(this, true);
            });

            $forms.each(function () {
                var info = validationInfo(this);
                if (info) {
                    info.attachValidation();
                }
            });
        }
    };

    adapters = $jQval.unobtrusive.adapters;

    adapters.add = function (adapterName, params, fn) {
        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation.</summary>
        /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
        /// <param name="params" type="Array" optional="true">[Optional] An array of parameter names (strings) that will
        /// be extracted from the data-val-nnnn-mmmm HTML attributes (where nnnn is the adapter name, and
        /// mmmm is the parameter name).</param>
        /// <param name="fn" type="Function">The function to call, which adapts the values from the HTML
        /// attributes into jQuery Validate rules and/or messages.</param>
        /// <returns type="jQuery.validator.unobtrusive.adapters" />
        if (!fn) {  // Called with no params, just a function
            fn = params;
            params = [];
        }
        this.push({ name: adapterName, params: params, adapt: fn });
        return this;
    };

    adapters.addBool = function (adapterName, ruleName) {
        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
        /// the jQuery Validate validation rule has no parameter values.</summary>
        /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
        /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
        /// of adapterName will be used instead.</param>
        /// <returns type="jQuery.validator.unobtrusive.adapters" />
        return this.add(adapterName, function (options) {
            setValidationValues(options, ruleName || adapterName, true);
        });
    };

    adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {
        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
        /// the jQuery Validate validation has three potential rules (one for min-only, one for max-only, and
        /// one for min-and-max). The HTML parameters are expected to be named -min and -max.</summary>
        /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
        /// <param name="minRuleName" type="String">The name of the jQuery Validate rule to be used when you only
        /// have a minimum value.</param>
        /// <param name="maxRuleName" type="String">The name of the jQuery Validate rule to be used when you only
        /// have a maximum value.</param>
        /// <param name="minMaxRuleName" type="String">The name of the jQuery Validate rule to be used when you
        /// have both a minimum and maximum value.</param>
        /// <param name="minAttribute" type="String" optional="true">[Optional] The name of the HTML attribute that
        /// contains the minimum value. The default is "min".</param>
        /// <param name="maxAttribute" type="String" optional="true">[Optional] The name of the HTML attribute that
        /// contains the maximum value. The default is "max".</param>
        /// <returns type="jQuery.validator.unobtrusive.adapters" />
        return this.add(adapterName, [minAttribute || "min", maxAttribute || "max"], function (options) {
            var min = options.params.min,
                max = options.params.max;

            if (min && max) {
                setValidationValues(options, minMaxRuleName, [min, max]);
            }
            else if (min) {
                setValidationValues(options, minRuleName, min);
            }
            else if (max) {
                setValidationValues(options, maxRuleName, max);
            }
        });
    };

    adapters.addSingleVal = function (adapterName, attribute, ruleName) {
        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
        /// the jQuery Validate validation rule has a single value.</summary>
        /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
        /// in the data-val-nnnn HTML attribute(where nnnn is the adapter name).</param>
        /// <param name="attribute" type="String">[Optional] The name of the HTML attribute that contains the value.
        /// The default is "val".</param>
        /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
        /// of adapterName will be used instead.</param>
        /// <returns type="jQuery.validator.unobtrusive.adapters" />
        return this.add(adapterName, [attribute || "val"], function (options) {
            setValidationValues(options, ruleName || adapterName, options.params[attribute]);
        });
    };

    $jQval.addMethod("__dummy__", function (value, element, params) {
        return true;
    });

    $jQval.addMethod("regex", function (value, element, params) {
        var match;
        if (this.optional(element)) {
            return true;
        }

        match = new RegExp(params).exec(value);
        return (match && (match.index === 0) && (match[0].length === value.length));
    });

    $jQval.addMethod("nonalphamin", function (value, element, nonalphamin) {
        var match;
        if (nonalphamin) {
            match = value.match(/\W/g);
            match = match && match.length >= nonalphamin;
        }
        return match;
    });

    if ($jQval.methods.extension) {
        adapters.addSingleVal("accept", "mimtype");
        adapters.addSingleVal("extension", "extension");
    } else {
        // for backward compatibility, when the 'extension' validation method does not exist, such as with versions
        // of JQuery Validation plugin prior to 1.10, we should use the 'accept' method for
        // validating the extension, and ignore mime-type validations as they are not supported.
        adapters.addSingleVal("extension", "extension", "accept");
    }

    adapters.addSingleVal("regex", "pattern");
    adapters.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url");
    adapters.addMinMax("length", "minlength", "maxlength", "rangelength").addMinMax("range", "min", "max", "range");
    adapters.addMinMax("minlength", "minlength").addMinMax("maxlength", "minlength", "maxlength");
    adapters.add("equalto", ["other"], function (options) {
        var prefix = getModelPrefix(options.element.name),
            other = options.params.other,
            fullOtherName = appendModelPrefix(other, prefix),
            element = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(fullOtherName) + "']")[0];

        setValidationValues(options, "equalTo", element);
    });
    adapters.add("required", function (options) {
        // jQuery Validate equates "required" with "mandatory" for checkbox elements
        if (options.element.tagName.toUpperCase() !== "INPUT" || options.element.type.toUpperCase() !== "CHECKBOX") {
            setValidationValues(options, "required", true);
        }
    });
    adapters.add("remote", ["url", "type", "additionalfields"], function (options) {
        var value = {
            url: options.params.url,
            type: options.params.type || "GET",
            data: {}
        },
            prefix = getModelPrefix(options.element.name);

        $.each(splitAndTrim(options.params.additionalfields || options.element.name), function (i, fieldName) {
            var paramName = appendModelPrefix(fieldName, prefix);
            value.data[paramName] = function () {
                var field = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(paramName) + "']");
                // For checkboxes and radio buttons, only pick up values from checked fields.
                if (field.is(":checkbox")) {
                    return field.filter(":checked").val() || field.filter(":hidden").val() || '';
                }
                else if (field.is(":radio")) {
                    return field.filter(":checked").val() || '';
                }
                return field.val();
            };
        });

        setValidationValues(options, "remote", value);
    });
    adapters.add("password", ["min", "nonalphamin", "regex"], function (options) {
        if (options.params.min) {
            setValidationValues(options, "minlength", options.params.min);
        }
        if (options.params.nonalphamin) {
            setValidationValues(options, "nonalphamin", options.params.nonalphamin);
        }
        if (options.params.regex) {
            setValidationValues(options, "regex", options.params.regex);
        }
    });

    $(function () {
        $jQval.unobtrusive.parse(document);
    });
}(jQuery));
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether 1.4.3 */

(function(root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    module.exports = factory(require, exports, module);
  } else {
    root.Tether = factory();
  }
}(this, function(require, exports, module) {

'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var TetherBase = undefined;
if (typeof TetherBase === 'undefined') {
  TetherBase = { modules: [] };
}

var zeroElement = null;

// Same as native getBoundingClientRect, except it takes into account parent <frame> offsets
// if the element lies within a nested document (<frame> or <iframe>-like).
function getActualBoundingClientRect(node) {
  var boundingRect = node.getBoundingClientRect();

  // The original object returned by getBoundingClientRect is immutable, so we clone it
  // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9
  var rect = {};
  for (var k in boundingRect) {
    rect[k] = boundingRect[k];
  }

  if (node.ownerDocument !== document) {
    var _frameElement = node.ownerDocument.defaultView.frameElement;
    if (_frameElement) {
      var frameRect = getActualBoundingClientRect(_frameElement);
      rect.top += frameRect.top;
      rect.bottom += frameRect.top;
      rect.left += frameRect.left;
      rect.right += frameRect.left;
    }
  }

  return rect;
}

function getScrollParents(el) {
  // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;
  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397
  var computedStyle = getComputedStyle(el) || {};
  var position = computedStyle.position;
  var parents = [];

  if (position === 'fixed') {
    return [el];
  }

  var parent = el;
  while ((parent = parent.parentNode) && parent && parent.nodeType === 1) {
    var style = undefined;
    try {
      style = getComputedStyle(parent);
    } catch (err) {}

    if (typeof style === 'undefined' || style === null) {
      parents.push(parent);
      return parents;
    }

    var _style = style;
    var overflow = _style.overflow;
    var overflowX = _style.overflowX;
    var overflowY = _style.overflowY;

    if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
      if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {
        parents.push(parent);
      }
    }
  }

  parents.push(el.ownerDocument.body);

  // If the node is within a frame, account for the parent window scroll
  if (el.ownerDocument !== document) {
    parents.push(el.ownerDocument.defaultView);
  }

  return parents;
}

var uniqueId = (function () {
  var id = 0;
  return function () {
    return ++id;
  };
})();

var zeroPosCache = {};
var getOrigin = function getOrigin() {
  // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
  // jitter as the user scrolls that messes with our ability to detect if two positions
  // are equivilant or not.  We place an element at the top left of the page that will
  // get the same jitter, so we can cancel the two out.
  var node = zeroElement;
  if (!node || !document.body.contains(node)) {
    node = document.createElement('div');
    node.setAttribute('data-tether-id', uniqueId());
    extend(node.style, {
      top: 0,
      left: 0,
      position: 'absolute'
    });

    document.body.appendChild(node);

    zeroElement = node;
  }

  var id = node.getAttribute('data-tether-id');
  if (typeof zeroPosCache[id] === 'undefined') {
    zeroPosCache[id] = getActualBoundingClientRect(node);

    // Clear the cache when this position call is done
    defer(function () {
      delete zeroPosCache[id];
    });
  }

  return zeroPosCache[id];
};

function removeUtilElements() {
  if (zeroElement) {
    document.body.removeChild(zeroElement);
  }
  zeroElement = null;
};

function getBounds(el) {
  var doc = undefined;
  if (el === document) {
    doc = document;
    el = document.documentElement;
  } else {
    doc = el.ownerDocument;
  }

  var docEl = doc.documentElement;

  var box = getActualBoundingClientRect(el);

  var origin = getOrigin();

  box.top -= origin.top;
  box.left -= origin.left;

  if (typeof box.width === 'undefined') {
    box.width = document.body.scrollWidth - box.left - box.right;
  }
  if (typeof box.height === 'undefined') {
    box.height = document.body.scrollHeight - box.top - box.bottom;
  }

  box.top = box.top - docEl.clientTop;
  box.left = box.left - docEl.clientLeft;
  box.right = doc.body.clientWidth - box.width - box.left;
  box.bottom = doc.body.clientHeight - box.height - box.top;

  return box;
}

function getOffsetParent(el) {
  return el.offsetParent || document.documentElement;
}

var _scrollBarSize = null;
function getScrollBarSize() {
  if (_scrollBarSize) {
    return _scrollBarSize;
  }
  var inner = document.createElement('div');
  inner.style.width = '100%';
  inner.style.height = '200px';

  var outer = document.createElement('div');
  extend(outer.style, {
    position: 'absolute',
    top: 0,
    left: 0,
    pointerEvents: 'none',
    visibility: 'hidden',
    width: '200px',
    height: '150px',
    overflow: 'hidden'
  });

  outer.appendChild(inner);

  document.body.appendChild(outer);

  var widthContained = inner.offsetWidth;
  outer.style.overflow = 'scroll';
  var widthScroll = inner.offsetWidth;

  if (widthContained === widthScroll) {
    widthScroll = outer.clientWidth;
  }

  document.body.removeChild(outer);

  var width = widthContained - widthScroll;

  _scrollBarSize = { width: width, height: width };
  return _scrollBarSize;
}

function extend() {
  var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var args = [];

  Array.prototype.push.apply(args, arguments);

  args.slice(1).forEach(function (obj) {
    if (obj) {
      for (var key in obj) {
        if (({}).hasOwnProperty.call(obj, key)) {
          out[key] = obj[key];
        }
      }
    }
  });

  return out;
}

function removeClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    name.split(' ').forEach(function (cls) {
      if (cls.trim()) {
        el.classList.remove(cls);
      }
    });
  } else {
    var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');
    var className = getClassName(el).replace(regex, ' ');
    setClassName(el, className);
  }
}

function addClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    name.split(' ').forEach(function (cls) {
      if (cls.trim()) {
        el.classList.add(cls);
      }
    });
  } else {
    removeClass(el, name);
    var cls = getClassName(el) + (' ' + name);
    setClassName(el, cls);
  }
}

function hasClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    return el.classList.contains(name);
  }
  var className = getClassName(el);
  return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);
}

function getClassName(el) {
  // Can't use just SVGAnimatedString here since nodes within a Frame in IE have
  // completely separately SVGAnimatedString base classes
  if (el.className instanceof el.ownerDocument.defaultView.SVGAnimatedString) {
    return el.className.baseVal;
  }
  return el.className;
}

function setClassName(el, className) {
  el.setAttribute('class', className);
}

function updateClasses(el, add, all) {
  // Of the set of 'all' classes, we need the 'add' classes, and only the
  // 'add' classes to be set.
  all.forEach(function (cls) {
    if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
      removeClass(el, cls);
    }
  });

  add.forEach(function (cls) {
    if (!hasClass(el, cls)) {
      addClass(el, cls);
    }
  });
}

var deferred = [];

var defer = function defer(fn) {
  deferred.push(fn);
};

var flush = function flush() {
  var fn = undefined;
  while (fn = deferred.pop()) {
    fn();
  }
};

var Evented = (function () {
  function Evented() {
    _classCallCheck(this, Evented);
  }

  _createClass(Evented, [{
    key: 'on',
    value: function on(event, handler, ctx) {
      var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

      if (typeof this.bindings === 'undefined') {
        this.bindings = {};
      }
      if (typeof this.bindings[event] === 'undefined') {
        this.bindings[event] = [];
      }
      this.bindings[event].push({ handler: handler, ctx: ctx, once: once });
    }
  }, {
    key: 'once',
    value: function once(event, handler, ctx) {
      this.on(event, handler, ctx, true);
    }
  }, {
    key: 'off',
    value: function off(event, handler) {
      if (typeof this.bindings === 'undefined' || typeof this.bindings[event] === 'undefined') {
        return;
      }

      if (typeof handler === 'undefined') {
        delete this.bindings[event];
      } else {
        var i = 0;
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            this.bindings[event].splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    }
  }, {
    key: 'trigger',
    value: function trigger(event) {
      if (typeof this.bindings !== 'undefined' && this.bindings[event]) {
        var i = 0;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        while (i < this.bindings[event].length) {
          var _bindings$event$i = this.bindings[event][i];
          var handler = _bindings$event$i.handler;
          var ctx = _bindings$event$i.ctx;
          var once = _bindings$event$i.once;

          var context = ctx;
          if (typeof context === 'undefined') {
            context = this;
          }

          handler.apply(context, args);

          if (once) {
            this.bindings[event].splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    }
  }]);

  return Evented;
})();

TetherBase.Utils = {
  getActualBoundingClientRect: getActualBoundingClientRect,
  getScrollParents: getScrollParents,
  getBounds: getBounds,
  getOffsetParent: getOffsetParent,
  extend: extend,
  addClass: addClass,
  removeClass: removeClass,
  hasClass: hasClass,
  updateClasses: updateClasses,
  defer: defer,
  flush: flush,
  uniqueId: uniqueId,
  Evented: Evented,
  getScrollBarSize: getScrollBarSize,
  removeUtilElements: removeUtilElements
};
/* globals TetherBase, performance */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (typeof TetherBase === 'undefined') {
  throw new Error('You must include the utils.js file before tether.js');
}

var _TetherBase$Utils = TetherBase.Utils;
var getScrollParents = _TetherBase$Utils.getScrollParents;
var getBounds = _TetherBase$Utils.getBounds;
var getOffsetParent = _TetherBase$Utils.getOffsetParent;
var extend = _TetherBase$Utils.extend;
var addClass = _TetherBase$Utils.addClass;
var removeClass = _TetherBase$Utils.removeClass;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;
var flush = _TetherBase$Utils.flush;
var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;
var removeUtilElements = _TetherBase$Utils.removeUtilElements;

function within(a, b) {
  var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

  return a + diff >= b && b >= a - diff;
}

var transformKey = (function () {
  if (typeof document === 'undefined') {
    return '';
  }
  var el = document.createElement('div');

  var transforms = ['transform', 'WebkitTransform', 'OTransform', 'MozTransform', 'msTransform'];
  for (var i = 0; i < transforms.length; ++i) {
    var key = transforms[i];
    if (el.style[key] !== undefined) {
      return key;
    }
  }
})();

var tethers = [];

var position = function position() {
  tethers.forEach(function (tether) {
    tether.position(false);
  });
  flush();
};

function now() {
  if (typeof performance === 'object' && typeof performance.now === 'function') {
    return performance.now();
  }
  return +new Date();
}

(function () {
  var lastCall = null;
  var lastDuration = null;
  var pendingTimeout = null;

  var tick = function tick() {
    if (typeof lastDuration !== 'undefined' && lastDuration > 16) {
      // We voluntarily throttle ourselves if we can't manage 60fps
      lastDuration = Math.min(lastDuration - 16, 250);

      // Just in case this is the last event, remember to position just once more
      pendingTimeout = setTimeout(tick, 250);
      return;
    }

    if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {
      // Some browsers call events a little too frequently, refuse to run more than is reasonable
      return;
    }

    if (pendingTimeout != null) {
      clearTimeout(pendingTimeout);
      pendingTimeout = null;
    }

    lastCall = now();
    position();
    lastDuration = now() - lastCall;
  };

  if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined') {
    ['resize', 'scroll', 'touchmove'].forEach(function (event) {
      window.addEventListener(event, tick);
    });
  }
})();

var MIRROR_LR = {
  center: 'center',
  left: 'right',
  right: 'left'
};

var MIRROR_TB = {
  middle: 'middle',
  top: 'bottom',
  bottom: 'top'
};

var OFFSET_MAP = {
  top: 0,
  left: 0,
  middle: '50%',
  center: '50%',
  bottom: '100%',
  right: '100%'
};

var autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {
  var left = attachment.left;
  var top = attachment.top;

  if (left === 'auto') {
    left = MIRROR_LR[relativeToAttachment.left];
  }

  if (top === 'auto') {
    top = MIRROR_TB[relativeToAttachment.top];
  }

  return { left: left, top: top };
};

var attachmentToOffset = function attachmentToOffset(attachment) {
  var left = attachment.left;
  var top = attachment.top;

  if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {
    left = OFFSET_MAP[attachment.left];
  }

  if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {
    top = OFFSET_MAP[attachment.top];
  }

  return { left: left, top: top };
};

function addOffset() {
  var out = { top: 0, left: 0 };

  for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {
    offsets[_key] = arguments[_key];
  }

  offsets.forEach(function (_ref) {
    var top = _ref.top;
    var left = _ref.left;

    if (typeof top === 'string') {
      top = parseFloat(top, 10);
    }
    if (typeof left === 'string') {
      left = parseFloat(left, 10);
    }

    out.top += top;
    out.left += left;
  });

  return out;
}

function offsetToPx(offset, size) {
  if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
    offset.left = parseFloat(offset.left, 10) / 100 * size.width;
  }
  if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
    offset.top = parseFloat(offset.top, 10) / 100 * size.height;
  }

  return offset;
}

var parseOffset = function parseOffset(value) {
  var _value$split = value.split(' ');

  var _value$split2 = _slicedToArray(_value$split, 2);

  var top = _value$split2[0];
  var left = _value$split2[1];

  return { top: top, left: left };
};
var parseAttachment = parseOffset;

var TetherClass = (function (_Evented) {
  _inherits(TetherClass, _Evented);

  function TetherClass(options) {
    var _this = this;

    _classCallCheck(this, TetherClass);

    _get(Object.getPrototypeOf(TetherClass.prototype), 'constructor', this).call(this);
    this.position = this.position.bind(this);

    tethers.push(this);

    this.history = [];

    this.setOptions(options, false);

    TetherBase.modules.forEach(function (module) {
      if (typeof module.initialize !== 'undefined') {
        module.initialize.call(_this);
      }
    });

    this.position();
  }

  _createClass(TetherClass, [{
    key: 'getClass',
    value: function getClass() {
      var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
      var classes = this.options.classes;

      if (typeof classes !== 'undefined' && classes[key]) {
        return this.options.classes[key];
      } else if (this.options.classPrefix) {
        return this.options.classPrefix + '-' + key;
      } else {
        return key;
      }
    }
  }, {
    key: 'setOptions',
    value: function setOptions(options) {
      var _this2 = this;

      var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      var defaults = {
        offset: '0 0',
        targetOffset: '0 0',
        targetAttachment: 'auto auto',
        classPrefix: 'tether'
      };

      this.options = extend(defaults, options);

      var _options = this.options;
      var element = _options.element;
      var target = _options.target;
      var targetModifier = _options.targetModifier;

      this.element = element;
      this.target = target;
      this.targetModifier = targetModifier;

      if (this.target === 'viewport') {
        this.target = document.body;
        this.targetModifier = 'visible';
      } else if (this.target === 'scroll-handle') {
        this.target = document.body;
        this.targetModifier = 'scroll-handle';
      }

      ['element', 'target'].forEach(function (key) {
        if (typeof _this2[key] === 'undefined') {
          throw new Error('Tether Error: Both element and target must be defined');
        }

        if (typeof _this2[key].jquery !== 'undefined') {
          _this2[key] = _this2[key][0];
        } else if (typeof _this2[key] === 'string') {
          _this2[key] = document.querySelector(_this2[key]);
        }
      });

      addClass(this.element, this.getClass('element'));
      if (!(this.options.addTargetClasses === false)) {
        addClass(this.target, this.getClass('target'));
      }

      if (!this.options.attachment) {
        throw new Error('Tether Error: You must provide an attachment');
      }

      this.targetAttachment = parseAttachment(this.options.targetAttachment);
      this.attachment = parseAttachment(this.options.attachment);
      this.offset = parseOffset(this.options.offset);
      this.targetOffset = parseOffset(this.options.targetOffset);

      if (typeof this.scrollParents !== 'undefined') {
        this.disable();
      }

      if (this.targetModifier === 'scroll-handle') {
        this.scrollParents = [this.target];
      } else {
        this.scrollParents = getScrollParents(this.target);
      }

      if (!(this.options.enabled === false)) {
        this.enable(pos);
      }
    }
  }, {
    key: 'getTargetBounds',
    value: function getTargetBounds() {
      if (typeof this.targetModifier !== 'undefined') {
        if (this.targetModifier === 'visible') {
          if (this.target === document.body) {
            return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };
          } else {
            var bounds = getBounds(this.target);

            var out = {
              height: bounds.height,
              width: bounds.width,
              top: bounds.top,
              left: bounds.left
            };

            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));
            out.height = Math.min(innerHeight, out.height);
            out.height -= 2;

            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));
            out.width = Math.min(innerWidth, out.width);
            out.width -= 2;

            if (out.top < pageYOffset) {
              out.top = pageYOffset;
            }
            if (out.left < pageXOffset) {
              out.left = pageXOffset;
            }

            return out;
          }
        } else if (this.targetModifier === 'scroll-handle') {
          var bounds = undefined;
          var target = this.target;
          if (target === document.body) {
            target = document.documentElement;

            bounds = {
              left: pageXOffset,
              top: pageYOffset,
              height: innerHeight,
              width: innerWidth
            };
          } else {
            bounds = getBounds(target);
          }

          var style = getComputedStyle(target);

          var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;

          var scrollBottom = 0;
          if (hasBottomScroll) {
            scrollBottom = 15;
          }

          var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;

          var out = {
            width: 15,
            height: height * 0.975 * (height / target.scrollHeight),
            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
          };

          var fitAdj = 0;
          if (height < 408 && this.target === document.body) {
            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
          }

          if (this.target !== document.body) {
            out.height = Math.max(out.height, 24);
          }

          var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
          out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);

          if (this.target === document.body) {
            out.height = Math.max(out.height, 24);
          }

          return out;
        }
      } else {
        return getBounds(this.target);
      }
    }
  }, {
    key: 'clearCache',
    value: function clearCache() {
      this._cache = {};
    }
  }, {
    key: 'cache',
    value: function cache(k, getter) {
      // More than one module will often need the same DOM info, so
      // we keep a cache which is cleared on each position call
      if (typeof this._cache === 'undefined') {
        this._cache = {};
      }

      if (typeof this._cache[k] === 'undefined') {
        this._cache[k] = getter.call(this);
      }

      return this._cache[k];
    }
  }, {
    key: 'enable',
    value: function enable() {
      var _this3 = this;

      var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      if (!(this.options.addTargetClasses === false)) {
        addClass(this.target, this.getClass('enabled'));
      }
      addClass(this.element, this.getClass('enabled'));
      this.enabled = true;

      this.scrollParents.forEach(function (parent) {
        if (parent !== _this3.target.ownerDocument) {
          parent.addEventListener('scroll', _this3.position);
        }
      });

      if (pos) {
        this.position();
      }
    }
  }, {
    key: 'disable',
    value: function disable() {
      var _this4 = this;

      removeClass(this.target, this.getClass('enabled'));
      removeClass(this.element, this.getClass('enabled'));
      this.enabled = false;

      if (typeof this.scrollParents !== 'undefined') {
        this.scrollParents.forEach(function (parent) {
          parent.removeEventListener('scroll', _this4.position);
        });
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      var _this5 = this;

      this.disable();

      tethers.forEach(function (tether, i) {
        if (tether === _this5) {
          tethers.splice(i, 1);
        }
      });

      // Remove any elements we were using for convenience from the DOM
      if (tethers.length === 0) {
        removeUtilElements();
      }
    }
  }, {
    key: 'updateAttachClasses',
    value: function updateAttachClasses(elementAttach, targetAttach) {
      var _this6 = this;

      elementAttach = elementAttach || this.attachment;
      targetAttach = targetAttach || this.targetAttachment;
      var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];

      if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {
        // updateAttachClasses can be called more than once in a position call, so
        // we need to clean up after ourselves such that when the last defer gets
        // ran it doesn't add any extra classes from previous calls.
        this._addAttachClasses.splice(0, this._addAttachClasses.length);
      }

      if (typeof this._addAttachClasses === 'undefined') {
        this._addAttachClasses = [];
      }
      var add = this._addAttachClasses;

      if (elementAttach.top) {
        add.push(this.getClass('element-attached') + '-' + elementAttach.top);
      }
      if (elementAttach.left) {
        add.push(this.getClass('element-attached') + '-' + elementAttach.left);
      }
      if (targetAttach.top) {
        add.push(this.getClass('target-attached') + '-' + targetAttach.top);
      }
      if (targetAttach.left) {
        add.push(this.getClass('target-attached') + '-' + targetAttach.left);
      }

      var all = [];
      sides.forEach(function (side) {
        all.push(_this6.getClass('element-attached') + '-' + side);
        all.push(_this6.getClass('target-attached') + '-' + side);
      });

      defer(function () {
        if (!(typeof _this6._addAttachClasses !== 'undefined')) {
          return;
        }

        updateClasses(_this6.element, _this6._addAttachClasses, all);
        if (!(_this6.options.addTargetClasses === false)) {
          updateClasses(_this6.target, _this6._addAttachClasses, all);
        }

        delete _this6._addAttachClasses;
      });
    }
  }, {
    key: 'position',
    value: function position() {
      var _this7 = this;

      var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      // flushChanges commits the changes immediately, leave true unless you are positioning multiple
      // tethers (in which case call Tether.Utils.flush yourself when you're done)

      if (!this.enabled) {
        return;
      }

      this.clearCache();

      // Turn 'auto' attachments into the appropriate corner or edge
      var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);

      this.updateAttachClasses(this.attachment, targetAttachment);

      var elementPos = this.cache('element-bounds', function () {
        return getBounds(_this7.element);
      });

      var width = elementPos.width;
      var height = elementPos.height;

      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
        var _lastSize = this.lastSize;

        // We cache the height and width to make it possible to position elements that are
        // getting hidden.
        width = _lastSize.width;
        height = _lastSize.height;
      } else {
        this.lastSize = { width: width, height: height };
      }

      var targetPos = this.cache('target-bounds', function () {
        return _this7.getTargetBounds();
      });
      var targetSize = targetPos;

      // Get an actual px offset from the attachment
      var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });
      var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);

      var manualOffset = offsetToPx(this.offset, { width: width, height: height });
      var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);

      // Add the manually provided offset
      offset = addOffset(offset, manualOffset);
      targetOffset = addOffset(targetOffset, manualTargetOffset);

      // It's now our goal to make (element position + offset) == (target position + target offset)
      var left = targetPos.left + targetOffset.left - offset.left;
      var top = targetPos.top + targetOffset.top - offset.top;

      for (var i = 0; i < TetherBase.modules.length; ++i) {
        var _module2 = TetherBase.modules[i];
        var ret = _module2.position.call(this, {
          left: left,
          top: top,
          targetAttachment: targetAttachment,
          targetPos: targetPos,
          elementPos: elementPos,
          offset: offset,
          targetOffset: targetOffset,
          manualOffset: manualOffset,
          manualTargetOffset: manualTargetOffset,
          scrollbarSize: scrollbarSize,
          attachment: this.attachment
        });

        if (ret === false) {
          return false;
        } else if (typeof ret === 'undefined' || typeof ret !== 'object') {
          continue;
        } else {
          top = ret.top;
          left = ret.left;
        }
      }

      // We describe the position three different ways to give the optimizer
      // a chance to decide the best possible way to position the element
      // with the fewest repaints.
      var next = {
        // It's position relative to the page (absolute positioning when
        // the element is a child of the body)
        page: {
          top: top,
          left: left
        },

        // It's position relative to the viewport (fixed positioning)
        viewport: {
          top: top - pageYOffset,
          bottom: pageYOffset - top - height + innerHeight,
          left: left - pageXOffset,
          right: pageXOffset - left - width + innerWidth
        }
      };

      var doc = this.target.ownerDocument;
      var win = doc.defaultView;

      var scrollbarSize = undefined;
      if (win.innerHeight > doc.documentElement.clientHeight) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.bottom -= scrollbarSize.height;
      }

      if (win.innerWidth > doc.documentElement.clientWidth) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.right -= scrollbarSize.width;
      }

      if (['', 'static'].indexOf(doc.body.style.position) === -1 || ['', 'static'].indexOf(doc.body.parentElement.style.position) === -1) {
        // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
        next.page.bottom = doc.body.scrollHeight - top - height;
        next.page.right = doc.body.scrollWidth - left - width;
      }

      if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {
        (function () {
          var offsetParent = _this7.cache('target-offsetparent', function () {
            return getOffsetParent(_this7.target);
          });
          var offsetPosition = _this7.cache('target-offsetparent-bounds', function () {
            return getBounds(offsetParent);
          });
          var offsetParentStyle = getComputedStyle(offsetParent);
          var offsetParentSize = offsetPosition;

          var offsetBorder = {};
          ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {
            offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);
          });

          offsetPosition.right = doc.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;
          offsetPosition.bottom = doc.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;

          if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {
            if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {
              // We're within the visible part of the target's scroll parent
              var scrollTop = offsetParent.scrollTop;
              var scrollLeft = offsetParent.scrollLeft;

              // It's position relative to the target's offset parent (absolute positioning when
              // the element is moved to be a child of the target's offset parent).
              next.offset = {
                top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,
                left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left
              };
            }
          }
        })();
      }

      // We could also travel up the DOM and try each containing context, rather than only
      // looking at the body, but we're gonna get diminishing returns.

      this.move(next);

      this.history.unshift(next);

      if (this.history.length > 3) {
        this.history.pop();
      }

      if (flushChanges) {
        flush();
      }

      return true;
    }

    // THE ISSUE
  }, {
    key: 'move',
    value: function move(pos) {
      var _this8 = this;

      if (!(typeof this.element.parentNode !== 'undefined')) {
        return;
      }

      var same = {};

      for (var type in pos) {
        same[type] = {};

        for (var key in pos[type]) {
          var found = false;

          for (var i = 0; i < this.history.length; ++i) {
            var point = this.history[i];
            if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {
              found = true;
              break;
            }
          }

          if (!found) {
            same[type][key] = true;
          }
        }
      }

      var css = { top: '', left: '', right: '', bottom: '' };

      var transcribe = function transcribe(_same, _pos) {
        var hasOptimizations = typeof _this8.options.optimizations !== 'undefined';
        var gpu = hasOptimizations ? _this8.options.optimizations.gpu : null;
        if (gpu !== false) {
          var yPos = undefined,
              xPos = undefined;
          if (_same.top) {
            css.top = 0;
            yPos = _pos.top;
          } else {
            css.bottom = 0;
            yPos = -_pos.bottom;
          }

          if (_same.left) {
            css.left = 0;
            xPos = _pos.left;
          } else {
            css.right = 0;
            xPos = -_pos.right;
          }

          if (window.matchMedia) {
            // HubSpot/tether#207
            var retina = window.matchMedia('only screen and (min-resolution: 1.3dppx)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3)').matches;
            if (!retina) {
              xPos = Math.round(xPos);
              yPos = Math.round(yPos);
            }
          }

          css[transformKey] = 'translateX(' + xPos + 'px) translateY(' + yPos + 'px)';

          if (transformKey !== 'msTransform') {
            // The Z transform will keep this in the GPU (faster, and prevents artifacts),
            // but IE9 doesn't support 3d transforms and will choke.
            css[transformKey] += " translateZ(0)";
          }
        } else {
          if (_same.top) {
            css.top = _pos.top + 'px';
          } else {
            css.bottom = _pos.bottom + 'px';
          }

          if (_same.left) {
            css.left = _pos.left + 'px';
          } else {
            css.right = _pos.right + 'px';
          }
        }
      };

      var moved = false;
      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
        css.position = 'absolute';
        transcribe(same.page, pos.page);
      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
        css.position = 'fixed';
        transcribe(same.viewport, pos.viewport);
      } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {
        (function () {
          css.position = 'absolute';
          var offsetParent = _this8.cache('target-offsetparent', function () {
            return getOffsetParent(_this8.target);
          });

          if (getOffsetParent(_this8.element) !== offsetParent) {
            defer(function () {
              _this8.element.parentNode.removeChild(_this8.element);
              offsetParent.appendChild(_this8.element);
            });
          }

          transcribe(same.offset, pos.offset);
          moved = true;
        })();
      } else {
        css.position = 'absolute';
        transcribe({ top: true, left: true }, pos.page);
      }

      if (!moved) {
        if (this.options.bodyElement) {
          if (this.element.parentNode !== this.options.bodyElement) {
            this.options.bodyElement.appendChild(this.element);
          }
        } else {
          var offsetParentIsBody = true;
          var currentNode = this.element.parentNode;
          while (currentNode && currentNode.nodeType === 1 && currentNode.tagName !== 'BODY') {
            if (getComputedStyle(currentNode).position !== 'static') {
              offsetParentIsBody = false;
              break;
            }

            currentNode = currentNode.parentNode;
          }

          if (!offsetParentIsBody) {
            this.element.parentNode.removeChild(this.element);
            this.element.ownerDocument.body.appendChild(this.element);
          }
        }
      }

      // Any css change will trigger a repaint, so let's avoid one if nothing changed
      var writeCSS = {};
      var write = false;
      for (var key in css) {
        var val = css[key];
        var elVal = this.element.style[key];

        if (elVal !== val) {
          write = true;
          writeCSS[key] = val;
        }
      }

      if (write) {
        defer(function () {
          extend(_this8.element.style, writeCSS);
          _this8.trigger('repositioned');
        });
      }
    }
  }]);

  return TetherClass;
})(Evented);

TetherClass.modules = [];

TetherBase.position = position;

var Tether = extend(TetherClass, TetherBase);
/* globals TetherBase */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _TetherBase$Utils = TetherBase.Utils;
var getBounds = _TetherBase$Utils.getBounds;
var extend = _TetherBase$Utils.extend;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;

var BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];

function getBoundingRect(tether, to) {
  if (to === 'scrollParent') {
    to = tether.scrollParents[0];
  } else if (to === 'window') {
    to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];
  }

  if (to === document) {
    to = to.documentElement;
  }

  if (typeof to.nodeType !== 'undefined') {
    (function () {
      var node = to;
      var size = getBounds(to);
      var pos = size;
      var style = getComputedStyle(to);

      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];

      // Account any parent Frames scroll offset
      if (node.ownerDocument !== document) {
        var win = node.ownerDocument.defaultView;
        to[0] += win.pageXOffset;
        to[1] += win.pageYOffset;
        to[2] += win.pageXOffset;
        to[3] += win.pageYOffset;
      }

      BOUNDS_FORMAT.forEach(function (side, i) {
        side = side[0].toUpperCase() + side.substr(1);
        if (side === 'Top' || side === 'Left') {
          to[i] += parseFloat(style['border' + side + 'Width']);
        } else {
          to[i] -= parseFloat(style['border' + side + 'Width']);
        }
      });
    })();
  }

  return to;
}

TetherBase.modules.push({
  position: function position(_ref) {
    var _this = this;

    var top = _ref.top;
    var left = _ref.left;
    var targetAttachment = _ref.targetAttachment;

    if (!this.options.constraints) {
      return true;
    }

    var _cache = this.cache('element-bounds', function () {
      return getBounds(_this.element);
    });

    var height = _cache.height;
    var width = _cache.width;

    if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
      var _lastSize = this.lastSize;

      // Handle the item getting hidden as a result of our positioning without glitching
      // the classes in and out
      width = _lastSize.width;
      height = _lastSize.height;
    }

    var targetSize = this.cache('target-bounds', function () {
      return _this.getTargetBounds();
    });

    var targetHeight = targetSize.height;
    var targetWidth = targetSize.width;

    var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];

    this.options.constraints.forEach(function (constraint) {
      var outOfBoundsClass = constraint.outOfBoundsClass;
      var pinnedClass = constraint.pinnedClass;

      if (outOfBoundsClass) {
        allClasses.push(outOfBoundsClass);
      }
      if (pinnedClass) {
        allClasses.push(pinnedClass);
      }
    });

    allClasses.forEach(function (cls) {
      ['left', 'top', 'right', 'bottom'].forEach(function (side) {
        allClasses.push(cls + '-' + side);
      });
    });

    var addClasses = [];

    var tAttachment = extend({}, targetAttachment);
    var eAttachment = extend({}, this.attachment);

    this.options.constraints.forEach(function (constraint) {
      var to = constraint.to;
      var attachment = constraint.attachment;
      var pin = constraint.pin;

      if (typeof attachment === 'undefined') {
        attachment = '';
      }

      var changeAttachX = undefined,
          changeAttachY = undefined;
      if (attachment.indexOf(' ') >= 0) {
        var _attachment$split = attachment.split(' ');

        var _attachment$split2 = _slicedToArray(_attachment$split, 2);

        changeAttachY = _attachment$split2[0];
        changeAttachX = _attachment$split2[1];
      } else {
        changeAttachX = changeAttachY = attachment;
      }

      var bounds = getBoundingRect(_this, to);

      if (changeAttachY === 'target' || changeAttachY === 'both') {
        if (top < bounds[1] && tAttachment.top === 'top') {
          top += targetHeight;
          tAttachment.top = 'bottom';
        }

        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
          top -= targetHeight;
          tAttachment.top = 'top';
        }
      }

      if (changeAttachY === 'together') {
        if (tAttachment.top === 'top') {
          if (eAttachment.top === 'bottom' && top < bounds[1]) {
            top += targetHeight;
            tAttachment.top = 'bottom';

            top += height;
            eAttachment.top = 'top';
          } else if (eAttachment.top === 'top' && top + height > bounds[3] && top - (height - targetHeight) >= bounds[1]) {
            top -= height - targetHeight;
            tAttachment.top = 'bottom';

            eAttachment.top = 'bottom';
          }
        }

        if (tAttachment.top === 'bottom') {
          if (eAttachment.top === 'top' && top + height > bounds[3]) {
            top -= targetHeight;
            tAttachment.top = 'top';

            top -= height;
            eAttachment.top = 'bottom';
          } else if (eAttachment.top === 'bottom' && top < bounds[1] && top + (height * 2 - targetHeight) <= bounds[3]) {
            top += height - targetHeight;
            tAttachment.top = 'top';

            eAttachment.top = 'top';
          }
        }

        if (tAttachment.top === 'middle') {
          if (top + height > bounds[3] && eAttachment.top === 'top') {
            top -= height;
            eAttachment.top = 'bottom';
          } else if (top < bounds[1] && eAttachment.top === 'bottom') {
            top += height;
            eAttachment.top = 'top';
          }
        }
      }

      if (changeAttachX === 'target' || changeAttachX === 'both') {
        if (left < bounds[0] && tAttachment.left === 'left') {
          left += targetWidth;
          tAttachment.left = 'right';
        }

        if (left + width > bounds[2] && tAttachment.left === 'right') {
          left -= targetWidth;
          tAttachment.left = 'left';
        }
      }

      if (changeAttachX === 'together') {
        if (left < bounds[0] && tAttachment.left === 'left') {
          if (eAttachment.left === 'right') {
            left += targetWidth;
            tAttachment.left = 'right';

            left += width;
            eAttachment.left = 'left';
          } else if (eAttachment.left === 'left') {
            left += targetWidth;
            tAttachment.left = 'right';

            left -= width;
            eAttachment.left = 'right';
          }
        } else if (left + width > bounds[2] && tAttachment.left === 'right') {
          if (eAttachment.left === 'left') {
            left -= targetWidth;
            tAttachment.left = 'left';

            left -= width;
            eAttachment.left = 'right';
          } else if (eAttachment.left === 'right') {
            left -= targetWidth;
            tAttachment.left = 'left';

            left += width;
            eAttachment.left = 'left';
          }
        } else if (tAttachment.left === 'center') {
          if (left + width > bounds[2] && eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          } else if (left < bounds[0] && eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          }
        }
      }

      if (changeAttachY === 'element' || changeAttachY === 'both') {
        if (top < bounds[1] && eAttachment.top === 'bottom') {
          top += height;
          eAttachment.top = 'top';
        }

        if (top + height > bounds[3] && eAttachment.top === 'top') {
          top -= height;
          eAttachment.top = 'bottom';
        }
      }

      if (changeAttachX === 'element' || changeAttachX === 'both') {
        if (left < bounds[0]) {
          if (eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          } else if (eAttachment.left === 'center') {
            left += width / 2;
            eAttachment.left = 'left';
          }
        }

        if (left + width > bounds[2]) {
          if (eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          } else if (eAttachment.left === 'center') {
            left -= width / 2;
            eAttachment.left = 'right';
          }
        }
      }

      if (typeof pin === 'string') {
        pin = pin.split(',').map(function (p) {
          return p.trim();
        });
      } else if (pin === true) {
        pin = ['top', 'left', 'right', 'bottom'];
      }

      pin = pin || [];

      var pinned = [];
      var oob = [];

      if (top < bounds[1]) {
        if (pin.indexOf('top') >= 0) {
          top = bounds[1];
          pinned.push('top');
        } else {
          oob.push('top');
        }
      }

      if (top + height > bounds[3]) {
        if (pin.indexOf('bottom') >= 0) {
          top = bounds[3] - height;
          pinned.push('bottom');
        } else {
          oob.push('bottom');
        }
      }

      if (left < bounds[0]) {
        if (pin.indexOf('left') >= 0) {
          left = bounds[0];
          pinned.push('left');
        } else {
          oob.push('left');
        }
      }

      if (left + width > bounds[2]) {
        if (pin.indexOf('right') >= 0) {
          left = bounds[2] - width;
          pinned.push('right');
        } else {
          oob.push('right');
        }
      }

      if (pinned.length) {
        (function () {
          var pinnedClass = undefined;
          if (typeof _this.options.pinnedClass !== 'undefined') {
            pinnedClass = _this.options.pinnedClass;
          } else {
            pinnedClass = _this.getClass('pinned');
          }

          addClasses.push(pinnedClass);
          pinned.forEach(function (side) {
            addClasses.push(pinnedClass + '-' + side);
          });
        })();
      }

      if (oob.length) {
        (function () {
          var oobClass = undefined;
          if (typeof _this.options.outOfBoundsClass !== 'undefined') {
            oobClass = _this.options.outOfBoundsClass;
          } else {
            oobClass = _this.getClass('out-of-bounds');
          }

          addClasses.push(oobClass);
          oob.forEach(function (side) {
            addClasses.push(oobClass + '-' + side);
          });
        })();
      }

      if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {
        eAttachment.left = tAttachment.left = false;
      }
      if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {
        eAttachment.top = tAttachment.top = false;
      }

      if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {
        _this.updateAttachClasses(eAttachment, tAttachment);
        _this.trigger('update', {
          attachment: eAttachment,
          targetAttachment: tAttachment
        });
      }
    });

    defer(function () {
      if (!(_this.options.addTargetClasses === false)) {
        updateClasses(_this.target, addClasses, allClasses);
      }
      updateClasses(_this.element, addClasses, allClasses);
    });

    return { top: top, left: left };
  }
});
/* globals TetherBase */

'use strict';

var _TetherBase$Utils = TetherBase.Utils;
var getBounds = _TetherBase$Utils.getBounds;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;

TetherBase.modules.push({
  position: function position(_ref) {
    var _this = this;

    var top = _ref.top;
    var left = _ref.left;

    var _cache = this.cache('element-bounds', function () {
      return getBounds(_this.element);
    });

    var height = _cache.height;
    var width = _cache.width;

    var targetPos = this.getTargetBounds();

    var bottom = top + height;
    var right = left + width;

    var abutted = [];
    if (top <= targetPos.bottom && bottom >= targetPos.top) {
      ['left', 'right'].forEach(function (side) {
        var targetPosSide = targetPos[side];
        if (targetPosSide === left || targetPosSide === right) {
          abutted.push(side);
        }
      });
    }

    if (left <= targetPos.right && right >= targetPos.left) {
      ['top', 'bottom'].forEach(function (side) {
        var targetPosSide = targetPos[side];
        if (targetPosSide === top || targetPosSide === bottom) {
          abutted.push(side);
        }
      });
    }

    var allClasses = [];
    var addClasses = [];

    var sides = ['left', 'top', 'right', 'bottom'];
    allClasses.push(this.getClass('abutted'));
    sides.forEach(function (side) {
      allClasses.push(_this.getClass('abutted') + '-' + side);
    });

    if (abutted.length) {
      addClasses.push(this.getClass('abutted'));
    }

    abutted.forEach(function (side) {
      addClasses.push(_this.getClass('abutted') + '-' + side);
    });

    defer(function () {
      if (!(_this.options.addTargetClasses === false)) {
        updateClasses(_this.target, addClasses, allClasses);
      }
      updateClasses(_this.element, addClasses, allClasses);
    });

    return true;
  }
});
/* globals TetherBase */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

TetherBase.modules.push({
  position: function position(_ref) {
    var top = _ref.top;
    var left = _ref.left;

    if (!this.options.shift) {
      return;
    }

    var shift = this.options.shift;
    if (typeof this.options.shift === 'function') {
      shift = this.options.shift.call(this, { top: top, left: left });
    }

    var shiftTop = undefined,
        shiftLeft = undefined;
    if (typeof shift === 'string') {
      shift = shift.split(' ');
      shift[1] = shift[1] || shift[0];

      var _shift = shift;

      var _shift2 = _slicedToArray(_shift, 2);

      shiftTop = _shift2[0];
      shiftLeft = _shift2[1];

      shiftTop = parseFloat(shiftTop, 10);
      shiftLeft = parseFloat(shiftLeft, 10);
    } else {
      shiftTop = shift.top;
      shiftLeft = shift.left;
    }

    top += shiftTop;
    left += shiftLeft;

    return { top: top, left: left };
  }
});
return Tether;

}));


/***/ }),
/* 12 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 13 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var CaliforniaApp_1 = __webpack_require__(3);
CaliforniaApp_1.CaliforniaApp.CaliforniaAppInstance = new CaliforniaApp_1.CaliforniaApp();
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
        value: function value(predicate) {
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            var len = o.length >>> 0;
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }
            var thisArg = arguments[1];
            var k = 0;
            while (k < len) {
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return kValue;
                }
                k++;
            }
            return undefined;
        }
    });
}
if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
        value: function value(predicate) {
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            var len = o.length >>> 0;
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }
            var thisArg = arguments[1];
            var k = 0;
            while (k < len) {
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return k;
                }
                k++;
            }
            return -1;
        }
    });
}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var helpers = __webpack_require__(16);
var currentApp;
var CaliforniaController = function () {
    function CaliforniaController(californiaAppArg) {
        var _this = this;
        this.beforeSendAjax = function (jqXHR, settings) {
            if (currentApp.isAjaxRequestRunning === true) {
                console.log("ignored request (ajax call still in progress)");
                return false;
            }
            currentApp.isAjaxRequestRunning = true;
            jqXHR.done(function (xhr) {
                currentApp.isAjaxRequestRunning = false;
            }).fail(function (xhr) {
                currentApp.isAjaxRequestRunning = false;
                currentApp.projector.scheduleRender();
            });
        };
        this.LogoutAction = function () {
            return helpers.Action("/california/Logout", "post", null, _this.beforeSendAjax);
        };
        this.IndexAction = function (id, token) {
            return helpers.Action("/california/Index" + encodeURIComponent(id) + "?token=" + encodeURIComponent(token), "get", null, _this.beforeSendAjax);
        };
        this.DeleteLayoutStyleInteractionJson = function (layoutStyleInteractionId) {
            return helpers.Json("/california/DeleteLayoutStyleInteraction?layoutStyleInteractionId=" + layoutStyleInteractionId, "post", null, _this.beforeSendAjax);
        };
        this.DeleteStyleValueInteractionJson = function (layoutStyleInteractionId, styleValueId) {
            return helpers.Json("/california/DeleteStyleValueInteraction?layoutStyleInteractionId=" + layoutStyleInteractionId + "&styleValueId=" + styleValueId, "post", null, _this.beforeSendAjax);
        };
        this.CreateLayoutStyleInteractionForLayoutAtomJson = function (layoutAtomId) {
            return helpers.Json("/california/CreateLayoutStyleInteractionForLayoutAtom?layoutAtomId=" + layoutAtomId, "post", null, _this.beforeSendAjax);
        };
        this.pubAction = function (view, id) {
            return helpers.Action("/california/pub" + encodeURIComponent(id) + "?view=" + encodeURIComponent(view), "get", null, _this.beforeSendAjax);
        };
        this.StaticCssAction = function (id) {
            return helpers.Action("/california/StaticCss" + encodeURIComponent(id), "get", null, _this.beforeSendAjax);
        };
        this.StaticJsAction = function (id) {
            return helpers.Action("/california/StaticJs" + encodeURIComponent(id), "get", null, _this.beforeSendAjax);
        };
        this.PublishAction = function (californiaProjectId, view) {
            return helpers.Action("/california/Publish?californiaProjectId=" + californiaProjectId + "&view=" + encodeURIComponent(view), "post", null, _this.beforeSendAjax);
        };
        this.InitialClientDataJson = function (jsTimeString) {
            return helpers.Json("/california/InitialClientData?jsTimeString=" + encodeURIComponent(jsTimeString), "post", null, _this.beforeSendAjax);
        };
        this.SetSpecialLayoutBoxTypeJson = function (layoutBoxId, specialLayoutBoxType) {
            return helpers.Json("/california/SetSpecialLayoutBoxType?layoutBoxId=" + layoutBoxId + "&specialLayoutBoxType=" + specialLayoutBoxType, "post", null, _this.beforeSendAjax);
        };
        this.DeleteStyleQuantumJson = function (styleQuantumId) {
            return helpers.Json("/california/DeleteStyleQuantum?styleQuantumId=" + styleQuantumId, "post", null, _this.beforeSendAjax);
        };
        this.DeleteLayoutJson = function (layoutBaseId, isOnlyBelow) {
            return helpers.Json("/california/DeleteLayout?layoutBaseId=" + layoutBaseId + "&isOnlyBelow=" + isOnlyBelow, "post", null, _this.beforeSendAjax);
        };
        this.SetStyleMoleculeAsReferenceStyleJson = function (styleMoleculeId) {
            return helpers.Json("/california/SetStyleMoleculeAsReferenceStyle?styleMoleculeId=" + styleMoleculeId, "post", null, _this.beforeSendAjax);
        };
        this.SetStyleMoleculeReferenceJson = function (styleMoleculeId, referenceStyleMoleculeId) {
            return helpers.Json("/california/SetStyleMoleculeReference?styleMoleculeId=" + styleMoleculeId + "&referenceStyleMoleculeId=" + referenceStyleMoleculeId, "post", null, _this.beforeSendAjax);
        };
        this.SyncStyleMoleculeToReferenceStyleJson = function (styleMoleculeId) {
            return helpers.Json("/california/SyncStyleMoleculeToReferenceStyle?styleMoleculeId=" + styleMoleculeId, "post", null, _this.beforeSendAjax);
        };
        this.SyncStyleMoleculeFromReferenceStyleJson = function (styleMoleculeId) {
            return helpers.Json("/california/SyncStyleMoleculeFromReferenceStyle?styleMoleculeId=" + styleMoleculeId, "post", null, _this.beforeSendAjax);
        };
        this.SyncLayoutStylesImitatingReferenceLayoutJson = function (targetLayoutMoleculeId, referenceLayoutMoleculeId) {
            return helpers.Json("/california/SyncLayoutStylesImitatingReferenceLayout?targetLayoutMoleculeId=" + targetLayoutMoleculeId + "&referenceLayoutMoleculeId=" + referenceLayoutMoleculeId, "post", null, _this.beforeSendAjax);
        };
        this.SetLayoutBoxCountForRowOrBoxJson = function (layoutRowId, boxStyleMoleculeId, targetBoxCount, isFitWidth) {
            return helpers.Json("/california/SetLayoutBoxCountForRowOrBox?layoutRowId=" + layoutRowId + "&boxStyleMoleculeId=" + boxStyleMoleculeId + "&targetBoxCount=" + targetBoxCount + "&isFitWidth=" + isFitWidth, "post", null, _this.beforeSendAjax);
        };
        this.CreateStyleValueForAtomJson = function (styleAtomId, cssProperty) {
            return helpers.Json("/california/CreateStyleValueForAtom?styleAtomId=" + styleAtomId + "&cssProperty=" + encodeURIComponent(cssProperty), "post", null, _this.beforeSendAjax);
        };
        this.CreateCaliforniaViewJson = function (californiaProjectId, californiaViewName) {
            return helpers.Json("/california/CreateCaliforniaView?californiaProjectId=" + californiaProjectId + "&californiaViewName=" + encodeURIComponent(californiaViewName), "post", null, _this.beforeSendAjax);
        };
        this.CreateCaliforniaViewFromReferenceViewJson = function (californiaProjectId, californiaViewName, referenceCaliforniaViewId) {
            return helpers.Json("/california/CreateCaliforniaViewFromReferenceView?californiaProjectId=" + californiaProjectId + "&californiaViewName=" + encodeURIComponent(californiaViewName) + "&referenceCaliforniaViewId=" + referenceCaliforniaViewId, "post", null, _this.beforeSendAjax);
        };
        this.DeleteCaliforniaViewJson = function (californiaViewId) {
            return helpers.Json("/california/DeleteCaliforniaView?californiaViewId=" + californiaViewId, "post", null, _this.beforeSendAjax);
        };
        this.CreateStyleValueInteractionJson = function (layoutStyleInteractionId, styleValueId, cssValue) {
            return helpers.Json("/california/CreateStyleValueInteraction?layoutStyleInteractionId=" + layoutStyleInteractionId + "&styleValueId=" + styleValueId + "&cssValue=" + encodeURIComponent(cssValue), "post", null, _this.beforeSendAjax);
        };
        this.CreateStyleAtomForMoleculeJson = function (styleMoleculeId, styleAtomType, responsiveDeviceId, stateModifier) {
            return helpers.Json("/california/CreateStyleAtomForMolecule?styleMoleculeId=" + styleMoleculeId + "&styleAtomType=" + styleAtomType + "&responsiveDeviceId=" + responsiveDeviceId + "&stateModifier=" + encodeURIComponent(stateModifier), "post", null, _this.beforeSendAjax);
        };
        this.DeleteStyleAtomJson = function (styleAtomId) {
            return helpers.Json("/california/DeleteStyleAtom?styleAtomId=" + styleAtomId, "post", null, _this.beforeSendAjax);
        };
        this.ApplyStyleQuantumToAtomJson = function (styleAtomId, styleQuantumId) {
            return helpers.Json("/california/ApplyStyleQuantumToAtom?styleAtomId=" + styleAtomId + "&styleQuantumId=" + styleQuantumId, "post", null, _this.beforeSendAjax);
        };
        this.CreateStyleQuantumJson = function (californiaProjectId, quantumName, cssProperty, cssValue) {
            return helpers.Json("/california/CreateStyleQuantum?californiaProjectId=" + californiaProjectId + "&quantumName=" + encodeURIComponent(quantumName) + "&cssProperty=" + encodeURIComponent(cssProperty) + "&cssValue=" + encodeURIComponent(cssValue), "post", null, _this.beforeSendAjax);
        };
        this.UpdateTextContentAtomJson = function (contentAtomId, updatedTextContent) {
            return helpers.Json("/california/UpdateTextContentAtom?contentAtomId=" + contentAtomId + "&updatedTextContent=" + encodeURIComponent(updatedTextContent), "post", null, _this.beforeSendAjax);
        };
        this.UpdateStyleQuantumJson = function (styleQuantumId, cssValue) {
            return helpers.Json("/california/UpdateStyleQuantum?styleQuantumId=" + styleQuantumId + "&cssValue=" + encodeURIComponent(cssValue), "post", null, _this.beforeSendAjax);
        };
        this.UpdateStyleValueJson = function (styleValueId, cssValue) {
            return helpers.Json("/california/UpdateStyleValue?styleValueId=" + styleValueId + "&cssValue=" + encodeURIComponent(cssValue), "post", null, _this.beforeSendAjax);
        };
        this.UpdateUserDefinedCssForProjectJson = function (californiaProjectId, cssValue) {
            return helpers.Json("/california/UpdateUserDefinedCssForProject?californiaProjectId=" + californiaProjectId + "&cssValue=" + encodeURIComponent(cssValue), "post", null, _this.beforeSendAjax);
        };
        this.UpdateUserDefinedCssForViewJson = function (californiaViewId, cssValue) {
            return helpers.Json("/california/UpdateUserDefinedCssForView?californiaViewId=" + californiaViewId + "&cssValue=" + encodeURIComponent(cssValue), "post", null, _this.beforeSendAjax);
        };
        this.DeleteStyleValueJson = function (styleValueId) {
            return helpers.Json("/california/DeleteStyleValue?styleValueId=" + styleValueId, "post", null, _this.beforeSendAjax);
        };
        this.DuplicateStyleQuantumJson = function (styleQuantumId) {
            return helpers.Json("/california/DuplicateStyleQuantum?styleQuantumId=" + styleQuantumId, "post", null, _this.beforeSendAjax);
        };
        this.CreateLayoutAtomForBoxJson = function (targetLayoutBoxId, referenceLayoutAtomId) {
            return helpers.Json("/california/CreateLayoutAtomForBox?targetLayoutBoxId=" + targetLayoutBoxId + "&referenceLayoutAtomId=" + referenceLayoutAtomId, "post", null, _this.beforeSendAjax);
        };
        this.CreateLayoutBoxForBoxOrRowJson = function (targetLayoutBoxOrRowId, referenceLayoutBoxId) {
            return helpers.Json("/california/CreateLayoutBoxForBoxOrRow?targetLayoutBoxOrRowId=" + targetLayoutBoxOrRowId + "&referenceLayoutBoxId=" + referenceLayoutBoxId, "post", null, _this.beforeSendAjax);
        };
        this.CreateLayoutBoxForAtomInPlaceJson = function (targetLayoutAtomId, referenceLayoutBoxId) {
            return helpers.Json("/california/CreateLayoutBoxForAtomInPlace?targetLayoutAtomId=" + targetLayoutAtomId + "&referenceLayoutBoxId=" + referenceLayoutBoxId, "post", null, _this.beforeSendAjax);
        };
        this.CreateLayoutRowForViewJson = function (targetCaliforniaViewId, referenceLayoutRowId) {
            return helpers.Json("/california/CreateLayoutRowForView?targetCaliforniaViewId=" + targetCaliforniaViewId + "&referenceLayoutRowId=" + referenceLayoutRowId, "post", null, _this.beforeSendAjax);
        };
        this.SetLayoutRowOrBoxAsInstanceableJson = function (californiaProjectId, layoutRowOrBoxId) {
            return helpers.Json("/california/SetLayoutRowOrBoxAsInstanceable?californiaProjectId=" + californiaProjectId + "&layoutRowOrBoxId=" + layoutRowOrBoxId, "post", null, _this.beforeSendAjax);
        };
        this.MoveStyleAtomToResponsiveDeviceJson = function (styleAtomId, targetResponsiveDeviceId) {
            return helpers.Json("/california/MoveStyleAtomToResponsiveDevice?styleAtomId=" + styleAtomId + "&targetResponsiveDeviceId=" + targetResponsiveDeviceId, "post", null, _this.beforeSendAjax);
        };
        this.RefreshExternalApisAction = function () {
            return helpers.Action("/california/RefreshExternalApis", "get", null, _this.beforeSendAjax);
        };
        this.MoveLayoutMoleculeIntoLayoutMoleculeJson = function (movedLayoutMoleculeId, targetContainerLayoutMoleculeId) {
            return helpers.Json("/california/MoveLayoutMoleculeIntoLayoutMolecule?movedLayoutMoleculeId=" + movedLayoutMoleculeId + "&targetContainerLayoutMoleculeId=" + targetContainerLayoutMoleculeId, "post", null, _this.beforeSendAjax);
        };
        this.MoveLayoutMoleculeNextToLayoutMoleculeJson = function (movedLayoutMoleculeId, targetNeighborLayoutMoleculeId, isMoveBefore) {
            return helpers.Json("/california/MoveLayoutMoleculeNextToLayoutMolecule?movedLayoutMoleculeId=" + movedLayoutMoleculeId + "&targetNeighborLayoutMoleculeId=" + targetNeighborLayoutMoleculeId + "&isMoveBefore=" + isMoveBefore, "post", null, _this.beforeSendAjax);
        };
        currentApp = californiaAppArg;
    }
    return CaliforniaController;
}();
exports.CaliforniaController = CaliforniaController;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {

Object.defineProperty(exports, "__esModule", { value: true });
function Json(url, method, data, beforeSendCallback) {
    var request;
    if (data !== null) {
        request = jQuery.ajax(url, { method: method, data: JSON.stringify(data), contentType: "application/json; charset=utf-8", beforeSend: beforeSendCallback });
    } else {
        request = jQuery.ajax(url, { method: method, beforeSend: beforeSendCallback });
    }
    request.fail(function (data) {
        if (data.responseJSON !== undefined && data.responseJSON.StatusText !== undefined) {
            console.log(data.responseJSON.StatusText);
        }
    });
    return request;
}
exports.Json = Json;
;
function Action(url, method, data, beforeSendCallback) {
    var request;
    if (data !== null) {
        request = jQuery.ajax(url, { method: method, data: JSON.stringify(data), contentType: "application/json; charset=utf-8", beforeSend: beforeSendCallback });
    } else {
        request = jQuery.ajax(url, { method: method, beforeSend: beforeSendCallback });
    }
    request.fail(function (data) {
        if (data.statusText !== undefined) {
            console.log(data.statusText);
        }
    });
    return request;
}
exports.Action = Action;
;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var CaliforniaEvent;
(function (CaliforniaEvent) {
    CaliforniaEvent[CaliforniaEvent["ReadInitialClientData"] = 0] = "ReadInitialClientData";
    CaliforniaEvent[CaliforniaEvent["CreateStore"] = 1] = "CreateStore";
    CaliforniaEvent[CaliforniaEvent["ReadStore"] = 2] = "ReadStore";
    CaliforniaEvent[CaliforniaEvent["CreateStyleQuantum"] = 3] = "CreateStyleQuantum";
    CaliforniaEvent[CaliforniaEvent["DuplicateStyleQuantum"] = 4] = "DuplicateStyleQuantum";
    CaliforniaEvent[CaliforniaEvent["DeleteStyleQuantum"] = 5] = "DeleteStyleQuantum";
    CaliforniaEvent[CaliforniaEvent["DeleteStyleValue"] = 6] = "DeleteStyleValue";
    CaliforniaEvent[CaliforniaEvent["CreateStyleValueForAtom"] = 7] = "CreateStyleValueForAtom";
    CaliforniaEvent[CaliforniaEvent["UpdateStyleValue"] = 8] = "UpdateStyleValue";
    CaliforniaEvent[CaliforniaEvent["UpdateStyleQuantum"] = 9] = "UpdateStyleQuantum";
    CaliforniaEvent[CaliforniaEvent["ApplyStyleQuantumToAtom"] = 10] = "ApplyStyleQuantumToAtom";
    CaliforniaEvent[CaliforniaEvent["CreateStyleAtomForMolecule"] = 11] = "CreateStyleAtomForMolecule";
    CaliforniaEvent[CaliforniaEvent["DeleteStyleAtom"] = 12] = "DeleteStyleAtom";
    CaliforniaEvent[CaliforniaEvent["UpdateContentAtom"] = 13] = "UpdateContentAtom";
    CaliforniaEvent[CaliforniaEvent["CreateLayoutAtomForBox"] = 14] = "CreateLayoutAtomForBox";
    CaliforniaEvent[CaliforniaEvent["CreateLayoutRowForView"] = 15] = "CreateLayoutRowForView";
    CaliforniaEvent[CaliforniaEvent["DeleteLayout"] = 16] = "DeleteLayout";
    CaliforniaEvent[CaliforniaEvent["SetBoxCount"] = 17] = "SetBoxCount";
    CaliforniaEvent[CaliforniaEvent["CreateLayoutBoxForBoxOrRow"] = 18] = "CreateLayoutBoxForBoxOrRow";
    CaliforniaEvent[CaliforniaEvent["MoveStyleAtomToResponsiveDevice"] = 19] = "MoveStyleAtomToResponsiveDevice";
    CaliforniaEvent[CaliforniaEvent["SetStyleMoleculeReference"] = 20] = "SetStyleMoleculeReference";
    CaliforniaEvent[CaliforniaEvent["SetStyleMoleculeAsReference"] = 21] = "SetStyleMoleculeAsReference";
    CaliforniaEvent[CaliforniaEvent["SetLayoutMoleculeAsInstanceable"] = 22] = "SetLayoutMoleculeAsInstanceable";
    CaliforniaEvent[CaliforniaEvent["SyncStyleMoleculeToReference"] = 23] = "SyncStyleMoleculeToReference";
    CaliforniaEvent[CaliforniaEvent["SyncStyleMoleculeFromReference"] = 24] = "SyncStyleMoleculeFromReference";
    CaliforniaEvent[CaliforniaEvent["MoveLayoutMoleculeIntoLayoutMolecule"] = 25] = "MoveLayoutMoleculeIntoLayoutMolecule";
    CaliforniaEvent[CaliforniaEvent["MoveLayoutMoleculeNextToLayoutMolecule"] = 26] = "MoveLayoutMoleculeNextToLayoutMolecule";
    CaliforniaEvent[CaliforniaEvent["Publish"] = 27] = "Publish";
    CaliforniaEvent[CaliforniaEvent["View"] = 28] = "View";
    CaliforniaEvent[CaliforniaEvent["CreateCaliforniaView"] = 29] = "CreateCaliforniaView";
    CaliforniaEvent[CaliforniaEvent["DeleteCaliforniaView"] = 30] = "DeleteCaliforniaView";
    CaliforniaEvent[CaliforniaEvent["CreateLayoutStyleInteraction"] = 31] = "CreateLayoutStyleInteraction";
    CaliforniaEvent[CaliforniaEvent["CreateStyleValueInteraction"] = 32] = "CreateStyleValueInteraction";
    CaliforniaEvent[CaliforniaEvent["DeleteLayoutStyleInteraction"] = 33] = "DeleteLayoutStyleInteraction";
    CaliforniaEvent[CaliforniaEvent["CreateLayoutBoxForAtomInPlace"] = 34] = "CreateLayoutBoxForAtomInPlace";
    CaliforniaEvent[CaliforniaEvent["SyncLayoutStylesImitatingReference"] = 35] = "SyncLayoutStylesImitatingReference";
    CaliforniaEvent[CaliforniaEvent["CreateCaliforniaViewFromReferenceView"] = 36] = "CreateCaliforniaViewFromReferenceView";
    CaliforniaEvent[CaliforniaEvent["DeleteStyleValueInteraction"] = 37] = "DeleteStyleValueInteraction";
    CaliforniaEvent[CaliforniaEvent["SetSpecialLayoutBoxType"] = 38] = "SetSpecialLayoutBoxType";
    CaliforniaEvent[CaliforniaEvent["ViewJs"] = 39] = "ViewJs";
    CaliforniaEvent[CaliforniaEvent["ViewCss"] = 40] = "ViewCss";
    CaliforniaEvent[CaliforniaEvent["UpdateUserDefinedCssForProject"] = 41] = "UpdateUserDefinedCssForProject";
    CaliforniaEvent[CaliforniaEvent["UpdateUserDefinedCssForView"] = 42] = "UpdateUserDefinedCssForView";
})(CaliforniaEvent = exports.CaliforniaEvent || (exports.CaliforniaEvent = {}));

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var CaliforniaProject = function () {
    function CaliforniaProject() {}
    return CaliforniaProject;
}();
exports.CaliforniaProject = CaliforniaProject;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var CaliforniaUserDefaults = function () {
    function CaliforniaUserDefaults() {}
    return CaliforniaUserDefaults;
}();
exports.CaliforniaUserDefaults = CaliforniaUserDefaults;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var CaliforniaClientViewModel = function () {
    function CaliforniaClientViewModel() {}
    return CaliforniaClientViewModel;
}();
exports.CaliforniaClientViewModel = CaliforniaClientViewModel;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var StyleMolecule = function () {
    function StyleMolecule() {}
    return StyleMolecule;
}();
exports.StyleMolecule = StyleMolecule;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var StyleQuantum = function () {
    function StyleQuantum() {}
    return StyleQuantum;
}();
exports.StyleQuantum = StyleQuantum;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var StyleAtom = function () {
    function StyleAtom() {}
    return StyleAtom;
}();
exports.StyleAtom = StyleAtom;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var StyleAtomType;
(function (StyleAtomType) {
    StyleAtomType[StyleAtomType["Generic"] = 0] = "Generic";
    StyleAtomType[StyleAtomType["Font"] = 1] = "Font";
    StyleAtomType[StyleAtomType["Typography"] = 2] = "Typography";
    StyleAtomType[StyleAtomType["Divider"] = 3] = "Divider";
    StyleAtomType[StyleAtomType["Background"] = 4] = "Background";
    StyleAtomType[StyleAtomType["Spacing"] = 5] = "Spacing";
    StyleAtomType[StyleAtomType["Picture"] = 6] = "Picture";
    StyleAtomType[StyleAtomType["Grid"] = 7] = "Grid";
    StyleAtomType[StyleAtomType["Row"] = 8] = "Row";
    StyleAtomType[StyleAtomType["Navbar"] = 9] = "Navbar";
    StyleAtomType[StyleAtomType["List"] = 10] = "List";
    StyleAtomType[StyleAtomType["Box"] = 11] = "Box";
})(StyleAtomType = exports.StyleAtomType || (exports.StyleAtomType = {}));

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var StyleValue = function () {
    function StyleValue() {}
    return StyleValue;
}();
exports.StyleValue = StyleValue;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var ResponsiveDevice = function () {
    function ResponsiveDevice() {}
    return ResponsiveDevice;
}();
exports.ResponsiveDevice = ResponsiveDevice;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var CaliforniaView = function () {
    function CaliforniaView() {}
    return CaliforniaView;
}();
exports.CaliforniaView = CaliforniaView;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var LayoutRow = function () {
    function LayoutRow() {}
    return LayoutRow;
}();
exports.LayoutRow = LayoutRow;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var LayoutBox = function () {
    function LayoutBox() {}
    return LayoutBox;
}();
exports.LayoutBox = LayoutBox;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var LayoutAtom = function () {
    function LayoutAtom() {}
    return LayoutAtom;
}();
exports.LayoutAtom = LayoutAtom;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var StyleMoleculeAtomMapping = function () {
    function StyleMoleculeAtomMapping() {}
    return StyleMoleculeAtomMapping;
}();
exports.StyleMoleculeAtomMapping = StyleMoleculeAtomMapping;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var ContentAtom = function () {
    function ContentAtom() {}
    return ContentAtom;
}();
exports.ContentAtom = ContentAtom;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var LayoutBase = function () {
    function LayoutBase() {}
    return LayoutBase;
}();
exports.LayoutBase = LayoutBase;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var LayoutType;
(function (LayoutType) {
    LayoutType[LayoutType["Row"] = 0] = "Row";
    LayoutType[LayoutType["Box"] = 1] = "Box";
    LayoutType[LayoutType["Atom"] = 2] = "Atom";
})(LayoutType = exports.LayoutType || (exports.LayoutType = {}));

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var SpecialLayoutBoxType;
(function (SpecialLayoutBoxType) {
    SpecialLayoutBoxType[SpecialLayoutBoxType["Default"] = 0] = "Default";
    SpecialLayoutBoxType[SpecialLayoutBoxType["CaliforniaViewHolder"] = 1] = "CaliforniaViewHolder";
    SpecialLayoutBoxType[SpecialLayoutBoxType["Navigation"] = 2] = "Navigation";
    SpecialLayoutBoxType[SpecialLayoutBoxType["UnsortedList"] = 3] = "UnsortedList";
    SpecialLayoutBoxType[SpecialLayoutBoxType["SortedList"] = 4] = "SortedList";
    SpecialLayoutBoxType[SpecialLayoutBoxType["ListItem"] = 5] = "ListItem";
    SpecialLayoutBoxType[SpecialLayoutBoxType["RichText"] = 6] = "RichText";
})(SpecialLayoutBoxType = exports.SpecialLayoutBoxType || (exports.SpecialLayoutBoxType = {}));

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var LayoutStyleInteraction = function () {
    function LayoutStyleInteraction() {}
    return LayoutStyleInteraction;
}();
exports.LayoutStyleInteraction = LayoutStyleInteraction;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", { value: true });
var maquette = __webpack_require__(1);
var h = maquette.h;
var CaliforniaApp_1 = __webpack_require__(3);
var PagePreviewVM_1 = __webpack_require__(38);
var CaliforniaGenerated_1 = __webpack_require__(2);
var ClientState_1 = __webpack_require__(4);
var ContentAtomType_1 = __webpack_require__(7);
var currentApp;
var currentPagePreview;
exports.HIGHLIGHT_BACKGROUND_COLOR_STRING = "rgb(233,233,233)";
exports.MANUALLY_HIGHLIGHT_BACKGROUND_COLOR_STRING = "rgb(222,222,222)";
var PagePreview = function () {
    function PagePreview(californiaAppArg) {
        this.dynamicClientGridBreakpoints = [];
        this.virtualStyleIndex = [];
        this.virtualPseudoStyleIndex = [];
        this._visibleLayoutAtomDomNodeReferences = [];
        this._activeViewLayoutAtomDomNodeReferences = {};
        this._visibleLayoutAtomKeys = [];
        this._mostUpperVisibleLayoutAtomId = 0;
        this.renderPreviewArea = function () {
            var previewAreaStyles = {
                "flex": currentApp.state.editViewMode === ClientState_1.EditViewMode.SidebarOnly ? "0 0 1px" : "1 1 777px",
                "display": "flex",
                "flex-flow": "column nowrap",
                "width": "533px",
                "max-width": "100%",
                "height": "100%",
                "overflow": "visible"
            };
            var isRRButtonEnabled = currentApp.state.lastCaliforniaEventData.length > 0;
            return h(
                "div",
                { key: "0", styles: previewAreaStyles },
                currentApp.state.isHideUserInterface ? undefined : currentPagePreview.renderNavigation(),
                currentApp.state.editViewMode === ClientState_1.EditViewMode.SidebarOnly ? undefined : currentPagePreview.renderPagePreviewHolder(),
                currentApp.state.isHideUserInterface ? h(
                    "div",
                    { key: "2", styles: { "position": "absolute", "left": "0", "top": "0", "z-index": CaliforniaApp_1.UI_Z_INDEX.toString(), "display": "flex", "flex-flow": "column nowrap" } },
                    h(
                        "button",
                        { key: "a", onclick: currentPagePreview.previewClickHandler },
                        "\u2026"
                    ),
                    h(
                        "button",
                        { key: "b", onclick: currentApp.propertyBars[0].insertLayoutRowIntoViewClickHandler },
                        "+(R)"
                    ),
                    isRRButtonEnabled ? h(
                        "button",
                        { key: "c", onclick: currentPagePreview.repeatClickHandler, styles: { "flex": "0 0 auto", "width": "auto" } },
                        "RR"
                    ) : h(
                        "button",
                        { disabled: true, key: "c0", onclick: currentPagePreview.repeatClickHandler, styles: { "flex": "0 0 auto", "width": "auto" } },
                        "RR"
                    )
                ) : undefined
            );
        };
        this.renderNavigation = function () {
            var navigationStyles = {
                "flex": "0 0 " + currentApp.navigationHeigthPx + "px",
                "position": "relative",
                "display": "flex",
                "flex-flow": "row nowrap",
                "z-index": "3"
            };
            var loadingIndicatorStyles = {
                "position": "absolute",
                "right": "0px",
                "background-color": "red",
                "color": "white",
                "border": "solid black 1px"
            };
            var navigationButtonStyles = {
                "flex": "0 0 auto"
            };
            var isRRButtonEnabled = currentApp.state.lastCaliforniaEventData.length > 0;
            return h(
                "div",
                { key: "0", styles: navigationStyles },
                currentApp.isAjaxRequestRunning ? h(
                    "p",
                    { key: "z", styles: loadingIndicatorStyles },
                    "Loading..."
                ) : undefined,
                h(
                    "button",
                    { key: "a", onclick: currentPagePreview.previewClickHandler, styles: { "flex": "0 0 auto", "width": "auto" } },
                    "Preview"
                ),
                h(
                    "button",
                    { key: "b", eid: ClientState_1.EditViewMode.PagePreviewOnly.toString(), onclick: currentPagePreview.changeEditModeClickHandler, styles: { "flex": "0 0 auto", "background-color": currentApp.state.editViewMode === ClientState_1.EditViewMode.PagePreviewOnly ? "red" : undefined } },
                    "P"
                ),
                h(
                    "button",
                    { key: "c", eid: ClientState_1.EditViewMode.SidebarOnly.toString(), onclick: currentPagePreview.changeEditModeClickHandler, styles: { "flex": "0 0 auto", "background-color": currentApp.state.editViewMode === ClientState_1.EditViewMode.SidebarOnly ? "red" : undefined } },
                    "S"
                ),
                h(
                    "button",
                    { key: "d", onclick: currentPagePreview.toggleSideBarCount, cid: "1", styles: { "flex": "0 0 auto" } },
                    "x1"
                ),
                h(
                    "button",
                    { key: "e", onclick: currentPagePreview.toggleSideBarCount, cid: "2", styles: { "flex": "0 0 auto" } },
                    "x2"
                ),
                h(
                    "button",
                    { key: "f", onclick: currentPagePreview.toggleSideBarCount, cid: "4", styles: { "flex": "0 0 auto" } },
                    "x4"
                ),
                currentPagePreview.renderResponsiveDeviceSelectors(),
                h(
                    "button",
                    { key: "h", onclick: currentPagePreview.changeSelectionModeClickHandler, styles: { "flex": "0 0 auto", "background-color": currentApp.state.currentSelectionMode === ClientState_1.SelectionMode.Content ? "red" : undefined, "color": currentApp.state.currentSelectionMode === ClientState_1.SelectionMode.Styles ? "red" : undefined } },
                    ClientState_1.SelectionMode[currentApp.state.currentSelectionMode]
                ),
                h(
                    "button",
                    { key: "i", onclick: currentPagePreview.publishClickHandler, styles: { "flex": "0 0 auto", "width": "auto" } },
                    "Save"
                ),
                h(
                    "button",
                    { key: "j", onclick: currentPagePreview.publishAndOpenClickHandler, styles: { "flex": "0 0 auto", "width": "auto" } },
                    "Save&Open"
                ),
                h(
                    "button",
                    { key: "k", onclick: currentPagePreview.refreshClickHandler, styles: { "flex": "0 0 auto", "width": "auto" } },
                    "JAX"
                ),
                isRRButtonEnabled ? h(
                    "button",
                    { key: "l", onclick: currentPagePreview.repeatClickHandler, styles: { "flex": "0 0 auto", "width": "auto" } },
                    "RR"
                ) : h(
                    "button",
                    { disabled: true, key: "l0", onclick: currentPagePreview.repeatClickHandler, styles: { "flex": "0 0 auto", "width": "auto" } },
                    "RR"
                )
            );
        };
        this.toggleSideBarCount = function (evt) {
            var sidebarCount = CaliforniaApp_1.parseIntFromAttribute(evt.target, "cid");
            if (sidebarCount > 0 && sidebarCount <= 4) {
                currentApp.state.visiblePropertyBarMaxCount = sidebarCount;
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
        };
        this.publishClickHandler = function (evt) {
            currentPagePreview.publish(false);
        };
        this.publishAndOpenClickHandler = function (evt) {
            currentPagePreview.publish(true);
        };
        this.publish = function (isOpen) {
            var currentCaliforniaView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (v) {
                return v.CaliforniaViewId == currentPagePreview.viewModel.activeCaliforniaViewId;
            });
            if (isOpen) {
                currentApp.controller.PublishAction(currentApp.clientData.CaliforniaProject.CaliforniaProjectId, currentCaliforniaView.Name).done(function (response) {
                    window.location.assign(window.location.origin + ("/california/pub/" + currentCaliforniaView.Name));
                }).fail(function (req) {
                    console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                });
            } else {
                currentApp.controller.PublishAction(currentApp.clientData.CaliforniaProject.CaliforniaProjectId, currentCaliforniaView.Name);
            }
        };
        this.refreshClickHandler = function (evt) {
            if (!currentApp.state.isJaxOn) {
                var head = document.getElementsByTagName("head")[0],
                    script;
                script = document.createElement("script");
                script.type = "text/x-mathjax-config";
                script.text = "MathJax.Hub.Config({\n" + "  root: \"../third_party/mathjax\",\n" + "  extensions: [\"tex2jax.js\"],\n" + "  jax: [\"input/TeX\", \"output/HTML-CSS\"],\n" + "  tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"pre\",\"code\",\"input\"], processEscapes: true},\n" + "  TeX: { extensions: [\"AMSmath.js\", \"AMSsymbols.js\"], equationNumbers: { autoNumber: \"all\" } }, showProcessingMessages: true, messageStyle:\"normal\",\n" + "  \"HTML-CSS\": { availableFonts: [\"TeX\"], preferredFont: \"TeX\", imageFont: null }\n" + "});";
                head.appendChild(script);
                script = document.createElement("script");
                script.type = "text/javascript";
                script.src = "../third_party/mathjax/MathJax.js";
                script.onload = function () {
                    currentApp.state.isJaxOn = true;
                };
                head.appendChild(script);
            } else {
                MathJax.Hub.Queue(["resetEquationNumbers", MathJax.InputJax.TeX]);
                currentPagePreview.resetEquationNumbersWhenModifying(true);
            }
        };
        this.repeatClickHandler = function (evt) {
            if (currentApp.state.lastCommand === CaliforniaGenerated_1.CaliforniaEvent.CreateLayoutBoxForBoxOrRow) {
                currentApp.controller.CreateLayoutBoxForBoxOrRowJson(currentApp.state.lastCaliforniaEventData[0], currentApp.state.lastCaliforniaEventData[1]).done(function (data) {
                    return currentApp.router.updateData(data);
                });
            } else if (currentApp.state.lastCommand === CaliforniaGenerated_1.CaliforniaEvent.CreateLayoutRowForView) {
                currentApp.controller.CreateLayoutRowForViewJson(currentApp.state.lastCaliforniaEventData[0], currentApp.state.lastCaliforniaEventData[1]).done(function (data) {
                    return currentApp.router.updateData(data);
                });
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                return;
            }
        };
        this.resetEquationNumbersWhenModifying = function (isReprocess) {
            if (currentApp.state.isJaxOn) {
                if (isReprocess) {
                    MathJax.Hub.Queue(["PreProcess", MathJax.Hub]);
                    MathJax.Hub.Queue(["Reprocess", MathJax.Hub]);
                }
            }
        };
        this.previewClickHandler = function (evt) {
            currentApp.state.isHideUserInterface = !currentApp.state.isHideUserInterface;
            currentApp.projector.renderNow();
            currentApp.resizeChangedHandler();
        };
        this.changeEditModeClickHandler = function (evt) {
            var selectedEditViewMode = CaliforniaApp_1.parseIntFromAttribute(evt.target, "eid");
            if (currentApp.state.editViewMode === selectedEditViewMode) {
                if (currentApp.state.editViewMode === ClientState_1.EditViewMode.Default) {
                    return;
                } else {
                    currentApp.state.editViewMode = ClientState_1.EditViewMode.Default;
                    currentApp.projector.renderNow();
                }
            } else {
                currentApp.state.editViewMode = selectedEditViewMode;
            }
            currentApp.resizeChangedHandler();
        };
        this.changeSelectionModeClickHandler = function (evt) {
            currentApp.state.currentSelectionMode = currentApp.state.currentSelectionMode === ClientState_1.SelectionMode.Content ? ClientState_1.SelectionMode.Styles : ClientState_1.SelectionMode.Content;
            currentPagePreview.resetContentAtomEditMode();
        };
        this.renderResponsiveDeviceSelectors = function () {
            var responsiveGroupStyles = {
                "flex": "0 0 auto",
                "display": "flex",
                "flex-flow": "row nowrap"
            };
            return h(
                "div",
                { key: "1", styles: responsiveGroupStyles },
                currentApp.clientData.CaliforniaProject.ResponsiveDevices !== undefined ? currentApp.clientData.CaliforniaProject.ResponsiveDevices.map(function (r) {
                    if (r.WidthThreshold < 0) {
                        return undefined;
                    }
                    var responsiveButtonStyles = {
                        "flex": "0 0 auto",
                        "background-color": r.ResponsiveDeviceId == currentApp.state.overrideResponsiveDeviceId ? "red" : undefined,
                        "color": r.ResponsiveDeviceId == currentApp.state.currentResponsiveDeviceId && currentApp.state.overrideResponsiveDeviceId == 0 ? "red" : undefined
                    };
                    var responsiveDeviceIdString = r.ResponsiveDeviceId.toString();
                    return h(
                        "button",
                        { key: responsiveDeviceIdString, rid: responsiveDeviceIdString, onclick: currentPagePreview.selectResponsiveDeviceClickHandler, styles: responsiveButtonStyles },
                        r.NameShort
                    );
                }) : undefined
            );
        };
        this.selectResponsiveDeviceClickHandler = function (evt) {
            var selectedId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "rid");
            if (currentApp.state.overrideResponsiveDeviceId == selectedId) {
                currentApp.state.overrideResponsiveDeviceId = 0;
            } else {
                currentApp.state.overrideResponsiveDeviceId = selectedId;
            }
            currentPagePreview.updatePagePreviewDimensions();
        };
        this.renderPagePreviewHolder = function () {
            var pagePreviewHolderStyles = {
                "flex": currentApp.state.isHideUserInterface ? "1 1 auto" : "1 1 100%",
                "margin": currentApp.state.isHideUserInterface || currentApp.state.editViewMode === ClientState_1.EditViewMode.PagePreviewOnly ? "0" : "0 " + currentApp.state.targetPagePreviewHolderMarginPx + "px",
                "position": "relative",
                "height": "100%",
                "max-height": "100%",
                "overflow": "auto"
            };
            var scrolledPagePreview = {
                "display": "flex",
                "flex-flow": "column nowrap"
            };
            return h(
                "div",
                { key: "1", styles: pagePreviewHolderStyles, onscroll: currentPagePreview.pagePreviewHolderScrollHandler, afterCreate: currentPagePreview.pagePreviewHolderAfterCreateHandler, afterUpdate: currentPagePreview.pagePreviewHolderAfterUpdateHandler },
                h(
                    "div",
                    { key: "p0", styles: scrolledPagePreview },
                    currentPagePreview.renderPagePreview()
                ),
                currentPagePreview.viewModel.fixedLayoutRowsProjector.results.map(function (r) {
                    return r.renderMaquette();
                })
            );
        };
        this.pagePreviewHolderAfterCreateHandler = function (element, projectionOptions, vnodeSelector, properties, children) {
            currentApp.pagePreviewHolder = element;
            currentApp.resizeChangedHandler();
        };
        this.pagePreviewHolderAfterUpdateHandler = function (element, projectionOptions, vnodeSelector, properties, children) {
            currentApp.pagePreviewHolder = element;
            currentPagePreview.updateVisibleLayoutAtoms();
        };
        this.pagePreviewHolderScrollHandler = function (evt) {
            if (currentApp.state.visiblePropertyBarMaxCount > 0) {
                currentPagePreview.updateVisibleLayoutAtoms();
            }
        };
        this.syncScrollPositionFromBoxTree = function () {
            if (currentApp.propertyBarVMs[0].isSyncedWithPagePreview) {
                if (currentApp.pagePreviewHolder !== undefined) {
                    var staticOffsetPx = currentApp.navigationHeigthPx;
                    var targetLayoutAtomId_1 = currentApp.propertyBars[0].mostUpperVisibleLayoutAtomId;
                    var domNodeOfTargetLayout = currentPagePreview._visibleLayoutAtomDomNodeReferences.find(function (r) {
                        return CaliforniaApp_1.parseIntFromAttribute(r, "aid") == targetLayoutAtomId_1;
                    });
                    if (domNodeOfTargetLayout === undefined) {
                        domNodeOfTargetLayout = currentPagePreview._activeViewLayoutAtomDomNodeReferences[targetLayoutAtomId_1];
                        currentApp.pagePreviewHolder.scrollTop = currentApp.pagePreviewHolder.scrollTop + (domNodeOfTargetLayout.getBoundingClientRect().top - staticOffsetPx);
                    }
                }
            }
        };
        this.updateVisibleLayoutAtoms = function () {
            var pagePreviewHolder = currentApp.pagePreviewHolder;
            currentPagePreview._visibleLayoutAtomDomNodeReferences = [];
            currentPagePreview._visibleLayoutAtomKeys = [];
            var processedElementCount = 0;
            var mostUpperVisibleIndex = -1;
            var mostUpperVisibleLayoutAtomId = 0;
            var mostUpperVisibleDeltaTopLeft = pagePreviewHolder.clientHeight + 1;
            var staticOffsetPx = currentApp.navigationHeigthPx;
            var currentScrollTop = pagePreviewHolder.scrollTop;
            var minXPreview = 0;
            var maxXPreview = pagePreviewHolder.clientHeight;
            for (var elementKey in currentPagePreview._activeViewLayoutAtomDomNodeReferences) {
                var domNode = currentPagePreview._activeViewLayoutAtomDomNodeReferences[elementKey];
                var isDomNodeVisible = false;
                var boundingRectElement = domNode.getBoundingClientRect();
                var minXElementDeltaTopLeft = boundingRectElement.top - staticOffsetPx;
                var maxXElementDeltaBottomLeft = pagePreviewHolder.clientHeight - (boundingRectElement.top - staticOffsetPx + currentScrollTop + boundingRectElement.height) + currentScrollTop;
                if (boundingRectElement.height > 0) {
                    if (minXElementDeltaTopLeft >= 0.0 && minXElementDeltaTopLeft <= pagePreviewHolder.clientHeight) {
                        isDomNodeVisible = true;
                    } else if (maxXElementDeltaBottomLeft >= 0.0 && maxXElementDeltaBottomLeft <= pagePreviewHolder.clientHeight) {
                        isDomNodeVisible = true;
                    } else if (minXElementDeltaTopLeft <= 0.0 && maxXElementDeltaBottomLeft <= 0.0) {
                        isDomNodeVisible = true;
                    }
                }
                if (isDomNodeVisible) {
                    currentPagePreview._visibleLayoutAtomDomNodeReferences.push(domNode);
                    currentPagePreview._visibleLayoutAtomKeys.push(elementKey);
                    if (minXElementDeltaTopLeft < mostUpperVisibleDeltaTopLeft) {
                        mostUpperVisibleDeltaTopLeft = minXElementDeltaTopLeft;
                        mostUpperVisibleIndex = currentPagePreview._visibleLayoutAtomKeys.length;
                        mostUpperVisibleLayoutAtomId = CaliforniaApp_1.parseIntFromAttribute(domNode, "aid");
                    }
                }
                if (mostUpperVisibleLayoutAtomId != currentPagePreview._mostUpperVisibleLayoutAtomId) {
                    currentPagePreview._mostUpperVisibleLayoutAtomId = mostUpperVisibleLayoutAtomId;
                    if (mostUpperVisibleLayoutAtomId != 0 && currentApp.propertyBarVMs[0].isSyncedWithPagePreview) {
                        currentApp.propertyBars[0].syncScrollPositionFromPagePreview();
                    }
                }
                processedElementCount++;
            }
        };
        this.renderPagePreview = function () {
            var pagePreviewStyles = {
                "width": currentApp.state.isDataLoaded && !currentApp.state.isEnoughAvailableSpacePagePreview ? currentApp.state.targetPagePreviewWidthPx + "px" : undefined,
                "display": "flex"
            };
            var isRenderView = currentApp.clientData.CaliforniaProject.CaliforniaViews !== undefined;
            var californiaViewBodyStyleString = undefined;
            if (currentApp.clientData.CaliforniaProject.CaliforniaViews !== undefined) {
                californiaViewBodyStyleString = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (v) {
                    return v.CaliforniaViewId == currentPagePreview.viewModel.activeCaliforniaViewId;
                }).SpecialStyleBodyStyleString;
            }
            return isRenderView ? h(
                "div",
                { key: "vp" + currentPagePreview.viewModel.activeCaliforniaViewId, "class": californiaViewBodyStyleString, styles: pagePreviewStyles },
                currentPagePreview.viewModel.californiaViewProjector.results.map(function (r) {
                    return r.renderMaquette();
                })
            ) : h("div", { key: "vp0", styles: pagePreviewStyles });
        };
        this.renderCaliforniaViewArray = function () {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.CaliforniaViewId;
            }, function createSectionTarget(source) {
                var sourceCaliforniaViewIdString = source.CaliforniaViewId.toString();
                var layoutRows = currentPagePreview.renderLayoutRowArray(false);
                layoutRows.map(source.PlacedLayoutRows);
                return {
                    renderMaquette: function renderMaquette() {
                        var californiaViewStyles = {
                            "flex": "1 1 1px"
                        };
                        return h(
                            "div",
                            { "class": source.SpecialStyleViewStyleString, key: sourceCaliforniaViewIdString, id: "california-v" + source.CaliforniaViewId + "_" + source.Name, vid: sourceCaliforniaViewIdString, styles: californiaViewStyles },
                            layoutRows.results.map(function (r) {
                                return r.renderMaquette();
                            })
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        layoutRows.map(source.PlacedLayoutRows);
                        sourceCaliforniaViewIdString = source.CaliforniaViewId.toString();
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.renderLayoutRowArray = function (isRenderFixedLayout) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.LayoutBaseId;
            }, function createSectionTarget(source) {
                var sourceLayoutRowIdString = source.LayoutBaseId.toString();
                var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                    return m.StyleForLayoutId == source.LayoutBaseId;
                });
                var layoutBoxMapping = currentPagePreview.renderLayoutBoxArray(isRenderFixedLayout, styleMolecule.IsPositionFixed);
                var unsortedBoxes = source.AllBoxesBelowRow.filter(function (b) {
                    return b.PlacedBoxInBoxId === undefined;
                });
                var sortedBoxes = unsortedBoxes.sort(function (boxA, boxB) {
                    if (boxA.LayoutSortOrderKey < boxB.LayoutSortOrderKey) {
                        return -1;
                    } else if (boxA.LayoutSortOrderKey == boxB.LayoutSortOrderKey) {
                        return 0;
                    } else {
                        return 1;
                    }
                });
                layoutBoxMapping.map(sortedBoxes);
                var pagePreviewOverrideStyles;
                var marginTopOverrideValue;
                var topOverrideValue;
                var marginLeftOverrideValue;
                if (styleMolecule.IsPositionFixed) {
                    marginTopOverrideValue = styleMolecule.TopCssValuePx + "px";
                    topOverrideValue = styleMolecule.TopCssValuePx !== undefined ? currentApp.navigationHeigthPx + "px" : undefined;
                    marginLeftOverrideValue = styleMolecule.LeftCssValuePx + "px";
                } else {
                    marginTopOverrideValue = undefined;
                    topOverrideValue = undefined;
                    marginLeftOverrideValue = undefined;
                }
                var styleMoleculeId = styleMolecule.StyleMoleculeId;
                var styleMoleculeIdString = styleMoleculeId.toString();
                var layoutRowStyleClass = "s" + styleMoleculeIdString;
                var holderKeyString = "" + (isRenderFixedLayout ? "f" : "g") + sourceLayoutRowIdString;
                return {
                    renderMaquette: function renderMaquette() {
                        var renderedLayoutBoxes = layoutBoxMapping.results.length > 0 ? layoutBoxMapping.results.map(function (r) {
                            return r.renderMaquette();
                        }) : [];
                        var isHoveredInBoxTree = currentApp.state.hoveredBoxTreeLayoutBaseId == source.LayoutBaseId;
                        if (!isRenderFixedLayout && styleMolecule.IsPositionFixed) {
                            return undefined;
                        }
                        if (styleMolecule.IsPositionFixed) {
                            pagePreviewOverrideStyles = {
                                "position": "absolute"
                            };
                        } else {
                            if (isRenderFixedLayout) {
                                if (renderedLayoutBoxes.filter(function (v) {
                                    return v !== undefined;
                                }).length == 0) {
                                    return undefined;
                                }
                            }
                            pagePreviewOverrideStyles = {
                                "position": undefined
                            };
                        }
                        pagePreviewOverrideStyles["background-color"] = isHoveredInBoxTree ? exports.HIGHLIGHT_BACKGROUND_COLOR_STRING : undefined;
                        if (source.LayoutBaseId == currentApp.state.highlightedLayoutBaseId) {
                            pagePreviewOverrideStyles["outline"] = "solid 1px black";
                            pagePreviewOverrideStyles["outline-offset"] = "-1px";
                            pagePreviewOverrideStyles["background-color"] = exports.MANUALLY_HIGHLIGHT_BACKGROUND_COLOR_STRING;
                        } else {
                            pagePreviewOverrideStyles["outline"] = undefined;
                            pagePreviewOverrideStyles["outline-offset"] = undefined;
                        }
                        if (styleMolecule.IsPositionFixed) {}
                        return h(
                            "div",
                            { key: holderKeyString, "class": layoutRowStyleClass, styles: pagePreviewOverrideStyles },
                            renderedLayoutBoxes
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        sourceLayoutRowIdString = source.LayoutBaseId.toString();
                        styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                            return m.StyleForLayoutId == source.LayoutBaseId;
                        });
                        layoutBoxMapping = currentPagePreview.renderLayoutBoxArray(isRenderFixedLayout, styleMolecule.IsPositionFixed);
                        unsortedBoxes = source.AllBoxesBelowRow.filter(function (b) {
                            return b.PlacedBoxInBoxId === undefined;
                        });
                        sortedBoxes = unsortedBoxes.sort(function (boxA, boxB) {
                            if (boxA.LayoutSortOrderKey < boxB.LayoutSortOrderKey) {
                                return -1;
                            } else if (boxA.LayoutSortOrderKey == boxB.LayoutSortOrderKey) {
                                return 0;
                            } else {
                                return 1;
                            }
                        });
                        layoutBoxMapping.map(sortedBoxes);
                        if (styleMolecule.IsPositionFixed) {
                            marginTopOverrideValue = styleMolecule.TopCssValuePx + "px";
                            topOverrideValue = styleMolecule.TopCssValuePx !== undefined ? currentApp.navigationHeigthPx + "px" : undefined;
                            marginLeftOverrideValue = styleMolecule.LeftCssValuePx + "px";
                        } else {
                            marginTopOverrideValue = undefined;
                            topOverrideValue = undefined;
                            marginLeftOverrideValue = undefined;
                        }
                        styleMoleculeId = styleMolecule.StyleMoleculeId;
                        styleMoleculeIdString = styleMoleculeId.toString();
                        layoutRowStyleClass = "s" + styleMoleculeId;
                        holderKeyString = "" + (isRenderFixedLayout ? "f" : "g") + sourceLayoutRowIdString;
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.renderLayoutBoxArray = function (isRenderFixedLayout, isLayoutBoxInsideFixed) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.LayoutBaseId;
            }, function createSectionTarget(source) {
                var sourceLayoutBoxIdString = source.LayoutBaseId.toString();
                var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                    return m.StyleForLayoutId == source.LayoutBaseId;
                });
                var renderedLayoutAtoms = currentPagePreview.renderLayoutAtomArray(isRenderFixedLayout, styleMolecule.IsPositionFixed || isLayoutBoxInsideFixed);
                var renderedLayoutBoxes = currentPagePreview.renderLayoutBoxArray(isRenderFixedLayout, styleMolecule.IsPositionFixed || isLayoutBoxInsideFixed);
                var pagePreviewOverrideStyles;
                var marginTopOverrideValue;
                var topOverrideValue;
                var marginLeftOverrideValue;
                if (styleMolecule.IsPositionFixed) {
                    marginTopOverrideValue = styleMolecule.TopCssValuePx + "px";
                    topOverrideValue = styleMolecule.TopCssValuePx !== undefined ? currentApp.navigationHeigthPx + "px" : undefined;
                    marginLeftOverrideValue = styleMolecule.LeftCssValuePx + "px";
                } else {
                    marginTopOverrideValue = undefined;
                    topOverrideValue = undefined;
                    marginLeftOverrideValue = undefined;
                }
                var styleMoleculeId = styleMolecule.StyleMoleculeId;
                var styleMoleculeIdString = styleMoleculeId.toString();
                var layoutBoxStyleClass = "s" + styleMoleculeId;
                var richTextTag = "p";
                if (source.SpecialLayoutBoxType === CaliforniaGenerated_1.SpecialLayoutBoxType.RichText && source.PlacedInBoxAtoms.length > 0) {
                    var layoutIdOfFirstAtom_1 = source.PlacedInBoxAtoms[0].LayoutBaseId;
                    var styleOfFirstAtom = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                        return m.StyleForLayoutId == layoutIdOfFirstAtom_1;
                    });
                    if (styleOfFirstAtom.HtmlTag !== undefined) {
                        richTextTag = styleOfFirstAtom.HtmlTag;
                    } else {
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                    }
                }
                return {
                    renderMaquette: function renderMaquette() {
                        var renderedBoxContent = currentPagePreview.mapAndRenderLayoutBoxContent(source, source.PlacedInBoxAtoms, renderedLayoutAtoms, source.PlacedInBoxBoxes, renderedLayoutBoxes);
                        var isHoveredInBoxTree = currentApp.state.hoveredBoxTreeLayoutBaseId == source.LayoutBaseId;
                        if (!isRenderFixedLayout && styleMolecule.IsPositionFixed) {
                            return undefined;
                        }
                        if (styleMolecule.IsPositionFixed) {
                            pagePreviewOverrideStyles = {
                                "position": "absolute"
                            };
                        } else {
                            if (isRenderFixedLayout && !isLayoutBoxInsideFixed) {
                                if (renderedBoxContent.filter(function (v) {
                                    return v !== undefined;
                                }).length == 0) {
                                    return undefined;
                                }
                            }
                            pagePreviewOverrideStyles = {
                                "position": undefined
                            };
                        }
                        pagePreviewOverrideStyles["background-color"] = isHoveredInBoxTree ? exports.HIGHLIGHT_BACKGROUND_COLOR_STRING : undefined;
                        if (source.LayoutBaseId == currentApp.state.highlightedLayoutBaseId) {
                            pagePreviewOverrideStyles["outline"] = "solid 1px black";
                            pagePreviewOverrideStyles["outline-offset"] = "-1px";
                            pagePreviewOverrideStyles["background-color"] = exports.MANUALLY_HIGHLIGHT_BACKGROUND_COLOR_STRING;
                        } else {
                            pagePreviewOverrideStyles["outline"] = undefined;
                            pagePreviewOverrideStyles["outline-offset"] = undefined;
                        }
                        if (styleMolecule.IsPositionFixed) {}
                        return source.SpecialLayoutBoxType === CaliforniaGenerated_1.SpecialLayoutBoxType.Default ? h(
                            "div",
                            { key: sourceLayoutBoxIdString, "class": layoutBoxStyleClass, styles: pagePreviewOverrideStyles },
                            renderedBoxContent
                        ) : source.SpecialLayoutBoxType === CaliforniaGenerated_1.SpecialLayoutBoxType.UnsortedList ? h(
                            "ul",
                            { key: sourceLayoutBoxIdString, "class": layoutBoxStyleClass, styles: pagePreviewOverrideStyles },
                            renderedBoxContent
                        ) : source.SpecialLayoutBoxType === CaliforniaGenerated_1.SpecialLayoutBoxType.SortedList ? h(
                            "ol",
                            { key: sourceLayoutBoxIdString, "class": layoutBoxStyleClass, styles: pagePreviewOverrideStyles },
                            renderedBoxContent
                        ) : source.SpecialLayoutBoxType === CaliforniaGenerated_1.SpecialLayoutBoxType.ListItem ? h(
                            "li",
                            { key: sourceLayoutBoxIdString, "class": layoutBoxStyleClass, styles: pagePreviewOverrideStyles },
                            renderedBoxContent.length > 0 ? renderedBoxContent : h(
                                "p",
                                null,
                                "add atoms..."
                            )
                        ) : source.SpecialLayoutBoxType === CaliforniaGenerated_1.SpecialLayoutBoxType.RichText ? h(richTextTag, {
                            key: sourceLayoutBoxIdString,
                            styles: pagePreviewOverrideStyles,
                            class: layoutBoxStyleClass
                        }, [renderedBoxContent.length > 0 ? renderedBoxContent : h("p", ["add atoms..."])]) : h(
                            "p",
                            null,
                            "TODO Box Type not implemented!"
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        sourceLayoutBoxIdString = source.LayoutBaseId.toString();
                        styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                            return m.StyleForLayoutId == source.LayoutBaseId;
                        });
                        renderedLayoutAtoms = currentPagePreview.renderLayoutAtomArray(isRenderFixedLayout, styleMolecule.IsPositionFixed || isLayoutBoxInsideFixed);
                        renderedLayoutBoxes = currentPagePreview.renderLayoutBoxArray(isRenderFixedLayout, styleMolecule.IsPositionFixed || isLayoutBoxInsideFixed);
                        if (styleMolecule.IsPositionFixed) {
                            marginTopOverrideValue = styleMolecule.TopCssValuePx + "px";
                            topOverrideValue = styleMolecule.TopCssValuePx !== undefined ? currentApp.navigationHeigthPx + "px" : undefined;
                            marginLeftOverrideValue = styleMolecule.LeftCssValuePx + "px";
                        } else {
                            marginTopOverrideValue = undefined;
                            topOverrideValue = undefined;
                            marginLeftOverrideValue = undefined;
                        }
                        styleMoleculeId = styleMolecule.StyleMoleculeId;
                        styleMoleculeIdString = styleMoleculeId.toString();
                        layoutBoxStyleClass = "s" + styleMoleculeId;
                        richTextTag = "p";
                        if (source.SpecialLayoutBoxType === CaliforniaGenerated_1.SpecialLayoutBoxType.RichText && source.PlacedInBoxAtoms.length > 0) {
                            var layoutIdOfFirstAtom_2 = source.PlacedInBoxAtoms[0].LayoutBaseId;
                            var styleOfFirstAtom = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                                return m.StyleForLayoutId == layoutIdOfFirstAtom_2;
                            });
                            if (styleOfFirstAtom.HtmlTag !== undefined) {
                                richTextTag = styleOfFirstAtom.HtmlTag;
                            } else {
                                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                            }
                        }
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.renderLayoutAtomArray = function (isRenderFixedLayout, isLayoutAtomInsideFixed) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.LayoutBaseId;
            }, function createSectionTarget(source) {
                var sourceLayoutAtomIdString = source.LayoutBaseId.toString();
                var sourceContentAtomIdString = source.HostedContentAtom.ContentAtomId.toString();
                var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                    return m.StyleForLayoutId == source.LayoutBaseId;
                });
                var pagePreviewOverrideStyles;
                var marginTopOverrideValue;
                var topOverrideValue;
                var marginLeftOverrideValue;
                var backgroundOverrideValue;
                if (styleMolecule.IsPositionFixed) {
                    marginTopOverrideValue = styleMolecule.TopCssValuePx + "px";
                    topOverrideValue = styleMolecule.TopCssValuePx !== undefined ? currentApp.navigationHeigthPx + "px" : undefined;
                    marginLeftOverrideValue = styleMolecule.LeftCssValuePx + "px";
                } else {
                    marginTopOverrideValue = undefined;
                    topOverrideValue = undefined;
                    marginLeftOverrideValue = undefined;
                }
                var styleMoleculeId = styleMolecule.StyleMoleculeId;
                var styleMoleculeIdString = styleMoleculeId.toString();
                var layoutAtomStyleClass = "s" + styleMoleculeIdString;
                var hostedContentAtom = currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (c) {
                    return c.ContentAtomId == source.HostedContentAtom.ContentAtomId;
                });
                if (styleMolecule.HtmlTag === undefined) {
                    console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                    return undefined;
                }
                var layoutAtomHtmlTag = styleMolecule.HtmlTag !== undefined ? styleMolecule.HtmlTag : "p";
                if (source.PlacedAtomInBox.SpecialLayoutBoxType === CaliforniaGenerated_1.SpecialLayoutBoxType.RichText) {
                    layoutAtomHtmlTag = "span";
                }
                return {
                    renderMaquette: function renderMaquette() {
                        var isHoveredInBoxTree = currentApp.state.hoveredBoxTreeLayoutBaseId == source.LayoutBaseId;
                        if (isRenderFixedLayout && !isLayoutAtomInsideFixed) {
                            return undefined;
                        }
                        if (styleMolecule.IsPositionFixed) {
                            pagePreviewOverrideStyles = {
                                "margin-top": marginTopOverrideValue,
                                "margin-left": marginLeftOverrideValue,
                                "top": topOverrideValue,
                                "left": undefined,
                                "max-width": undefined,
                                "z-index": undefined,
                                "background-color": undefined
                            };
                        } else {
                            pagePreviewOverrideStyles = {
                                "margin-top": undefined,
                                "margin-left": undefined,
                                "top": undefined,
                                "left": undefined,
                                "max-width": undefined,
                                "z-index": undefined,
                                "background-color": undefined
                            };
                        }
                        pagePreviewOverrideStyles["background-color"] = isHoveredInBoxTree ? exports.HIGHLIGHT_BACKGROUND_COLOR_STRING : undefined;
                        if (source.LayoutBaseId == currentApp.state.highlightedLayoutBaseId) {
                            pagePreviewOverrideStyles["outline"] = "solid 1px black";
                            pagePreviewOverrideStyles["outline-offset"] = "-1px";
                            pagePreviewOverrideStyles["background-color"] = exports.MANUALLY_HIGHLIGHT_BACKGROUND_COLOR_STRING;
                        } else {
                            pagePreviewOverrideStyles["outline"] = undefined;
                            pagePreviewOverrideStyles["outline-offset"] = undefined;
                        }
                        if (styleMolecule.IsPositionFixed) {
                            pagePreviewOverrideStyles["max-width"] = styleMolecule.IsPositionFixed && currentApp.state.isDataLoaded && currentApp.state.isEnoughAvailableSpacePagePreview && currentApp.state.editViewMode !== ClientState_1.EditViewMode.PagePreviewOnly ? currentApp.state.targetPagePreviewWidthPx + "px" : undefined;
                            pagePreviewOverrideStyles["left"] = styleMolecule.IsPositionFixed && styleMolecule.LeftCssValuePx !== undefined ? parseInt(styleMolecule.LeftCssValuePx) + currentApp.state.targetPagePreviewHolderMarginPx + "px" : undefined;
                        }
                        var isEditedLayoutAtomId = source.LayoutBaseId == currentPagePreview.viewModel.editedLayoutAtomId;
                        pagePreviewOverrideStyles["z-index"] = isEditedLayoutAtomId ? "30" : undefined;
                        if (isEditedLayoutAtomId) {
                            return h("textarea", { key: "i" + sourceLayoutAtomIdString, "class": layoutAtomStyleClass, value: currentPagePreview.viewModel.tempContent, oninput: currentPagePreview.contentAtomInputHandler, onblur: currentPagePreview.contentAtomLostFocusHandler, onkeydown: currentPagePreview.contentAtomKeyDownHandler, afterCreate: currentPagePreview.contentAtomAfterCreateHandler, afterUpdate: currentPagePreview.contentAtomAfterUpdateHandler, exitAnimation: currentPagePreview.contentAtomExitAnimationHandler, cid: sourceContentAtomIdString, styles: pagePreviewOverrideStyles });
                        }
                        if (hostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Text) {
                            return h(layoutAtomHtmlTag, {
                                key: sourceLayoutAtomIdString,
                                class: layoutAtomStyleClass,
                                onclick: currentPagePreview.layoutAtomClickHandler,
                                ondblclick: currentPagePreview.layoutAtomDblClickHandler,
                                aid: sourceLayoutAtomIdString,
                                cid: sourceContentAtomIdString,
                                styles: pagePreviewOverrideStyles,
                                afterCreate: currentPagePreview.layoutAtomAfterCreateHandler,
                                afterUpdate: currentPagePreview.layoutAtomAfterUpdateHandler,
                                exitAnimation: currentPagePreview.layoutAtomExitAnimationHandler,
                                onmouseenter: currentPagePreview.layoutAtomMouseEnterHandler,
                                onmouseleave: currentPagePreview.layoutAtomMouseLeaveHandler
                            }, [hostedContentAtom.TextContent]);
                        } else if (hostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Link) {
                            return h(layoutAtomHtmlTag, {
                                key: sourceLayoutAtomIdString,
                                class: layoutAtomStyleClass,
                                onclick: currentPagePreview.layoutAtomClickHandler,
                                ondblclick: currentPagePreview.layoutAtomDblClickHandler,
                                aid: sourceLayoutAtomIdString,
                                cid: sourceContentAtomIdString,
                                href: "",
                                styles: pagePreviewOverrideStyles,
                                onmouseenter: currentPagePreview.layoutAtomMouseEnterHandler,
                                onmouseleave: currentPagePreview.layoutAtomMouseLeaveHandler
                            }, [hostedContentAtom.Url]);
                        } else {
                            console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                            return undefined;
                        }
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        sourceLayoutAtomIdString = source.LayoutBaseId.toString();
                        sourceContentAtomIdString = source.HostedContentAtom.ContentAtomId.toString();
                        styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                            return m.StyleForLayoutId == source.LayoutBaseId;
                        });
                        if (styleMolecule.IsPositionFixed) {
                            marginTopOverrideValue = styleMolecule.TopCssValuePx + "px";
                            topOverrideValue = styleMolecule.TopCssValuePx !== undefined ? currentApp.navigationHeigthPx + "px" : undefined;
                            marginLeftOverrideValue = styleMolecule.LeftCssValuePx + "px";
                        } else {
                            marginTopOverrideValue = undefined;
                            topOverrideValue = undefined;
                            marginLeftOverrideValue = undefined;
                        }
                        styleMoleculeId = styleMolecule.StyleMoleculeId;
                        styleMoleculeIdString = styleMoleculeId.toString();
                        layoutAtomStyleClass = "s" + styleMoleculeId;
                        hostedContentAtom = currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (c) {
                            return c.ContentAtomId == source.HostedContentAtom.ContentAtomId;
                        });
                        if (styleMolecule.HtmlTag === undefined) {
                            console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                        }
                        layoutAtomHtmlTag = styleMolecule.HtmlTag !== undefined ? styleMolecule.HtmlTag : "p";
                        if (source.PlacedAtomInBox.SpecialLayoutBoxType === CaliforniaGenerated_1.SpecialLayoutBoxType.RichText) {
                            layoutAtomHtmlTag = "span";
                        }
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.resetContentAtomEditMode = function () {
            currentPagePreview.resetEquationNumbersWhenModifying(false);
            currentPagePreview.viewModel.editedLayoutAtomId = 0;
            currentPagePreview.viewModel.tempContent = "";
            currentPagePreview.viewModel.tempOriginalContent = "";
            currentPagePreview.viewModel.stylesOfEditedContent = {};
        };
        this.contentAtomLostFocusHandler = function (evt) {
            currentPagePreview.updateContentAtom(CaliforniaApp_1.parseIntFromAttribute(evt.target, "cid"));
        };
        this.updateContentAtom = function (contentAtomId) {
            if (currentPagePreview.viewModel.editedLayoutAtomId != 0) {
                if (currentPagePreview.viewModel.tempContent !== currentPagePreview.viewModel.tempOriginalContent) {
                    var contentAtom = currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (a) {
                        return a.InstancedOnLayoutId == currentPagePreview.viewModel.editedLayoutAtomId;
                    });
                    if (contentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Text) {
                        contentAtom.TextContent = currentPagePreview.viewModel.tempContent;
                    } else if (contentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Link) {
                        contentAtom.Url = currentPagePreview.viewModel.tempContent;
                    } else {
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                        return;
                    }
                    if (currentPagePreview.viewModel.tempContent === "") {
                        currentApp.controller.DeleteLayoutJson(currentPagePreview.viewModel.editedLayoutAtomId, false).done(function (data) {
                            return currentApp.router.updateData(data);
                        });
                    } else {
                        currentApp.state.currentReadyState = ClientState_1.ReadyState.Pending;
                        currentApp.controller.UpdateTextContentAtomJson(contentAtomId, currentPagePreview.viewModel.tempContent).done(function (data) {
                            currentApp.router.updateData(data);
                            currentPagePreview.resetEquationNumbersWhenModifying(false);
                        }).always(function (data) {
                            return currentApp.state.currentReadyState = ClientState_1.ReadyState.Ok;
                        });
                    }
                }
            }
            currentPagePreview.resetContentAtomEditMode();
        };
        this.contentAtomKeyDownHandler = function (evt) {
            if (evt.keyCode == 13) {
                evt.preventDefault();
                if (evt.shiftKey === true) {
                    currentPagePreview.contentAtomCreateNewLine(CaliforniaApp_1.parseIntFromAttribute(evt.target, "cid"));
                }
                evt.target.blur();
            } else if (evt.keyCode == 27) {
                evt.preventDefault();
                currentPagePreview.resetContentAtomEditMode();
                evt.target.blur();
            } else if (evt.keyCode == undefined) {
                evt.preventDefault();
            }
        };
        this.contentAtomCreateNewLine = function (contentAtomId) {
            if (currentPagePreview.viewModel.editedLayoutAtomId != 0) {
                var editedLayoutAtom = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                    return l.LayoutBaseId == currentPagePreview.viewModel.editedLayoutAtomId;
                });
                var editedLayoutAtomIdChainedCall_1 = currentPagePreview.viewModel.editedLayoutAtomId;
                var placedAtomInBoxIdChainedCall_1 = editedLayoutAtom.PlacedAtomInBoxId;
                if (currentPagePreview.viewModel.tempContent !== currentPagePreview.viewModel.tempOriginalContent) {
                    currentApp.state.currentReadyState = ClientState_1.ReadyState.Pending;
                    currentApp.controller.UpdateTextContentAtomJson(contentAtomId, currentPagePreview.viewModel.tempContent).done(function (data) {
                        currentPagePreview.chainedAddMoveLayoutAtomCallWithFullUpdate(placedAtomInBoxIdChainedCall_1, editedLayoutAtomIdChainedCall_1);
                    }).always(function (data) {
                        return currentApp.state.currentReadyState = ClientState_1.ReadyState.Ok;
                    });
                    currentPagePreview.resetContentAtomEditMode();
                } else {
                    currentPagePreview.chainedAddMoveLayoutAtomCallWithFullUpdate(placedAtomInBoxIdChainedCall_1, editedLayoutAtomIdChainedCall_1);
                }
            }
        };
        this.chainedAddMoveLayoutAtomCallWithFullUpdate = function (placedAtomInBoxIdChainedCall, editedLayoutAtomIdChainedCall) {
            currentApp.controller.CreateLayoutAtomForBoxJson(placedAtomInBoxIdChainedCall, editedLayoutAtomIdChainedCall).done(function (dataSub) {
                var subBoxAtoms = dataSub.CaliforniaProject.LayoutMolecules.filter(function (m) {
                    return m.LayoutType === CaliforniaGenerated_1.LayoutType.Atom && m.PlacedAtomInBoxId == placedAtomInBoxIdChainedCall;
                });
                var createdLayoutMoleculeId = subBoxAtoms[subBoxAtoms.length - 1].LayoutBaseId;
                currentApp.controller.MoveLayoutMoleculeNextToLayoutMoleculeJson(createdLayoutMoleculeId, editedLayoutAtomIdChainedCall, true).done(function (dataSubSub) {
                    currentApp.controller.MoveLayoutMoleculeNextToLayoutMoleculeJson(editedLayoutAtomIdChainedCall, createdLayoutMoleculeId, true).done(function (dataSubSubSub) {
                        currentApp.router.updateData(dataSubSubSub);
                        var hostedContentAtom = currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (c) {
                            return c.InstancedOnLayoutId == createdLayoutMoleculeId;
                        });
                        currentPagePreview.viewModel.tempContent = "";
                        currentPagePreview.viewModel.tempOriginalContent = "";
                        if (hostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Text) {
                            currentPagePreview.viewModel.tempOriginalContent = hostedContentAtom.TextContent;
                        } else if (hostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Link) {
                            currentPagePreview.viewModel.tempOriginalContent = hostedContentAtom.Url;
                        } else {
                            console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                            return;
                        }
                        currentPagePreview.viewModel.editedLayoutAtomId = createdLayoutMoleculeId;
                    });
                });
            });
        };
        this.contentAtomAfterCreateHandler = function (element, projectionOptions, vnodeSelector, properties, children) {
            var targetElement = element;
            $(targetElement).css(currentPagePreview.viewModel.stylesOfEditedContent);
            if (currentApp.state.isSelectAllTextArea === true) {
                targetElement.setSelectionRange(0, currentPagePreview.viewModel.tempContent.length);
            }
            targetElement.focus();
        };
        this.contentAtomAfterUpdateHandler = function (element, projectionOptions, vnodeSelector, properties, children) {};
        this.contentAtomExitAnimationHandler = function (element, removeElement, properties) {
            removeElement();
        };
        this.layoutAtomAfterCreateHandler = function (element, projectionOptions, vnodeSelector, properties, children) {
            if (currentApp.state.isJaxOn) {
                var targetElement = element;
                currentPagePreview._activeViewLayoutAtomDomNodeReferences[properties.key] = targetElement;
                if (targetElement.innerText.indexOf("$") != -1) {
                    MathJax.Hub.Queue(["Typeset", MathJax.Hub, targetElement]);
                }
            }
        };
        this.layoutAtomExitAnimationHandler = function (element, removeElement, properties) {
            delete currentPagePreview._activeViewLayoutAtomDomNodeReferences[properties.key];
            removeElement();
        };
        this.layoutAtomMouseEnterHandler = function (evt) {
            var targetElement = evt.target;
            currentApp.state.hoveredPagePreviewLayoutBaseId = CaliforniaApp_1.parseIntFromAttribute(targetElement, "aid");
        };
        this.layoutAtomMouseLeaveHandler = function (evt) {
            currentApp.state.hoveredPagePreviewLayoutBaseId = 0;
        };
        this.layoutAtomAfterUpdateHandler = function (element, projectionOptions, vnodeSelector, properties, children) {
            if (currentApp.state.isJaxOn) {
                var targetElement = element;
                var math = MathJax.Hub.getAllJax(targetElement)[0];
                if (math !== undefined) {} else if (targetElement.innerText.indexOf("$") != -1) {
                    MathJax.Hub.Queue(["Typeset", MathJax.Hub, targetElement]);
                    currentPagePreview.resetEquationNumbersWhenModifying(false);
                }
            }
        };
        this.contentAtomInputHandler = function (evt) {
            currentPagePreview.viewModel.tempContent = evt.target.value;
        };
        this.layoutAtomDblClickHandler = function (evt) {
            evt.preventDefault();
            if (currentApp.state.currentReadyState !== ClientState_1.ReadyState.Ok) {
                console.log("pending...");
                return;
            }
            if (currentApp.state.currentSelectionMode === ClientState_1.SelectionMode.Content) {
                var targetElement = evt.currentTarget;
                currentPagePreview.viewModel.stylesOfEditedContent = currentPagePreview.getStyleObject(targetElement);
                var contentId = CaliforniaApp_1.parseIntFromAttribute(targetElement, "cid");
                var layoutId = CaliforniaApp_1.parseIntFromAttribute(targetElement, "aid");
                var targetWidth = targetElement.clientWidth;
                var targetHeight = targetElement.clientHeight;
                var maxIterations = 10;
                var currentIteration = 0;
                while (currentIteration++ < maxIterations) {
                    if (targetWidth == 0 || targetHeight == 0) {
                        if (targetElement.parentElement !== null) {
                            targetWidth = targetElement.parentElement.clientWidth;
                            targetHeight = targetElement.parentElement.clientHeight;
                            targetElement = targetElement.parentElement;
                        }
                    }
                }
                currentPagePreview.layoutAtomToTextAreaSetup(contentId, layoutId, true, targetWidth, targetHeight);
            } else {}
        };
        this.layoutAtomClickHandler = function (evt) {
            evt.preventDefault();
            if (currentApp.state.currentReadyState !== ClientState_1.ReadyState.Ok) {
                console.log("pending...");
                return;
            }
            if (currentApp.state.currentSelectionMode === ClientState_1.SelectionMode.Content) {
                var targetElement = evt.currentTarget;
                currentPagePreview.viewModel.stylesOfEditedContent = currentPagePreview.getStyleObject(targetElement);
                var contentId = CaliforniaApp_1.parseIntFromAttribute(targetElement, "cid");
                var layoutId = CaliforniaApp_1.parseIntFromAttribute(targetElement, "aid");
                var targetWidth = targetElement.clientWidth;
                var targetHeight = targetElement.clientHeight;
                var maxIterations = 10;
                var currentIteration = 0;
                while (currentIteration++ < maxIterations) {
                    if (targetWidth == 0 || targetHeight == 0) {
                        if (targetElement.parentElement !== null) {
                            targetWidth = targetElement.parentElement.clientWidth;
                            targetHeight = targetElement.parentElement.clientHeight;
                            targetElement = targetElement.parentElement;
                        }
                    }
                }
                currentPagePreview.layoutAtomToTextAreaSetup(contentId, layoutId, true, targetWidth, targetHeight);
            } else {}
        };
        this.layoutAtomToTextAreaSetup = function (contentAtomId, layoutAtomId, isPreSelectAll, targetWidthPx, targetHeightPx) {
            currentApp.state.isSelectAllTextArea = isPreSelectAll;
            currentPagePreview.viewModel.stylesOfEditedContent["outline"] = "solid 1px rgb(200,200,200)";
            currentPagePreview.viewModel.stylesOfEditedContent["outline-offset"] = "-1px";
            if (currentPagePreview.viewModel.stylesOfEditedContent["width"] === undefined || currentPagePreview.viewModel.stylesOfEditedContent["height"] === undefined) {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            } else {
                var targetWidthString = (targetWidthPx == 0 ? 300 : targetWidthPx).toString() + "px";
                var targetHeightString = (targetHeightPx == 0 ? 300 : targetHeightPx).toString() + "px";
                currentPagePreview.viewModel.stylesOfEditedContent["width"] = targetWidthString;
                currentPagePreview.viewModel.stylesOfEditedContent["min-width"] = targetWidthString;
                currentPagePreview.viewModel.stylesOfEditedContent["height"] = targetHeightString;
                currentPagePreview.viewModel.stylesOfEditedContent["min-height"] = targetHeightString;
            }
            var hostedContentAtom = currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (c) {
                return c.ContentAtomId == contentAtomId;
            });
            currentPagePreview.viewModel.tempContent = "";
            if (hostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Text) {
                currentPagePreview.viewModel.tempContent = hostedContentAtom.TextContent;
            } else if (hostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Link) {
                currentPagePreview.viewModel.tempContent = hostedContentAtom.Url;
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                return;
            }
            currentPagePreview.viewModel.tempOriginalContent = currentPagePreview.viewModel.tempContent;
            currentPagePreview.viewModel.editedLayoutAtomId = layoutAtomId;
        };
        this.getStyleObject = function (targetElement) {
            var dom = $(targetElement).get(0);
            var style;
            var returns = {};
            var camelize = function camelize(a, b) {
                return b.toUpperCase();
            };
            style = window.getComputedStyle(dom, undefined);
            for (var i = 0, l = style.length; i < l; i++) {
                var prop = style[i];
                var camel = prop.replace(/\-([a-z])/g, camelize);
                var val = style.getPropertyValue(prop);
                returns[camel] = val;
            }
            ;
            return returns;
        };
        this.mapAndRenderLayoutBoxContent = function (refLayoutBox, unsortedAtoms, atomMapping, unsortedBoxes, boxMapping) {
            if (unsortedAtoms.length == 0 && unsortedBoxes.length == 0) {
                return [];
            }
            var sortedAtoms = unsortedAtoms.sort(function (atomA, atomB) {
                if (atomA.LayoutSortOrderKey < atomB.LayoutSortOrderKey) {
                    return -1;
                } else if (atomA.LayoutSortOrderKey == atomB.LayoutSortOrderKey) {
                    return 0;
                } else {
                    return 1;
                }
            });
            var sortedBoxes = unsortedBoxes.sort(function (boxA, boxB) {
                if (boxA.LayoutSortOrderKey < boxB.LayoutSortOrderKey) {
                    return -1;
                } else if (boxA.LayoutSortOrderKey == boxB.LayoutSortOrderKey) {
                    return 0;
                } else {
                    return 1;
                }
            });
            atomMapping.map(sortedAtoms);
            boxMapping.map(sortedBoxes);
            var renderedAtomsAndBoxes = [];
            var atomIndex = 0;
            var boxIndex = 0;
            var atomsLength = sortedAtoms.length;
            var boxesLength = sortedBoxes.length;
            var totalItems = atomsLength + boxesLength;
            for (var i = 0; i < totalItems; i++) {
                var currentAtom = undefined;
                var currentBox = undefined;
                if (atomIndex < atomsLength) {
                    currentAtom = sortedAtoms[atomIndex];
                }
                if (boxIndex < boxesLength) {
                    currentBox = sortedBoxes[boxIndex];
                }
                if (currentAtom !== undefined && currentBox !== undefined) {
                    if (currentAtom.LayoutSortOrderKey < currentBox.LayoutSortOrderKey) {
                        renderedAtomsAndBoxes.push(atomMapping.results[atomIndex++].renderMaquette());
                    } else {
                        renderedAtomsAndBoxes.push(boxMapping.results[boxIndex++].renderMaquette());
                    }
                } else if (currentAtom !== undefined) {
                    var remainingAtoms = atomsLength - atomIndex;
                    for (var j = 0; j < remainingAtoms; j++) {
                        renderedAtomsAndBoxes.push(atomMapping.results[atomIndex++].renderMaquette());
                    }
                    break;
                } else {
                    var remainingBoxes = boxesLength - boxIndex;
                    for (var j = 0; j < remainingBoxes; j++) {
                        renderedAtomsAndBoxes.push(boxMapping.results[boxIndex++].renderMaquette());
                    }
                    break;
                }
            }
            return renderedAtomsAndBoxes;
        };
        this.getCssRuleOf = function (styleMolecule, responsiveDevice, stateModifier) {
            var selector = ".s" + styleMolecule.StyleMoleculeId;
            if (stateModifier === undefined || stateModifier === "") {
                var styleRule = selector + "{";
                var _loop_1 = function _loop_1(styleAtomMapping) {
                    var styleAtomId = currentApp.clientData.CaliforniaProject.StyleAtoms.find(function (a) {
                        return a.MappedToMoleculeId == styleAtomMapping.StyleMoleculeAtomMappingId;
                    }).StyleAtomId;
                    var appliedValues = currentApp.clientData.CaliforniaProject.StyleValues.filter(function (v) {
                        return v.StyleAtomId == styleAtomId;
                    });
                    for (var _i = 0, appliedValues_1 = appliedValues; _i < appliedValues_1.length; _i++) {
                        var cssProp = appliedValues_1[_i];
                        if (cssProp.CssValue !== "") {
                            styleRule += cssProp.CssProperty + ": " + cssProp.CssValue + ";";
                        }
                    }
                };
                for (var _i = 0, _a = styleMolecule.MappedStyleAtoms.filter(function (styleAtomMap) {
                    return styleAtomMap.ResponsiveDeviceId == responsiveDevice.ResponsiveDeviceId && (styleAtomMap.StateModifier === undefined || styleAtomMap.StateModifier === "");
                }); _i < _a.length; _i++) {
                    var styleAtomMapping = _a[_i];
                    _loop_1(styleAtomMapping);
                }
                styleRule += "}";
                return currentPagePreview.wrapCssMediaQuery(styleRule, responsiveDevice);
            } else {
                var pseudoStyleRule = "" + selector + stateModifier + "{";
                var _loop_2 = function _loop_2(pseudoStyleAtomMapping) {
                    var styleAtomId = currentApp.clientData.CaliforniaProject.StyleAtoms.find(function (a) {
                        return a.MappedToMoleculeId == pseudoStyleAtomMapping.StyleMoleculeAtomMappingId;
                    }).StyleAtomId;
                    var appliedValues = currentApp.clientData.CaliforniaProject.StyleValues.filter(function (v) {
                        return v.StyleAtomId == styleAtomId;
                    });
                    for (var _i = 0, appliedValues_2 = appliedValues; _i < appliedValues_2.length; _i++) {
                        var cssProp = appliedValues_2[_i];
                        if (cssProp.CssValue !== "") {
                            pseudoStyleRule += cssProp.CssProperty + ": " + cssProp.CssValue + ";";
                        }
                    }
                };
                for (var _b = 0, _c = styleMolecule.MappedStyleAtoms.filter(function (styleAtomMap) {
                    return styleAtomMap.ResponsiveDeviceId == responsiveDevice.ResponsiveDeviceId && styleAtomMap.StateModifier === stateModifier;
                }); _b < _c.length; _b++) {
                    var pseudoStyleAtomMapping = _c[_b];
                    _loop_2(pseudoStyleAtomMapping);
                }
                pseudoStyleRule += "}";
                return currentPagePreview.wrapCssMediaQuery(pseudoStyleRule, responsiveDevice);
            }
        };
        this.wrapCssMediaQuery = function (styleRule, responsiveDevice) {
            if (responsiveDevice.WidthThreshold !== undefined && responsiveDevice.WidthThreshold > 0) {
                return "@media(min-width:" + currentPagePreview.dynamicClientGridBreakpoints[currentApp.clientData.CaliforniaProject.ResponsiveDevices.indexOf(responsiveDevice)] + "px){" + styleRule + "}";
            } else {
                return styleRule;
            }
        };
        this.appendStyleRulesFor = function (styleMolecule, styleSheet) {
            var ruleIndex;
            var styleRule;
            for (var i = 0; i < currentApp.clientData.CaliforniaProject.ResponsiveDevices.length; i++) {
                var responsiveDevice = currentApp.clientData.CaliforniaProject.ResponsiveDevices[i];
                ruleIndex = styleSheet.cssRules.length;
                styleRule = currentPagePreview.getCssRuleOf(styleMolecule, responsiveDevice, undefined);
                styleSheet.insertRule(styleRule, ruleIndex);
                currentPagePreview.virtualStyleIndex[i][styleMolecule.StyleMoleculeId] = ruleIndex;
                var stateModifiers = [];
                var _loop_3 = function _loop_3(i_1) {
                    var styleAtomMap = styleMolecule.MappedStyleAtoms[i_1];
                    if (styleAtomMap.ResponsiveDeviceId == responsiveDevice.ResponsiveDeviceId && styleAtomMap.StateModifier !== undefined) if (stateModifiers.findIndex(function (s) {
                        return s === styleAtomMap.StateModifier;
                    }) == -1) {
                        stateModifiers.push(styleAtomMap.StateModifier);
                    }
                };
                for (var i_1 = 0; i_1 < styleMolecule.MappedStyleAtoms.length; i_1++) {
                    _loop_3(i_1);
                }
                for (var _i = 0, stateModifiers_1 = stateModifiers; _i < stateModifiers_1.length; _i++) {
                    var stateModifier = stateModifiers_1[_i];
                    ruleIndex = styleSheet.cssRules.length;
                    styleRule = currentPagePreview.getCssRuleOf(styleMolecule, responsiveDevice, stateModifier);
                    styleSheet.insertRule(styleRule, ruleIndex);
                    currentPagePreview.virtualPseudoStyleIndex[i]["" + styleMolecule.StyleMoleculeId + stateModifier] = ruleIndex;
                }
            }
        };
        this.reloadCssStyles = function () {
            for (var i = currentApp.styleSheet.cssRules.length; i > 0; i--) {
                currentApp.styleSheet.deleteRule(i - 1);
            }
            for (var i = 0; i < currentApp.clientData.CaliforniaProject.StyleMolecules.length; i++) {
                var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules[i];
                currentPagePreview.appendStyleRulesFor(styleMolecule, currentApp.styleSheet);
            }
        };
        this.updatePagePreviewDimensions = function () {
            var staticMargin = currentApp.state.defaultSymmetricPagePreviewHolderMarginPx;
            var targetWidthPx = 0;
            if (currentApp.state.overrideResponsiveDeviceId == 0) {
                currentApp.state.targetPagePreviewHolderMarginPx = staticMargin;
                targetWidthPx = currentApp.state.availableSpacePagePreviewPx - 2 * staticMargin;
                currentApp.state.targetPagePreviewWidthPx = targetWidthPx;
                currentApp.state.isEnoughAvailableSpacePagePreview = true;
            } else {
                var overrideWithResponsiveDevice = currentApp.clientData.CaliforniaProject.ResponsiveDevices.find(function (r) {
                    return r.ResponsiveDeviceId == currentApp.state.overrideResponsiveDeviceId;
                });
                if (currentApp.state.overrideResponsiveDeviceId == currentApp.state.highestWidthThresholdResponsiveDeviceId) {
                    targetWidthPx = overrideWithResponsiveDevice.WidthThreshold + 1;
                } else {
                    var targetResponsiveSettingAbove = currentApp.clientData.CaliforniaProject.ResponsiveDevices[currentApp.clientData.CaliforniaProject.ResponsiveDevices.indexOf(overrideWithResponsiveDevice) + 1];
                    targetWidthPx = targetResponsiveSettingAbove.WidthThreshold - 1;
                }
                if (currentApp.state.availableSpacePagePreviewPx - 2 * staticMargin >= targetWidthPx) {
                    var remainingSpacePx = currentApp.state.availableSpacePagePreviewPx - 2 * staticMargin - targetWidthPx;
                    currentApp.state.targetPagePreviewHolderMarginPx = staticMargin + remainingSpacePx / 2;
                    currentApp.state.targetPagePreviewWidthPx = currentApp.state.availableSpacePagePreviewPx - remainingSpacePx;
                    currentApp.state.isEnoughAvailableSpacePagePreview = true;
                } else {
                    currentApp.state.isEnoughAvailableSpacePagePreview = false;
                    currentApp.state.targetPagePreviewHolderMarginPx = staticMargin;
                    currentApp.state.targetPagePreviewWidthPx = targetWidthPx;
                }
            }
            if (currentApp.state.isDataLoaded === true) {
                var currentResponsiveDeviceIndex = currentApp.clientData.CaliforniaProject.ResponsiveDevices.findIndex(function (r) {
                    return targetWidthPx < r.WidthThreshold;
                });
                if (currentResponsiveDeviceIndex == 0) {
                    console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                } else if (currentResponsiveDeviceIndex == -1) {
                    currentApp.state.currentResponsiveDeviceId = currentApp.state.highestWidthThresholdResponsiveDeviceId;
                } else {
                    currentApp.state.currentResponsiveDeviceId = currentApp.clientData.CaliforniaProject.ResponsiveDevices[currentResponsiveDeviceIndex - 1].ResponsiveDeviceId;
                }
            }
            currentPagePreview.dynamicClientGridBreakpoints = [];
            var californiaAppWidth = $(window).width();
            if (californiaAppWidth === undefined) {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                return;
            }
            var californiaUIWidth = californiaAppWidth - currentApp.state.availableSpacePagePreviewPx;
            for (var i = 0; i < currentApp.clientData.CaliforniaProject.ResponsiveDevices.length; i++) {
                var responsiveDevice = currentApp.clientData.CaliforniaProject.ResponsiveDevices[i];
                if (responsiveDevice.WidthThreshold < 0) {
                    currentPagePreview.dynamicClientGridBreakpoints.push(0);
                } else if (responsiveDevice.WidthThreshold == 0) {
                    currentPagePreview.dynamicClientGridBreakpoints.push(0);
                } else {
                    var currentDeviceIndex = currentApp.clientData.CaliforniaProject.ResponsiveDevices.findIndex(function (r) {
                        return r.ResponsiveDeviceId == currentApp.state.currentResponsiveDeviceId;
                    });
                    var safetyMarginPx = 50;
                    if (i <= currentDeviceIndex) {
                        var adjustedBreakPoint = californiaAppWidth - safetyMarginPx - (currentDeviceIndex + 1 - i);
                        currentPagePreview.dynamicClientGridBreakpoints.push(adjustedBreakPoint);
                    } else {
                        var adjustedBreakPoint = californiaAppWidth + safetyMarginPx + (i - currentDeviceIndex);
                        currentPagePreview.dynamicClientGridBreakpoints.push(adjustedBreakPoint);
                    }
                }
            }
            currentPagePreview.reloadCssStyles();
        };
        currentPagePreview = this;
        currentApp = californiaAppArg;
        this.viewModel = new PagePreviewVM_1.PagePreviewVM(this);
    }
    ;
    Object.defineProperty(PagePreview.prototype, "visibleLayoutAtomDomNodeReferences", {
        get: function get() {
            return this._visibleLayoutAtomDomNodeReferences;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PagePreview.prototype, "visibleLayoutAtomKeys", {
        get: function get() {
            return this._visibleLayoutAtomKeys;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PagePreview.prototype, "activeViewLayoutAtomDomNodeReferences", {
        get: function get() {
            return this._activeViewLayoutAtomDomNodeReferences;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PagePreview.prototype, "mostUpperVisibleLayoutAtomId", {
        get: function get() {
            return this._mostUpperVisibleLayoutAtomId;
        },
        enumerable: true,
        configurable: true
    });
    ;
    return PagePreview;
}();
exports.PagePreview = PagePreview;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var maquette = __webpack_require__(1);
var h = maquette.h;
var currentVM;
var PagePreviewVM = function () {
    function PagePreviewVM(pagePreviewArg) {
        this.tempOriginalContent = "";
        this.tempContent = "";
        this.editedLayoutAtomId = 0;
        this.stylesOfEditedContent = {};
        this.activeCaliforniaViewId = 0;
        this.activeCaliforniaViewBodyStyleString = "";
        this.activeCaliforniaViewStyleString = "";
        currentVM = this;
        this.californiaViewProjector = pagePreviewArg.renderCaliforniaViewArray();
        this.fixedLayoutRowsProjector = pagePreviewArg.renderLayoutRowArray(true);
    }
    ;
    return PagePreviewVM;
}();
exports.PagePreviewVM = PagePreviewVM;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery, $) {

Object.defineProperty(exports, "__esModule", { value: true });
var velocity = __webpack_require__(40);
var maquette = __webpack_require__(1);
var h = maquette.h;
var CaliforniaApp_1 = __webpack_require__(3);
var PropertyBarVM_1 = __webpack_require__(5);
var CaliforniaGenerated_1 = __webpack_require__(2);
var ClientState_1 = __webpack_require__(4);
var popperjs = __webpack_require__(6);
var ContentAtomType_1 = __webpack_require__(7);
var currentApp;
exports.VERY_HIGH_VALUE = 2300000000;
var CaliforniaViewSpecialStyle;
(function (CaliforniaViewSpecialStyle) {
    CaliforniaViewSpecialStyle[CaliforniaViewSpecialStyle["View"] = 0] = "View";
    CaliforniaViewSpecialStyle[CaliforniaViewSpecialStyle["Body"] = 1] = "Body";
    CaliforniaViewSpecialStyle[CaliforniaViewSpecialStyle["Html"] = 2] = "Html";
})(CaliforniaViewSpecialStyle || (CaliforniaViewSpecialStyle = {}));
var PropertyBar = function () {
    function PropertyBar(californiaAppArg, targetIndex) {
        var _this = this;
        this.propertyBarIndex = -1;
        this._visibleLayoutAtomDomNodeReferences = [];
        this._activeViewLayoutAtomDomNodeReferences = {};
        this._visibleLayoutAtomKeys = [];
        this._mostUpperVisibleLayoutAtomId = 0;
        this.renderPropertyBar = function () {
            var divPropertyBarsStyles = {
                "flex": currentApp.state.editViewMode === ClientState_1.EditViewMode.SidebarOnly ? "1 1 200px" : "1 1 200px",
                "display": "flex",
                "flex-flow": "row nowrap",
                "height": "100%",
                "min-width": "100px",
                "width": "200px",
                "z-index": "2"
            };
            var propertyBarStyles = {
                "flex": currentApp.state.editViewMode === ClientState_1.EditViewMode.SidebarOnly ? "1 1 1px" : "1 1 1px",
                "border-right": _this.propertyBarIndex < currentApp.propertyBarCount - 1 && _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.CaliforniaView ? "solid 3px black" : undefined,
                "width": "100%",
                "height": "100%",
                "display": "flex",
                "flex-flow": "column nowrap"
            };
            return h(
                "div",
                { key: "p" + _this.propertyBarIndex.toString(), styles: divPropertyBarsStyles },
                h(
                    "div",
                    { key: "v0", styles: propertyBarStyles },
                    _this.currentPropertyBar.renderPropertyBarNavigation(),
                    _this.currentPropertyBar.renderPropertyBarControls(),
                    _this.propertyBarIndex != 0 ? _this.currentPropertyBar.renderPropertyBarPoppersRenderOnce() : undefined
                )
            );
        };
        this.renderPropertyBarPoppersRenderOnce = function () {
            return h(
                "div",
                { key: "k0" },
                _this.currentPropertyBar.renderAddCssPropertyPopup(),
                _this.currentPropertyBar.renderAllCssPropertiesPopup(),
                _this.currentPropertyBar.renderUpdateCssValuePopup(),
                _this.currentPropertyBar.renderMatchingQuantumsPopup(),
                _this.currentPropertyBar.renderUpdateCssQuantumPopup(),
                _this.currentPropertyBar.renderAllCssPropertiesForQuantumPopup(),
                _this.currentPropertyBar.insertLayoutRowIntoViewPopup(),
                _this.currentPropertyBar.insertLayoutAtomIntoBoxPopup(),
                _this.currentPropertyBar.insertLayoutBoxIntoBoxPopup(),
                _this.currentPropertyBar.moveStyleAtomToResponsiveDevicePopup(),
                _this.currentPropertyBar.renderSelectInteractionTargetPopup(),
                _this.currentPropertyBar.renderSelectInteractionTargetLayoutFilterPopup(),
                _this.currentPropertyBar.renderShareCaliforniaProjectPopup(),
                _this.currentPropertyBar.renderCaliforniaViewSelectionPopup(),
                _this.currentPropertyBar.renderEditUserDefinedCssPopup(),
                _this.currentPropertyBar.renderSuggestedCssValuesPopup()
            );
        };
        this.renderPropertyBarNavigation = function () {
            var propertyBarNavigationStyles = {
                "margin-top": currentApp.navigationHeigthPx + "px",
                "display": "flex",
                "flex-flow": "row nowrap",
                "height": "auto",
                "width": "100%",
                "flex": "0 0 auto"
            };
            var hiddenModeButtons = [PropertyBarVM_1.PropertyBarMode.None, PropertyBarVM_1.PropertyBarMode.AllStyleAtoms, PropertyBarVM_1.PropertyBarMode.LayoutAtoms, PropertyBarVM_1.PropertyBarMode.LayoutBase, PropertyBarVM_1.PropertyBarMode.LayoutMolecules, PropertyBarVM_1.PropertyBarMode.StyleMolecule];
            var propertyBarModeIconStrings = {};
            propertyBarModeIconStrings[PropertyBarVM_1.PropertyBarMode.AllCaliforniaViews] = "V";
            propertyBarModeIconStrings[PropertyBarVM_1.PropertyBarMode.AllLayoutMolecules] = "L";
            propertyBarModeIconStrings[PropertyBarVM_1.PropertyBarMode.AllStyleMolecules] = "S";
            propertyBarModeIconStrings[PropertyBarVM_1.PropertyBarMode.AllStyleQuantums] = "Q";
            propertyBarModeIconStrings[PropertyBarVM_1.PropertyBarMode.CaliforniaView] = ":)";
            var propertyBarModeButtons = CaliforniaApp_1.getArrayForEnum(PropertyBarVM_1.PropertyBarMode).map(function (type, index) {
                var modeButtonStyles = {
                    "color": index === _this.currentPropertyBar.viewModel.currentPropertyBarMode ? "red" : undefined,
                    "width": "1px",
                    "margin-right": "5px",
                    "margin-left": "5px",
                    "flex": "1 1 1px"
                };
                if (hiddenModeButtons.findIndex(function (el) {
                    return el == index;
                }) != -1) {
                    return undefined;
                }
                return h(
                    "button",
                    { key: index, role: "button", pid: index.toString(), onclick: _this.currentPropertyBar.setPropertyBarMode, styles: modeButtonStyles },
                    propertyBarModeIconStrings[index] !== undefined ? propertyBarModeIconStrings[index] : type
                );
            });
            return h(
                "div",
                { key: "n0", styles: propertyBarNavigationStyles },
                propertyBarModeButtons,
                _this.propertyBarIndex == 0 ? h(
                    "button",
                    { key: "a", onclick: _this.currentPropertyBar.logoutPopupClickHandler, styles: { "flex": "0 0 auto", "width": "auto" } },
                    "\u2709\u2026"
                ) : undefined
            );
        };
        this.setPropertyBarMode = function (evt) {
            _this.currentPropertyBar.viewModel.currentPropertyBarMode = CaliforniaApp_1.parseIntFromAttribute(evt.target, "pid");
        };
        this.renderPropertyBarControls = function () {
            var divPropertyBarControlsStyles = {
                "flex": "1 1 auto",
                "height": "1px",
                "width": "100%"
            };
            var propertyBarControlsStyles = {
                "width": "100%",
                "height": "100%",
                "overflow": "auto"
            };
            return h(
                "div",
                { key: _this.currentPropertyBar.viewModel.currentPropertyBarMode, styles: divPropertyBarControlsStyles },
                _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.AllStyleAtoms ? h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.AllStyleAtoms, styles: propertyBarControlsStyles },
                    _this.currentPropertyBar.viewModel.styleAtomProjector.results.map(function (r) {
                        return r.renderMaquette();
                    })
                ) : _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.AllStyleQuantums ? h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.AllStyleQuantums, styles: propertyBarControlsStyles },
                    _this.currentPropertyBar.renderStyleQuantumControls(),
                    _this.currentPropertyBar.viewModel.styleQuantumProjector.results.map(function (r) {
                        return r.renderMaquette();
                    })
                ) : _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.AllStyleMolecules ? h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.AllStyleMolecules, styles: propertyBarControlsStyles },
                    _this.currentPropertyBar.viewModel.styleMoleculeProjector.results.map(function (r) {
                        return r.renderMaquette();
                    })
                ) : _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.StyleMolecule ? h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.AllStyleMolecules, styles: propertyBarControlsStyles },
                    _this.currentPropertyBar.renderStyleMoleculeControls(_this)
                ) : _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.LayoutAtoms ? h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.LayoutAtoms, styles: propertyBarControlsStyles },
                    _this.currentPropertyBar.viewModel.instanceableAtomProjector.results.map(function (r) {
                        return r.renderMaquette();
                    })
                ) : _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.LayoutMolecules ? h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.LayoutMolecules, styles: propertyBarControlsStyles },
                    _this.currentPropertyBar.viewModel.instanceableMoleculeProjector.results.map(function (r) {
                        return r.renderMaquette();
                    })
                ) : _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.AllLayoutMolecules ? h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.AllLayoutMolecules, styles: propertyBarControlsStyles },
                    _this.currentPropertyBar.viewModel.allLayoutMoleculesProjector.results.map(function (r) {
                        return r.renderMaquette();
                    })
                ) : _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.LayoutBase ? h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.LayoutBase, styles: propertyBarControlsStyles },
                    _this.currentPropertyBar.renderLayoutBaseControls()
                ) : _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.AllCaliforniaViews ? h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.AllCaliforniaViews, styles: propertyBarControlsStyles },
                    _this.currentPropertyBar.renderCaliforniaViewControlsWhenAll(),
                    _this.currentPropertyBar.viewModel.allCaliforniaViewsProjector.results.map(function (r) {
                        return r.renderMaquette();
                    })
                ) : _this.currentPropertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.CaliforniaView ? h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.CaliforniaView, styles: propertyBarControlsStyles },
                    _this.currentPropertyBar.renderCaliforniaViewControls()
                ) : undefined
            );
        };
        this.renderStyleMoleculeControls = function (propertyBar) {
            if (propertyBar.viewModel.selectedStyleMoleculeId != 0) {
                var sourceStyleMoleculeIdString = propertyBar.viewModel.selectedStyleMoleculeId.toString();
                var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                    return m.StyleMoleculeId == propertyBar.viewModel.selectedStyleMoleculeId;
                });
                if (styleMolecule === undefined) {
                    return undefined;
                }
                var isClonedStyle = false;
                var cloneRefStyleMoleculeIdString = undefined;
                if (styleMolecule.ClonedFromStyleId !== undefined) {
                    isClonedStyle = true;
                    cloneRefStyleMoleculeIdString = styleMolecule.ClonedFromStyleId.toString();
                }
                var styledLayoutBaseIdString = styleMolecule.StyleForLayoutId.toString();
                var propertyBarControlsStyles = {
                    "height": "100%",
                    "width": "100%",
                    "display": "flex",
                    "flex-flow": "column nowrap"
                };
                return h(
                    "div",
                    { key: PropertyBarVM_1.PropertyBarMode.StyleMolecule, styles: propertyBarControlsStyles },
                    h(
                        "div",
                        { key: "0", styles: { "flex": "0 0 auto" } },
                        "Selected StyleMolecule #",
                        propertyBar.viewModel.selectedStyleMoleculeId,
                        isClonedStyle ? h(
                            "div",
                            { key: "0" },
                            h(
                                "button",
                                { key: "a", role: "button", mid: cloneRefStyleMoleculeIdString, onclick: propertyBar.selectStyleMoleculeClickHandler },
                                "ref style (#",
                                cloneRefStyleMoleculeIdString,
                                ")"
                            ),
                            h(
                                "button",
                                { disabled: true, key: "b", role: "button", mid: sourceStyleMoleculeIdString, onclick: propertyBar.createReferenceStyleMoleculeClickHandler },
                                "make ref"
                            ),
                            h(
                                "button",
                                { disabled: true, key: "c", role: "button", mid: sourceStyleMoleculeIdString, onclick: propertyBar.syncToReferenceStyleClickHandler },
                                "sync to ref"
                            ),
                            h(
                                "button",
                                { disabled: true, key: "d", role: "button", mid: sourceStyleMoleculeIdString, onclick: propertyBar.syncFromReferenceStyleClickHandler },
                                "sync from ref"
                            )
                        ) : propertyBar.renderStyleMoleculeReferenceSelector(),
                        propertyBar.renderResponsiveDeviceSelectors(),
                        propertyBar.renderStateModifierSelectors(),
                        propertyBar.renderStyleAtomControls()
                    ),
                    h(
                        "div",
                        { key: "1", styles: { "flex": "1 1 1px", "overflow": "scroll" } },
                        propertyBar.viewModel.styleAtomProjector.results.map(function (r) {
                            return r.renderMaquette();
                        }),
                        propertyBar.renderStyleMoleculeChildren(propertyBar)
                    ),
                    h(
                        "div",
                        { key: "2", styles: { "flex": "0 0 auto" } },
                        h(
                            "button",
                            { key: "a", role: "button", lid: styledLayoutBaseIdString, onclick: propertyBar.selectLayoutBaseClickHandler },
                            "layout #",
                            styledLayoutBaseIdString
                        )
                    )
                );
            } else {
                return undefined;
            }
        };
        this.syncToReferenceStyleClickHandler = function (evt) {
            currentApp.controller.SyncStyleMoleculeToReferenceStyleJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "mid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.syncFromReferenceStyleClickHandler = function (evt) {
            currentApp.controller.SyncStyleMoleculeFromReferenceStyleJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "mid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.createReferenceStyleMoleculeClickHandler = function (evt) {
            currentApp.controller.SetStyleMoleculeAsReferenceStyleJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "mid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.renderStyleMoleculeReferenceSelector = function () {
            return h(
                "div",
                { key: "-1" },
                h(
                    "select",
                    { disabled: true, onchange: _this.currentPropertyBar.styleMoleculeReferenceChangedHandler },
                    currentApp.clientData.CaliforniaProject.StyleMolecules.map(function (mol) {
                        if (mol.ClonedFromStyleId !== undefined) {
                            return undefined;
                        }
                        var styleMoleculeIdString = mol.StyleMoleculeId.toString();
                        if (mol.StyleMoleculeId == _this.currentPropertyBar.viewModel.selectedStyleMoleculeId) {
                            return h(
                                "option",
                                { selected: true, key: styleMoleculeIdString, value: styleMoleculeIdString },
                                mol.Name,
                                " #",
                                mol.StyleMoleculeId
                            );
                        } else {
                            return h(
                                "option",
                                { key: styleMoleculeIdString, value: styleMoleculeIdString },
                                mol.Name,
                                " #",
                                mol.StyleMoleculeId
                            );
                        }
                    })
                )
            );
        };
        this.styleMoleculeReferenceChangedHandler = function (evt) {
            var targetSelect = evt.target;
            var parsedStyleMoleculeId = undefined;
            if (targetSelect.selectedIndex < targetSelect.childElementCount) {
                var selectOptionElement = targetSelect.options[targetSelect.selectedIndex];
                parsedStyleMoleculeId = parseInt(selectOptionElement.value);
            }
            if (parsedStyleMoleculeId !== undefined) {
                currentApp.controller.SetStyleMoleculeReferenceJson(_this.currentPropertyBar.viewModel.selectedStyleMoleculeId, parsedStyleMoleculeId).done(function (data) {
                    return currentApp.router.updateData(data);
                });
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
        };
        this.renderStyleMoleculeChildren = function (propertyBar) {
            var childMolecules = [];
            if (propertyBar.viewModel.selectedStyleMoleculeId != 0) {
                childMolecules = currentApp.clientData.CaliforniaProject.StyleMolecules.filter(function (s) {
                    return s.ClonedFromStyleId == _this.currentPropertyBar.viewModel.selectedStyleMoleculeId;
                });
            }
            return h(
                "div",
                { key: "-4" },
                " affects styles:",
                childMolecules.map(function (s) {
                    var styleMoleculeIdString = s.StyleMoleculeId.toString();
                    return h(
                        "div",
                        { key: styleMoleculeIdString },
                        h(
                            "button",
                            { key: "a", role: "button", mid: styleMoleculeIdString, onclick: propertyBar.selectStyleMoleculeClickHandler },
                            "#",
                            styleMoleculeIdString
                        )
                    );
                })
            );
        };
        this.renderBoxTreeForCaliforniaView = function (propertyBar) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.CaliforniaViewId;
            }, function createSectionTarget(source) {
                var sourceCaliforniaViewIdString = source.CaliforniaViewId.toString();
                var layoutRows = propertyBar.renderLayoutRowArray(propertyBar);
                layoutRows.map(source.PlacedLayoutRows);
                return {
                    renderMaquette: function renderMaquette() {
                        var treeViewStyles = {
                            "display": "flex",
                            "flex-direction": "row",
                            "flex-wrap": "wrap",
                            "margin-right": "-15px",
                            "font-family": "sans-serif",
                            "border-bottom": "solid, 1px, black",
                            "width": "auto",
                            "height": "auto",
                            "padding-bottom": "123px"
                        };
                        return propertyBar.viewModel.selectedCaliforniaViewId == source.CaliforniaViewId ? h(
                            "div",
                            { key: sourceCaliforniaViewIdString, styles: treeViewStyles },
                            layoutRows.results.map(function (r) {
                                return r.renderMaquette();
                            })
                        ) : undefined;
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        layoutRows.map(source.PlacedLayoutRows);
                        sourceCaliforniaViewIdString = source.CaliforniaViewId.toString();
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.renderLayoutRowArray = function (propertyBar) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.LayoutBaseId;
            }, function createSectionTarget(source) {
                var sourceLayoutRowIdString = source.LayoutBaseId.toString();
                var renderedLayoutBoxes = propertyBar.renderLayoutBoxArray(propertyBar);
                var unsortedBoxes = source.AllBoxesBelowRow.filter(function (b) {
                    return b.PlacedBoxInBoxId === undefined;
                });
                var sortedBoxes = unsortedBoxes.sort(function (boxA, boxB) {
                    if (boxA.LayoutSortOrderKey < boxB.LayoutSortOrderKey) {
                        return -1;
                    } else if (boxA.LayoutSortOrderKey == boxB.LayoutSortOrderKey) {
                        return 0;
                    } else {
                        return 1;
                    }
                });
                renderedLayoutBoxes.map(sortedBoxes);
                var styleMoleculeId = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                    return m.StyleForLayoutId == source.LayoutBaseId;
                }).StyleMoleculeId;
                var styleMoleculeIdString = styleMoleculeId.toString();
                var layoutRowStyleClass = "s" + styleMoleculeIdString;
                return {
                    renderMaquette: function renderMaquette() {
                        var treeRowStyles = {
                            "flex-basis": "100%",
                            "width": "100%",
                            "max-width": "100%",
                            "padding-left": "15px",
                            "padding-right": "15px",
                            "background-color": "rgb(222, 222, 222)"
                        };
                        var captionStyles = {
                            "flex-basis": "auto",
                            "width": "auto",
                            "color": "rgb(78, 78, 78)",
                            "padding-left": "15px",
                            "padding-right": "15px",
                            "margin": "0",
                            "background-color": "rgb(222, 222, 222)",
                            "text-decoration": "underline"
                        };
                        var divButtonStyles = {
                            "display": "flex",
                            "flex-direction": "row",
                            "flex-wrap": "nowrap",
                            "margin-right": "-15px",
                            "width": "auto",
                            "flex": "0 0 auto"
                        };
                        var buttonStyles = {
                            "font-size": "10px",
                            "color": "rgb(78, 78, 78)",
                            "background-color": "rgb(222, 222, 222)",
                            "width": "auto",
                            "flex": "0 0 auto",
                            "outline": undefined,
                            "outline-offset": undefined
                        };
                        var isPreselectedAny = currentApp.state.preselectedLayoutBaseId != 0;
                        var isPreselectedCurrent = isPreselectedAny && currentApp.state.preselectedLayoutBaseId == source.LayoutBaseId;
                        var buttonStylesTarget = {
                            "font-size": "10px",
                            "color": !isPreselectedAny || isPreselectedCurrent ? "rgb(222, 222, 222)" : "rgb(78, 78, 78)",
                            "background-color": "rgb(222, 222, 222)",
                            "width": "auto",
                            "flex": "0 0 auto",
                            "outline": !isPreselectedAny || isPreselectedCurrent ? undefined : "solid 4px rgb(200,0,0)",
                            "outline-offset": !isPreselectedAny || isPreselectedCurrent ? undefined : "-4px"
                        };
                        var buttonStylesPreselectRow = {
                            "font-size": "10px",
                            "color": isPreselectedCurrent ? "rgb(222,222,222)" : isPreselectedAny ? "rgb(222, 222, 222)" : "rgb(78, 78, 78)",
                            "background-color": isPreselectedCurrent ? "rgb(200,0,0)" : "rgb(222, 222, 222)",
                            "width": "auto",
                            "flex": "0 0 auto",
                            "outline": isPreselectedCurrent || isPreselectedAny ? undefined : "solid 1px rgb(200,0,0)",
                            "outline-offset": isPreselectedCurrent || isPreselectedAny ? undefined : "-1px"
                        };
                        var divSubBoxStyles = {
                            "flex-basis": "100%",
                            "width": "100%",
                            "max-width": "100%",
                            "padding-left": "15px",
                            "padding-right": "15px"
                        };
                        return h(
                            "div",
                            { key: sourceLayoutRowIdString, styles: treeRowStyles, lid: sourceLayoutRowIdString, onmouseenter: propertyBar.layoutBaseMouseEnterHandler, onmouseleave: propertyBar.layoutBaseMouseLeaveHandler },
                            h(
                                "div",
                                { key: "-2", styles: divButtonStyles },
                                h(
                                    "p",
                                    { key: "-1", styles: captionStyles },
                                    "ROW"
                                ),
                                h(
                                    "button",
                                    { key: "a", styles: buttonStyles, lid: sourceLayoutRowIdString, onclick: propertyBar.insertLayoutBoxIntoBoxClickHandler },
                                    "+(B)"
                                ),
                                h(
                                    "button",
                                    { key: "b", styles: buttonStyles, lid: sourceLayoutRowIdString, onclick: propertyBar.selectLayoutBaseClickHandler },
                                    "\u2026"
                                ),
                                h(
                                    "button",
                                    { key: "c", styles: buttonStyles, lid: sourceLayoutRowIdString, onclick: propertyBar.highlightLayoutBaseClickHandler },
                                    "?"
                                ),
                                h(
                                    "button",
                                    { key: "d", styles: buttonStyles, mid: styleMoleculeIdString, onclick: propertyBar.selectStyleMoleculeClickHandler },
                                    "S\u2026"
                                ),
                                h(
                                    "button",
                                    { key: "e", styles: buttonStyles, lid: sourceLayoutRowIdString, onclick: propertyBar.saveLayoutMoleculeClickHandler },
                                    "!!!"
                                ),
                                isPreselectedCurrent || !isPreselectedAny ? h(
                                    "button",
                                    { key: "f", styles: buttonStylesPreselectRow, lid: sourceLayoutRowIdString, onclick: propertyBar.moveLayoutRowBeforeRowClickHandler },
                                    "MV(R)"
                                ) : h(
                                    "button",
                                    { disabled: true, key: "f0", styles: buttonStylesPreselectRow, lid: sourceLayoutRowIdString, onclick: propertyBar.moveLayoutRowBeforeRowClickHandler },
                                    "MV(R)"
                                ),
                                isPreselectedCurrent || !isPreselectedAny ? h(
                                    "button",
                                    { key: "g", styles: buttonStylesPreselectRow, lid: sourceLayoutRowIdString, onclick: propertyBar.syncLayoutBaseStylesClickHandler },
                                    "ST(R)"
                                ) : h(
                                    "button",
                                    { disabled: true, key: "g0", styles: buttonStylesPreselectRow, lid: sourceLayoutRowIdString, onclick: propertyBar.syncLayoutBaseStylesClickHandler },
                                    "ST(R)"
                                ),
                                isPreselectedAny && !isPreselectedCurrent ? h(
                                    "button",
                                    { key: "h", styles: buttonStylesTarget, lid: sourceLayoutRowIdString, onclick: propertyBar.finalizeLayoutRequest },
                                    "$(B:R)"
                                ) : h(
                                    "button",
                                    { disabled: true, key: "h0", styles: buttonStylesTarget, lid: sourceLayoutRowIdString, onclick: propertyBar.finalizeLayoutRequest },
                                    "$(B:R)"
                                ),
                                !isPreselectedAny ? h(
                                    "button",
                                    { key: "i", styles: buttonStyles, lid: sourceLayoutRowIdString, onclick: propertyBar.deleteLayoutBaseClickHandler },
                                    "X"
                                ) : h(
                                    "button",
                                    { disabled: true, key: "i0", styles: buttonStyles, lid: sourceLayoutRowIdString, onclick: propertyBar.deleteLayoutBaseClickHandler },
                                    "X"
                                ),
                                !isPreselectedAny && sortedBoxes.length > 0 ? h(
                                    "button",
                                    { key: "j", styles: buttonStyles, lid: sourceLayoutRowIdString, onclick: propertyBar.deleteBelowLayoutBaseClickHandler },
                                    "CLR"
                                ) : h(
                                    "button",
                                    { disabled: true, key: "j0", styles: buttonStyles, lid: sourceLayoutRowIdString, onclick: propertyBar.deleteBelowLayoutBaseClickHandler },
                                    "CLR"
                                )
                            ),
                            h(
                                "div",
                                { key: "0", styles: divSubBoxStyles },
                                renderedLayoutBoxes.results.map(function (r) {
                                    return r.renderMaquette();
                                })
                            )
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        sourceLayoutRowIdString = source.LayoutBaseId.toString();
                        unsortedBoxes = source.AllBoxesBelowRow.filter(function (b) {
                            return b.PlacedBoxInBoxId === undefined;
                        });
                        sortedBoxes = unsortedBoxes.sort(function (boxA, boxB) {
                            if (boxA.LayoutSortOrderKey < boxB.LayoutSortOrderKey) {
                                return -1;
                            } else if (boxA.LayoutSortOrderKey == boxB.LayoutSortOrderKey) {
                                return 0;
                            } else {
                                return 1;
                            }
                        });
                        renderedLayoutBoxes.map(sortedBoxes);
                        styleMoleculeId = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                            return m.StyleForLayoutId == source.LayoutBaseId;
                        }).StyleMoleculeId;
                        styleMoleculeIdString = styleMoleculeId.toString();
                        layoutRowStyleClass = "s" + styleMoleculeId;
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.renderLayoutBoxArray = function (propertyBar) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.LayoutBaseId;
            }, function createSectionTarget(source) {
                var sourceLayoutBoxIdString = source.LayoutBaseId.toString();
                var renderedLayoutAtoms = propertyBar.renderLayoutAtomArray(propertyBar);
                var renderedLayoutBoxes = propertyBar.renderLayoutBoxArray(propertyBar);
                var styleMoleculeId = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                    return m.StyleForLayoutId == source.LayoutBaseId;
                }).StyleMoleculeId;
                var styleMoleculeIdString = styleMoleculeId.toString();
                var layoutBoxStyleClass = "s" + styleMoleculeId;
                var deepnessPadding = "";
                var calculatedBackgroundColor = "";
                var calculatedColor = "";
                var calculatedBorderColor = "";
                var hasSubAtoms = false;
                var isOddLevel = false;
                deepnessPadding = (source.Level + 1) * 15 + "px";
                calculatedBackgroundColor = propertyBar.calculateBackgroundColorForLevel(source.Level);
                calculatedColor = propertyBar.calculateColorForLevel(source.Level);
                calculatedBorderColor = "solid 1px " + propertyBar.calculateBackgroundColorForLevel(source.Level + 1);
                hasSubAtoms = source.PlacedInBoxAtoms.length > 0;
                isOddLevel = source.Level % 2 != 0;
                return {
                    renderMaquette: function renderMaquette() {
                        var renderedBoxContent = currentApp.pagePreview.mapAndRenderLayoutBoxContent(source, source.PlacedInBoxAtoms, renderedLayoutAtoms, source.PlacedInBoxBoxes, renderedLayoutBoxes);
                        var treeBoxStyles = {
                            "display": "flex",
                            "flex-direction": "row",
                            "flex-wrap": "wrap",
                            "margin-right": "-15px",
                            "background-color": "rgb(222, 222, 222)",
                            "border-bottom": hasSubAtoms ? calculatedBorderColor : undefined,
                            "border-left": "solid 1px black",
                            "zoom": "1.05"
                        };
                        var boxCaptionStyles = {
                            "padding-left": "15px",
                            "padding-right": "15px",
                            "width": "auto",
                            "flex": "0 0 auto",
                            "margin": "0",
                            "text-decoration": "underline",
                            "color": calculatedColor,
                            "background-color": calculatedBackgroundColor,
                            "font-stretch": isOddLevel ? "extra-condensed" : undefined
                        };
                        var divButtonStyles = {
                            "display": "flex",
                            "flex-direction": "row",
                            "flex-wrap": "nowrap",
                            "margin-left": "-15px",
                            "margin-right": "-15px"
                        };
                        var buttonStyles = {
                            "font-size": "10px",
                            "color": calculatedColor,
                            "background-color": calculatedBackgroundColor,
                            "width": "auto",
                            "flex": "0 0 auto",
                            "outline": undefined,
                            "outline-offset": undefined
                        };
                        var buttonDisabledStyles = {
                            "font-size": "10px",
                            "background-color": "rgb(242,242,242)",
                            "color": calculatedColor,
                            "width": "auto",
                            "flex": "0 0 auto",
                            "outline": undefined,
                            "outline-offset": undefined
                        };
                        var isPreselectedAny = currentApp.state.preselectedLayoutBaseId != 0;
                        var isPreselectedCurrent = isPreselectedAny && currentApp.state.preselectedLayoutBaseId == source.LayoutBaseId;
                        var buttonStylesTarget = {
                            "font-size": "10px",
                            "color": !isPreselectedAny || isPreselectedCurrent ? calculatedBackgroundColor : calculatedColor,
                            "background-color": calculatedBackgroundColor,
                            "width": "auto",
                            "flex": "0 0 auto",
                            "outline": !isPreselectedAny || isPreselectedCurrent ? undefined : "solid 4px rgb(200,0,0)",
                            "outline-offset": !isPreselectedAny || isPreselectedCurrent ? undefined : "-4px"
                        };
                        var buttonStylesPreselectAny = {
                            "font-size": "10px",
                            "color": isPreselectedCurrent ? calculatedBackgroundColor : isPreselectedAny ? calculatedBackgroundColor : calculatedColor,
                            "background-color": isPreselectedCurrent ? "rgb(200,0,0)" : calculatedBackgroundColor,
                            "width": "auto",
                            "flex": "0 0 auto",
                            "outline": isPreselectedCurrent || isPreselectedAny ? undefined : "solid 1px rgb(200,0,0)",
                            "outline-offset": isPreselectedCurrent || isPreselectedAny ? undefined : "-1px"
                        };
                        var divSubTreeStyles = {
                            "flex-basis": "100%",
                            "width": "100%",
                            "max-width": "100%",
                            "padding-left": "15px",
                            "padding-right": "15px",
                            "background-color": calculatedBackgroundColor
                        };
                        return h(
                            "div",
                            { key: sourceLayoutBoxIdString, styles: treeBoxStyles },
                            h(
                                "div",
                                { key: "0", styles: divSubTreeStyles, lid: sourceLayoutBoxIdString, onmouseenter: propertyBar.layoutBaseMouseEnterHandler, onmouseleave: propertyBar.layoutBaseMouseLeaveHandler },
                                h(
                                    "div",
                                    { key: "-2", styles: divButtonStyles },
                                    h(
                                        "p",
                                        { key: "-1", styles: boxCaptionStyles },
                                        "BOX",
                                        !isOddLevel ? " |" : undefined
                                    ),
                                    h(
                                        "button",
                                        { key: "a", styles: buttonStyles, lid: sourceLayoutBoxIdString, onclick: propertyBar.insertLayoutAtomIntoBoxClickHandler },
                                        "+(A)"
                                    ),
                                    h(
                                        "button",
                                        { key: "b", styles: buttonStyles, lid: sourceLayoutBoxIdString, onclick: propertyBar.insertLayoutBoxIntoBoxClickHandler },
                                        "+(B)"
                                    ),
                                    h(
                                        "button",
                                        { key: "c", styles: buttonStyles, lid: sourceLayoutBoxIdString, onclick: propertyBar.selectLayoutBaseClickHandler },
                                        "\u2026"
                                    ),
                                    h(
                                        "button",
                                        { key: "d", styles: buttonStyles, lid: sourceLayoutBoxIdString, onclick: propertyBar.highlightLayoutBaseClickHandler },
                                        "?"
                                    ),
                                    h(
                                        "button",
                                        { key: "e", styles: buttonStyles, mid: styleMoleculeIdString, onclick: propertyBar.selectStyleMoleculeClickHandler },
                                        "S\u2026"
                                    ),
                                    h(
                                        "button",
                                        { key: "f", styles: buttonStyles, lid: sourceLayoutBoxIdString, onclick: propertyBar.saveLayoutMoleculeClickHandler },
                                        "!!!"
                                    ),
                                    isPreselectedCurrent || !isPreselectedAny ? h(
                                        "button",
                                        { key: "g", styles: buttonStylesPreselectAny, lid: sourceLayoutBoxIdString, onclick: propertyBar.moveLayoutBoxIntoRowClickHandler },
                                        "IN(R)"
                                    ) : h(
                                        "button",
                                        { disabled: true, key: "g0", styles: buttonStylesPreselectAny, lid: sourceLayoutBoxIdString, onclick: propertyBar.moveLayoutBoxIntoRowClickHandler },
                                        "IN(R)"
                                    ),
                                    isPreselectedCurrent || !isPreselectedAny ? h(
                                        "button",
                                        { key: "h", styles: buttonStylesPreselectAny, lid: sourceLayoutBoxIdString, onclick: propertyBar.moveLayoutBoxIntoBoxClickHandler },
                                        "IN(B)"
                                    ) : h(
                                        "button",
                                        { disabled: true, key: "h0", styles: buttonStylesPreselectAny, lid: sourceLayoutBoxIdString, onclick: propertyBar.moveLayoutBoxIntoBoxClickHandler },
                                        "IN(B)"
                                    ),
                                    isPreselectedCurrent || !isPreselectedAny ? h(
                                        "button",
                                        { key: "i", styles: buttonStylesPreselectAny, lid: sourceLayoutBoxIdString, onclick: propertyBar.moveLayoutBoxBeforeBoxClickHandler },
                                        "MV(A:B)"
                                    ) : h(
                                        "button",
                                        { disabled: true, key: "i0", styles: buttonStylesPreselectAny, lid: sourceLayoutBoxIdString, onclick: propertyBar.moveLayoutBoxBeforeBoxClickHandler },
                                        "MV(A:B)"
                                    ),
                                    isPreselectedCurrent || !isPreselectedAny ? h(
                                        "button",
                                        { key: "j", styles: buttonStylesPreselectAny, lid: sourceLayoutBoxIdString, onclick: propertyBar.syncLayoutBaseStylesClickHandler },
                                        "ST(B)"
                                    ) : h(
                                        "button",
                                        { disabled: true, key: "j0", styles: buttonStylesPreselectAny, lid: sourceLayoutBoxIdString, onclick: propertyBar.syncLayoutBaseStylesClickHandler },
                                        "ST(B)"
                                    ),
                                    isPreselectedAny && !isPreselectedCurrent ? h(
                                        "button",
                                        { key: "k", styles: buttonStylesTarget, lid: sourceLayoutBoxIdString, onclick: propertyBar.finalizeLayoutRequest },
                                        "$(A:B)"
                                    ) : h(
                                        "button",
                                        { disabled: true, key: "k0", styles: buttonStylesTarget, lid: sourceLayoutBoxIdString, onclick: propertyBar.finalizeLayoutRequest },
                                        "$(A:B)"
                                    ),
                                    !isPreselectedAny ? h(
                                        "button",
                                        { key: "l", styles: buttonStyles, lid: sourceLayoutBoxIdString, onclick: propertyBar.deleteLayoutBaseClickHandler },
                                        "X"
                                    ) : h(
                                        "button",
                                        { disabled: true, key: "l0", styles: buttonStyles, lid: sourceLayoutBoxIdString, onclick: propertyBar.deleteLayoutBaseClickHandler },
                                        "X"
                                    ),
                                    !isPreselectedAny && renderedBoxContent.length > 0 ? h(
                                        "button",
                                        { key: "m", styles: buttonStyles, lid: sourceLayoutBoxIdString, onclick: propertyBar.deleteBelowLayoutBaseClickHandler },
                                        "CLR"
                                    ) : h(
                                        "button",
                                        { disabled: true, key: "m0", styles: buttonStyles, lid: sourceLayoutBoxIdString, onclick: propertyBar.deleteBelowLayoutBaseClickHandler },
                                        "CLR"
                                    )
                                ),
                                renderedBoxContent
                            )
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        sourceLayoutBoxIdString = source.LayoutBaseId.toString();
                        styleMoleculeId = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                            return m.StyleForLayoutId == source.LayoutBaseId;
                        }).StyleMoleculeId;
                        styleMoleculeIdString = styleMoleculeId.toString();
                        layoutBoxStyleClass = "s" + styleMoleculeId;
                        deepnessPadding = (source.Level + 1) * 15 + "px";
                        calculatedBackgroundColor = propertyBar.calculateBackgroundColorForLevel(source.Level);
                        calculatedColor = propertyBar.calculateColorForLevel(source.Level);
                        calculatedBorderColor = "solid 1px " + propertyBar.calculateBackgroundColorForLevel(source.Level + 1);
                        hasSubAtoms = source.PlacedInBoxAtoms.length > 0;
                        isOddLevel = source.Level % 2 != 0;
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.calculateColorForLevel = function (level) {
            level = level < 0 ? 0 : level;
            var colorValue = level > 2 ? 222 : 78 + level * 12;
            return "rgb(" + colorValue + "," + colorValue + "," + colorValue + ")";
        };
        this.calculateBackgroundColorForLevel = function (level) {
            level = level < 0 ? 0 : level;
            var colorValue = 200 - level * 22;
            colorValue = colorValue < 0 ? 0 : colorValue;
            return "rgb(" + colorValue + "," + colorValue + "," + colorValue + ")";
        };
        this.renderLayoutAtomArray = function (propertyBar) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.LayoutBaseId;
            }, function createSectionTarget(source) {
                var sourceLayoutAtomIdString = source.LayoutBaseId.toString();
                var sourceContentAtomIdString = source.HostedContentAtom.ContentAtomId.toString();
                var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                    return m.StyleForLayoutId == source.LayoutBaseId;
                });
                var styleMoleculeId = styleMolecule.StyleMoleculeId;
                var styleMoleculeIdString = styleMoleculeId.toString();
                var layoutAtomStyleClass = "s" + styleMoleculeIdString;
                var calculatedPaddingPx = (propertyBar.viewModel.deepestLevelActiveView + 1 - source.Level) * 15;
                var calculatedMargin = "";
                var calculatedColor = "";
                var calculatedBackgroundColor = "";
                calculatedMargin = source.Level * 15 + 15 + "px";
                calculatedColor = propertyBar.calculateColorForLevel(source.Level);
                calculatedBackgroundColor = propertyBar.calculateBackgroundColorForLevel(source.Level);
                var hostedContentAtom = currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (c) {
                    return c.ContentAtomId == source.HostedContentAtom.ContentAtomId;
                });
                return {
                    renderMaquette: function renderMaquette() {
                        var isRenderedAtomVisible = currentApp.pagePreview.visibleLayoutAtomKeys.findIndex(function (k) {
                            return k === sourceLayoutAtomIdString;
                        }) != -1;
                        var isRenderedAtomHovered = currentApp.state.hoveredPagePreviewLayoutBaseId == source.LayoutBaseId;
                        var divAtomStyles = {
                            "display": "flex",
                            "flex-direction": "row",
                            "flex-wrap": "nowrap",
                            "margin-right": "-15px",
                            "border-left": "solid 1px black"
                        };
                        var atomCaptionStyles = {
                            "text-decoration": "underline",
                            "flex": "0 0 auto",
                            "width": "auto",
                            "margin-left": "15px",
                            "padding-left": (calculatedPaddingPx + (isRenderedAtomVisible ? -1 : 0)).toString() + "px",
                            "padding-right": "15px",
                            "margin": "0",
                            "color": calculatedColor,
                            "background-color": calculatedBackgroundColor,
                            "font-size": undefined,
                            "min-width": undefined,
                            "border-left": isRenderedAtomHovered ? "solid 3px rgb(200,0,0)" : isRenderedAtomVisible ? "dashed 1px rgb(200,0,0)" : undefined
                        };
                        var inputStyles = {
                            "text-decoration": undefined,
                            "flex": "0 0 auto",
                            "width": "auto",
                            "margin-left": "15px",
                            "padding-left": undefined,
                            "padding-right": "15px",
                            "margin": "0",
                            "color": undefined,
                            "background-color": undefined,
                            "font-size": "0.8rem",
                            "min-width": "200px"
                        };
                        var buttonStyles = {
                            "font-size": "10px",
                            "color": calculatedColor,
                            "background-color": calculatedBackgroundColor,
                            "width": "auto",
                            "flex": "0 0 auto",
                            "outline": undefined,
                            "outline-offset": undefined
                        };
                        var isPreselectedAny = currentApp.state.preselectedLayoutBaseId != 0;
                        var isPreselectedCurrent = isPreselectedAny && currentApp.state.preselectedLayoutBaseId == source.LayoutBaseId;
                        var buttonStylesTarget = {
                            "font-size": "10px",
                            "color": !isPreselectedAny || isPreselectedCurrent ? calculatedBackgroundColor : calculatedColor,
                            "background-color": calculatedBackgroundColor,
                            "width": "auto",
                            "flex": "0 0 auto",
                            "outline": !isPreselectedAny || isPreselectedCurrent ? undefined : "solid 4px rgb(200,0,0)",
                            "outline-offset": !isPreselectedAny || isPreselectedCurrent ? undefined : "-4px"
                        };
                        var buttonStylesPreselectAny = {
                            "font-size": "10px",
                            "color": isPreselectedCurrent ? calculatedBackgroundColor : isPreselectedAny ? calculatedBackgroundColor : calculatedColor,
                            "background-color": isPreselectedCurrent ? "rgb(200,0,0)" : calculatedBackgroundColor,
                            "width": "auto",
                            "flex": "0 0 auto",
                            "outline": isPreselectedCurrent || isPreselectedAny ? undefined : "solid 1px rgb(200,0,0)",
                            "outline-offset": isPreselectedCurrent || isPreselectedAny ? undefined : "-1px"
                        };
                        var description = "";
                        if (hostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Text && hostedContentAtom.TextContent !== undefined) {
                            description = hostedContentAtom.TextContent.length > 20 ? hostedContentAtom.TextContent.substring(0, 20) + "..." : hostedContentAtom.TextContent;
                        } else if (hostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Link && hostedContentAtom.Url !== undefined) {
                            description = hostedContentAtom.Url.length > 20 ? hostedContentAtom.Url.substring(0, 20) + "..." : hostedContentAtom.Url;
                        } else {
                            console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                            return undefined;
                        }
                        var renderedInputForContent = undefined;
                        var isEditedLayoutAtomId = source.LayoutBaseId == propertyBar.viewModel.editedLayoutAtomId;
                        if (isEditedLayoutAtomId) {
                            renderedInputForContent = h("input", { key: "inp" + sourceLayoutAtomIdString, "class": layoutAtomStyleClass, value: propertyBar.viewModel.tempContent, oninput: propertyBar.contentAtomInputHandler, onblur: propertyBar.contentAtomLostFocusHandler, onkeydown: propertyBar.contentAtomKeyDownHandler, styles: inputStyles, afterCreate: propertyBar.contentAtomAfterCreateHandler, cid: sourceContentAtomIdString });
                        }
                        return h(
                            "div",
                            { key: sourceLayoutAtomIdString, lid: sourceLayoutAtomIdString, styles: divAtomStyles, afterCreate: propertyBar.layoutAtomAfterCreateHandler, onmouseenter: propertyBar.layoutBaseMouseEnterHandler, onmouseleave: propertyBar.layoutBaseMouseLeaveHandler },
                            !isEditedLayoutAtomId ? h(
                                "p",
                                { key: "0", styles: atomCaptionStyles, aid: sourceLayoutAtomIdString, cid: sourceContentAtomIdString, onclick: propertyBar.layoutAtomClickHandler },
                                h(
                                    "small",
                                    { key: "0", aid: sourceLayoutAtomIdString, cid: sourceContentAtomIdString },
                                    description,
                                    "ATOM"
                                )
                            ) : renderedInputForContent,
                            h(
                                "button",
                                { key: "a", styles: buttonStyles, lid: sourceLayoutAtomIdString, onclick: propertyBar.selectLayoutBaseClickHandler },
                                "\u2026"
                            ),
                            h(
                                "button",
                                { key: "b", styles: buttonStyles, lid: sourceLayoutAtomIdString, onclick: propertyBar.highlightLayoutBaseClickHandler },
                                "?"
                            ),
                            h(
                                "button",
                                { key: "c", styles: buttonStyles, mid: styleMoleculeIdString, onclick: propertyBar.selectStyleMoleculeClickHandler },
                                "S\u2026"
                            ),
                            isPreselectedCurrent || !isPreselectedAny ? h(
                                "button",
                                { key: "d", styles: buttonStylesPreselectAny, lid: sourceLayoutAtomIdString, onclick: propertyBar.moveLayoutAtomIntoBoxClickHandler },
                                "IN"
                            ) : h(
                                "button",
                                { disabled: true, key: "d0", styles: buttonStylesPreselectAny, lid: sourceLayoutAtomIdString, onclick: propertyBar.moveLayoutAtomIntoBoxClickHandler },
                                "IN"
                            ),
                            isPreselectedCurrent || !isPreselectedAny ? h(
                                "button",
                                { key: "e", styles: buttonStylesPreselectAny, lid: sourceLayoutAtomIdString, onclick: propertyBar.moveLayoutAtomBeforeAtomClickHandler },
                                "MV"
                            ) : h(
                                "button",
                                { disabled: true, key: "e0", styles: buttonStylesPreselectAny, lid: sourceLayoutAtomIdString, onclick: propertyBar.moveLayoutAtomBeforeAtomClickHandler },
                                "MV"
                            ),
                            isPreselectedCurrent || !isPreselectedAny ? h(
                                "button",
                                { key: "f", styles: buttonStylesPreselectAny, lid: sourceLayoutAtomIdString, onclick: propertyBar.syncLayoutBaseStylesClickHandler },
                                "ST(A)"
                            ) : h(
                                "button",
                                { disabled: true, key: "f0", styles: buttonStylesPreselectAny, lid: sourceLayoutAtomIdString, onclick: propertyBar.syncLayoutBaseStylesClickHandler },
                                "ST(A)"
                            ),
                            isPreselectedCurrent || !isPreselectedAny ? h(
                                "button",
                                { key: "g", styles: buttonStylesPreselectAny, lid: sourceLayoutAtomIdString, onclick: propertyBar.createBoxForAtomInPlaceClickHandler },
                                "+(B).IN"
                            ) : h(
                                "button",
                                { disabled: true, key: "g0", styles: buttonStylesPreselectAny, lid: sourceLayoutAtomIdString, onclick: propertyBar.createBoxForAtomInPlaceClickHandler },
                                "+(B).IN"
                            ),
                            isPreselectedAny && !isPreselectedCurrent ? h(
                                "button",
                                { key: "h", styles: buttonStylesTarget, lid: sourceLayoutAtomIdString, onclick: propertyBar.finalizeLayoutRequest },
                                "$(A:B)"
                            ) : h(
                                "button",
                                { disabled: true, key: "h0", styles: buttonStylesTarget, lid: sourceLayoutAtomIdString, onclick: propertyBar.finalizeLayoutRequest },
                                "$(A:B)"
                            ),
                            !isPreselectedAny ? h(
                                "button",
                                { key: "i", styles: buttonStyles, lid: sourceLayoutAtomIdString, onclick: propertyBar.deleteLayoutBaseClickHandler },
                                "X"
                            ) : h(
                                "button",
                                { disabled: true, key: "i0", styles: buttonStyles, lid: sourceLayoutAtomIdString, onclick: propertyBar.deleteLayoutBaseClickHandler },
                                "X"
                            )
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        sourceLayoutAtomIdString = source.LayoutBaseId.toString();
                        sourceContentAtomIdString = source.HostedContentAtom.ContentAtomId.toString();
                        styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                            return m.StyleForLayoutId == source.LayoutBaseId;
                        });
                        styleMoleculeId = styleMolecule.StyleMoleculeId;
                        styleMoleculeIdString = styleMoleculeId.toString();
                        layoutAtomStyleClass = "s" + styleMoleculeId;
                        calculatedPaddingPx = (propertyBar.viewModel.deepestLevelActiveView - source.Level) * 15 + 15;
                        calculatedColor = propertyBar.calculateColorForLevel(source.Level);
                        calculatedMargin = source.Level * 15 + 15 + "px";
                        calculatedBackgroundColor = propertyBar.calculateBackgroundColorForLevel(source.Level);
                        hostedContentAtom = currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (c) {
                            return c.ContentAtomId == source.HostedContentAtom.ContentAtomId;
                        });
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.contentAtomAfterCreateHandler = function (element, projectionOptions, vnodeSelector, properties, children) {
            var targetElement = element;
            targetElement.focus();
        };
        this.layoutBaseMouseEnterHandler = function (evt) {
            var targetElement = evt.target;
            currentApp.state.hoveredBoxTreeLayoutBaseId = CaliforniaApp_1.parseIntFromAttribute(targetElement, "lid");
        };
        this.layoutBaseMouseLeaveHandler = function (evt) {
            currentApp.state.hoveredBoxTreeLayoutBaseId = 0;
        };
        this.layoutAtomAfterCreateHandler = function (element, projectionOptions, vnodeSelector, properties, children) {
            if (_this.currentPropertyBar.propertyBarIndex == 0) {
                var targetElement = element;
                _this.currentPropertyBar._activeViewLayoutAtomDomNodeReferences[properties.key] = targetElement;
            }
        };
        this.resetContentAtomEditMode = function () {
            currentApp.pagePreview.resetEquationNumbersWhenModifying(false);
            _this.currentPropertyBar.viewModel.editedLayoutAtomId = 0;
            _this.currentPropertyBar.viewModel.tempContent = "";
            _this.currentPropertyBar.viewModel.tempOriginalContent = "";
        };
        this.contentAtomLostFocusHandler = function (evt) {
            _this.currentPropertyBar.updateContentAtom(CaliforniaApp_1.parseIntFromAttribute(evt.target, "cid"));
        };
        this.updateContentAtom = function (contentAtomId) {
            if (_this.currentPropertyBar.viewModel.editedLayoutAtomId != 0) {
                if (_this.currentPropertyBar.viewModel.tempContent !== _this.currentPropertyBar.viewModel.tempOriginalContent) {
                    if (_this.currentPropertyBar.viewModel.tempContent !== "") {
                        var contentAtom = currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (a) {
                            return a.InstancedOnLayoutId == _this.currentPropertyBar.viewModel.editedLayoutAtomId;
                        });
                        if (contentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Text) {
                            contentAtom.TextContent = _this.currentPropertyBar.viewModel.tempContent;
                        } else if (contentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Link) {
                            contentAtom.Url = _this.currentPropertyBar.viewModel.tempContent;
                        } else {
                            console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                            return;
                        }
                        currentApp.state.currentReadyState = ClientState_1.ReadyState.Pending;
                        currentApp.controller.UpdateTextContentAtomJson(contentAtomId, _this.currentPropertyBar.viewModel.tempContent).done(function (data) {
                            currentApp.router.updateData(data);
                        }).always(function (data) {
                            return currentApp.state.currentReadyState = ClientState_1.ReadyState.Ok;
                        });
                    } else {
                        currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (c) {
                            return c.InstancedOnLayoutId == _this.currentPropertyBar.viewModel.editedLayoutAtomId;
                        }).TextContent = _this.currentPropertyBar.viewModel.tempOriginalContent;
                    }
                }
            }
            _this.currentPropertyBar.resetContentAtomEditMode();
        };
        this.contentAtomKeyDownHandler = function (evt) {
            if (evt.keyCode == 13) {
                evt.preventDefault();
                evt.target.blur();
            } else if (evt.keyCode == 27) {
                evt.preventDefault();
                currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (c) {
                    return c.InstancedOnLayoutId == _this.currentPropertyBar.viewModel.editedLayoutAtomId;
                }).TextContent = _this.currentPropertyBar.viewModel.tempOriginalContent;
                _this.currentPropertyBar.resetContentAtomEditMode();
                evt.target.blur();
            } else if (evt.keyCode == undefined) {
                evt.preventDefault();
            }
        };
        this.contentAtomInputHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempContent = evt.target.value;
            currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (c) {
                return c.InstancedOnLayoutId == _this.currentPropertyBar.viewModel.editedLayoutAtomId;
            }).TextContent = _this.currentPropertyBar.viewModel.tempContent;
        };
        this.layoutAtomClickHandler = function (evt) {
            evt.preventDefault();
            if (currentApp.state.currentReadyState !== ClientState_1.ReadyState.Ok) {
                console.log("pending...");
                return;
            }
            if (currentApp.state.currentSelectionMode === ClientState_1.SelectionMode.Content) {
                var contentAtomId_1 = CaliforniaApp_1.parseIntFromAttribute(evt.target, "cid");
                var layoutAtomId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "aid");
                var hostedContentAtom = currentApp.clientData.CaliforniaProject.ContentAtoms.find(function (c) {
                    return c.ContentAtomId == contentAtomId_1;
                });
                _this.currentPropertyBar.viewModel.tempContent = "";
                if (hostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Text) {
                    _this.currentPropertyBar.viewModel.tempContent = hostedContentAtom.TextContent;
                } else if (hostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Link) {
                    _this.currentPropertyBar.viewModel.tempContent = hostedContentAtom.Url;
                } else {
                    console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                    return;
                }
                _this.currentPropertyBar.viewModel.tempOriginalContent = _this.currentPropertyBar.viewModel.tempContent;
                _this.currentPropertyBar.viewModel.editedLayoutAtomId = layoutAtomId;
            } else {}
        };
        this.renderStateModifierSelectors = function () {
            var stateModifierGroupStyles = {
                "display": "flex",
                "flex-flow": "row nowrap"
            };
            var stateModifiers = [];
            var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                return m.StyleMoleculeId == _this.currentPropertyBar.viewModel.selectedStyleMoleculeId;
            });
            var _loop_1 = function _loop_1(i) {
                var modifier = styleMolecule.MappedStyleAtoms[i].StateModifier;
                if (modifier === undefined) {
                    modifier = "";
                }
                if (stateModifiers.findIndex(function (s) {
                    return s === modifier;
                }) == -1) {
                    stateModifiers.push(modifier);
                }
            };
            for (var i = 0; i < styleMolecule.MappedStyleAtoms.length; i++) {
                _loop_1(i);
            }
            var renderedModifiers = [];
            for (var i = 0; i < stateModifiers.length; i++) {
                var modifier = stateModifiers[i];
                var modifierButtonStyles = {
                    "flex": "0 0 auto",
                    "background-color": modifier == _this.currentPropertyBar.viewModel.selectedStateModifier ? "red" : undefined
                };
                renderedModifiers.push(h(
                    "button",
                    { key: modifier, role: "button", mid: modifier, onclick: _this.currentPropertyBar.stateModifierClickHandler, styles: modifierButtonStyles },
                    modifier
                ));
            }
            return h(
                "div",
                { key: "-2", styles: stateModifierGroupStyles },
                renderedModifiers
            );
        };
        this.stateModifierClickHandler = function (evt) {
            var selectedStateModifier = CaliforniaApp_1.parseStringFromAttribute(evt.target, "mid");
            if (selectedStateModifier === _this.currentPropertyBar.viewModel.selectedStateModifier) {
                _this.currentPropertyBar.viewModel.selectedStateModifier = "";
            } else {
                _this.currentPropertyBar.viewModel.selectedStateModifier = selectedStateModifier;
            }
        };
        this.renderResponsiveDeviceSelectors = function () {
            var responsiveGroupStyles = {
                "display": "flex",
                "flex-flow": "row wrap"
            };
            return h(
                "div",
                { key: "-3", styles: responsiveGroupStyles },
                currentApp.clientData.CaliforniaProject.ResponsiveDevices !== undefined ? currentApp.clientData.CaliforniaProject.ResponsiveDevices.map(function (r) {
                    var responsiveButtonStyles = {
                        "flex": "0 0 auto",
                        "background-color": r.ResponsiveDeviceId == _this.currentPropertyBar.viewModel.selectedResponsiveDeviceId ? "red" : undefined
                    };
                    var responsiveDeviceIdString = r.ResponsiveDeviceId.toString();
                    return h(
                        "button",
                        { key: responsiveDeviceIdString, role: "button", rid: responsiveDeviceIdString, onclick: _this.currentPropertyBar.selectResponsiveDeviceClickHandler, styles: responsiveButtonStyles },
                        r.NameShort
                    );
                }) : undefined
            );
        };
        this.selectResponsiveDeviceClickHandler = function (evt) {
            var selectedResponsiveId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "rid");
            if (_this.currentPropertyBar.viewModel.selectedResponsiveDeviceId == selectedResponsiveId) {
                _this.currentPropertyBar.viewModel.selectedResponsiveDeviceId = currentApp.state.noneResponsiveDeviceId;
            } else {
                _this.currentPropertyBar.viewModel.selectedResponsiveDeviceId = selectedResponsiveId;
            }
        };
        this.renderStyleAtomControls = function () {
            return h(
                "div",
                { key: "-1" },
                h(
                    "select",
                    { key: "0", onchange: _this.currentPropertyBar.styleAtomTypeChangedHandler },
                    CaliforniaApp_1.getArrayForEnum(CaliforniaGenerated_1.StyleAtomType).map(function (type, index) {
                        var isSelected = index === _this.currentPropertyBar.viewModel.selectedStyleAtomType;
                        return isSelected ? h(
                            "option",
                            { selected: true, key: index, value: index.toString() },
                            type
                        ) : h(
                            "option",
                            { key: index, value: index.toString() },
                            type
                        );
                    })
                ),
                h("input", { key: "-1", placeholder: "optional :hover,:before,...", value: _this.currentPropertyBar.viewModel.tempPseudoSelector, oninput: _this.currentPropertyBar.pseudoSelectorInputHandler }),
                h(
                    "button",
                    { key: "a", role: "button", onclick: _this.currentPropertyBar.createStyleAtomForMoleculeClickHandler },
                    "+"
                )
            );
        };
        this.pseudoSelectorInputHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempPseudoSelector = evt.target.value;
        };
        this.styleAtomTypeChangedHandler = function (evt) {
            var targetSelect = evt.target;
            var parsedStyleAtomType = undefined;
            if (targetSelect.selectedIndex < targetSelect.childElementCount) {
                var selectOptionElement = targetSelect.options[targetSelect.selectedIndex];
                parsedStyleAtomType = parseInt(selectOptionElement.value);
            }
            if (parsedStyleAtomType !== undefined) {
                _this.currentPropertyBar.viewModel.selectedStyleAtomType = parsedStyleAtomType;
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
        };
        this.createStyleAtomForMoleculeClickHandler = function (evt) {
            if (_this.currentPropertyBar.viewModel.tempPseudoSelector !== "") {
                _this.currentPropertyBar.viewModel.selectedStateModifier = _this.currentPropertyBar.viewModel.tempPseudoSelector;
            }
            currentApp.controller.CreateStyleAtomForMoleculeJson(_this.currentPropertyBar.viewModel.selectedStyleMoleculeId, _this.currentPropertyBar.viewModel.selectedStyleAtomType, _this.currentPropertyBar.viewModel.selectedResponsiveDeviceId, _this.currentPropertyBar.viewModel.selectedStateModifier).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.viewModel.tempPseudoSelector = "";
        };
        this.renderStyleQuantumControls = function () {
            return h(
                "div",
                { key: "0" },
                h("input", { key: "-3", value: _this.currentPropertyBar.viewModel.tempQuantumName, oninput: _this.currentPropertyBar.quantumNameInputHandler }),
                h("input", { key: "-2", value: _this.currentPropertyBar.viewModel.tempCssPropertyName, oninput: _this.currentPropertyBar.cssPropertyNameInputHandler }),
                h("input", { key: "-1", value: _this.currentPropertyBar.viewModel.tempCssValue, oninput: _this.currentPropertyBar.cssValueInputHandler }),
                h(
                    "button",
                    { key: "a", role: "button", onclick: _this.currentPropertyBar.createStyleQuantumClickHandler },
                    "\u2714"
                ),
                h(
                    "button",
                    { key: "b", role: "button", onclick: _this.currentPropertyBar.showAllCssPropertiesForQuantumClickHandler },
                    "?"
                )
            );
        };
        this.showAllCssPropertiesForQuantumClickHandler = function (evt) {
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.AllCssPropertiesForQuantum);
        };
        this.createStyleQuantumClickHandler = function (evt) {
            currentApp.controller.CreateStyleQuantumJson(currentApp.clientData.CaliforniaProject.CaliforniaProjectId, _this.currentPropertyBar.viewModel.tempQuantumName, _this.currentPropertyBar.viewModel.tempCssPropertyName, _this.currentPropertyBar.viewModel.tempCssValue).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.resetAddQuantumState();
        };
        this.resetAddQuantumState = function () {
            _this.currentPropertyBar.viewModel.tempQuantumName = "Quantum";
            _this.currentPropertyBar.viewModel.tempCssPropertyName = "";
            _this.currentPropertyBar.viewModel.tempCssValue = "";
        };
        this.quantumNameInputHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempQuantumName = evt.target.value;
        };
        this.renderStyleValueArray = function (propertyBar) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.StyleValueId;
            }, function createSectionTarget(source) {
                var sourceIdString = source.StyleValueId.toString();
                var styleValueButtonStyle = {
                    "flex": "0 0 auto",
                    "width": "auto",
                    "height": "1rem"
                };
                var styleValueTextStyle = {
                    "outline": source.CssValue === "" ? "solid white 1px" : undefined,
                    "outline-offset": source.CssValue === "" ? "-1px" : undefined,
                    "flex": "0 0 auto",
                    "width": "auto",
                    "margin": "0"
                };
                return {
                    renderMaquette: function renderMaquette() {
                        return h(
                            "div",
                            { key: sourceIdString, exitAnimation: propertyBar.styleElementExitAnimation, styles: { "display": "flex", "flex-flow": "row nowrap" } },
                            h(
                                "p",
                                { styles: styleValueTextStyle },
                                source.CssProperty,
                                ": ",
                                source.CssValue
                            ),
                            h(
                                "button",
                                { key: "a", role: "button", vid: sourceIdString, onclick: propertyBar.deleteStyleValueClickHandler, styles: styleValueButtonStyle },
                                "X"
                            ),
                            h(
                                "button",
                                { key: "b", role: "button", aid: source.StyleAtomId.toString(), vid: sourceIdString, onclick: propertyBar.updateCssValueClickHandler, styles: styleValueButtonStyle },
                                "Edit"
                            )
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        sourceIdString = source.StyleValueId.toString();
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.renderStyleQuantumArrayForStyleAtom = function () {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.StyleQuantumId;
            }, function createSectionTarget(source) {
                var sourceIdString = source.StyleQuantumId.toString();
                return {
                    renderMaquette: function renderMaquette() {
                        return h(
                            "div",
                            { key: sourceIdString },
                            h(
                                "p",
                                { styles: { "margin": "0" } },
                                source.Name,
                                ": ",
                                source.CssProperty,
                                " (",
                                source.CssValue,
                                ")"
                            )
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        sourceIdString = source.StyleQuantumId.toString();
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.renderStyleAtomArray = function (propertyBar) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.StyleAtomId;
            }, function createSectionTarget(source) {
                var styleAtomIdString = source.StyleAtomId.toString();
                var appliedValuesMap = propertyBar.renderStyleValueArray(propertyBar);
                var appliedQuantumsMap = propertyBar.renderStyleQuantumArrayForStyleAtom();
                if (source.AppliedValues !== undefined) {
                    appliedValuesMap.map(source.AppliedValues);
                } else {
                    appliedValuesMap.map([]);
                }
                if (source.MappedQuantums !== undefined) {
                    appliedQuantumsMap.map(source.MappedQuantums.map(function (qm) {
                        return qm.StyleQuantum;
                    }));
                } else {
                    appliedQuantumsMap.map([]);
                }
                return {
                    renderMaquette: function renderMaquette() {
                        var isDisplayStyleAtom = true;
                        if (propertyBar.viewModel.currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.StyleMolecule) {
                            var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                                return m.StyleMoleculeId == propertyBar.viewModel.selectedStyleMoleculeId;
                            });
                            var targetMappingIndex = styleMolecule.MappedStyleAtoms.findIndex(function (m) {
                                return m.ResponsiveDeviceId == propertyBar.viewModel.selectedResponsiveDeviceId && m.StyleMoleculeAtomMappingId == source.MappedToMoleculeId && (m.StateModifier === undefined && propertyBar.viewModel.selectedStateModifier === "" || m.StateModifier === propertyBar.viewModel.selectedStateModifier);
                            });
                            isDisplayStyleAtom = targetMappingIndex != -1;
                        }
                        var divStyleAtomStyles = {
                            "display": !isDisplayStyleAtom ? "none" : undefined,
                            "width": "100%",
                            "height": "auto"
                        };
                        return h(
                            "div",
                            { key: styleAtomIdString, exitAnimation: propertyBar.styleElementExitAnimation, styles: divStyleAtomStyles },
                            h(
                                "p",
                                { key: "0", styles: { "margin": "0" } },
                                "(#",
                                styleAtomIdString,
                                ")",
                                source.Name,
                                ":"
                            ),
                            appliedValuesMap.results.map(function (r) {
                                return r.renderMaquette();
                            }),
                            h(
                                "button",
                                { key: "a", role: "button", aid: styleAtomIdString, onclick: propertyBar.createCssPropertyForAtomClickHandler },
                                "+"
                            ),
                            h(
                                "button",
                                { key: "b", role: "button", aid: styleAtomIdString, onclick: propertyBar.moveStyleAtomPopupClickHandler },
                                "=>"
                            ),
                            source.IsDeletable ? h(
                                "button",
                                { key: "b0", role: "button", aid: styleAtomIdString, onclick: propertyBar.deleteStyleAtomClickHandler },
                                "X"
                            ) : h(
                                "button",
                                { disabled: true, key: "b1", role: "button", aid: styleAtomIdString },
                                "X"
                            ),
                            source.MappedQuantums.length > 0 ? h(
                                "p",
                                { key: "-1" },
                                "quantums:"
                            ) : undefined,
                            " ",
                            appliedQuantumsMap.results.map(function (r) {
                                return r.renderMaquette();
                            })
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        appliedValuesMap.map(updatedSource.AppliedValues);
                        appliedQuantumsMap.map(updatedSource.MappedQuantums.map(function (qm) {
                            return qm.StyleQuantum;
                        }));
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.moveStyleAtomPopupClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.selectedStyleAtomIdForPopup = CaliforniaApp_1.parseIntFromAttribute(evt.target, "aid");
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.MoveStyleAtom);
        };
        this.createCssPropertyForAtomClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.selectedStyleAtomId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "aid");
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.AddCssProperty);
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.AllCssProperties);
        };
        this.deleteStyleAtomClickHandler = function (evt) {
            currentApp.controller.DeleteStyleAtomJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "aid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.updateCssValueClickHandler = function (evt) {
            var styleValueId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "vid");
            var styleAtomId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "aid");
            _this.currentPropertyBar.viewModel.selectedStyleValueId = styleValueId;
            _this.currentPropertyBar.viewModel.selectedStyleAtomId = styleAtomId;
            var targetStyleValue = currentApp.clientData.CaliforniaProject.StyleValues.find(function (val) {
                return val.StyleValueId == styleValueId;
            });
            _this.currentPropertyBar.viewModel.tempCssValue = targetStyleValue.CssValue;
            _this.currentPropertyBar.viewModel.tempCssPropertyName = targetStyleValue.CssProperty;
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.UpdateCssValue);
        };
        this.deleteStyleValueClickHandler = function (evt) {
            currentApp.controller.DeleteStyleValueJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "vid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.renderAddCssPropertyPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.AddCssProperty || _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.AllCssProperties;
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.AddCssProperty], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.saveCssPropertyForAtomClickHandler },
                        "\u2714"
                    ),
                    h(
                        "button",
                        { key: "b", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelAddCssPropertyForAtomClickHandler },
                        "x"
                    )
                ),
                h(
                    "div",
                    null,
                    h("input", { key: "-1", value: _this.currentPropertyBar.viewModel.tempCssPropertyName, oninput: _this.currentPropertyBar.cssPropertyNameInputHandler }),
                    h(
                        "button",
                        { key: "a", role: "button", onclick: _this.currentPropertyBar.showAllCssPropertiesClickHandler },
                        "?"
                    )
                )
            );
        };
        this.renderAllCssPropertiesForQuantumPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.AllCssPropertiesForQuantum;
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.AllCssPropertiesForQuantum], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px", "height": "300px", "overflow": "scroll" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelUpdateCssPropertyForQuantumClickHandler },
                        "x"
                    )
                ),
                currentApp.clientData.AllCssProperties.map(function (prop) {
                    return h(
                        "div",
                        { key: prop },
                        prop,
                        h(
                            "button",
                            { key: "a", role: "button", cid: prop, onclick: _this.currentPropertyBar.setSelectedCssPropertyForQuantumClickHandler },
                            "\u2714"
                        )
                    );
                })
            );
        };
        this.setSelectedCssPropertyForQuantumClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssPropertyName = CaliforniaApp_1.parseStringFromAttribute(evt.target, "cid");
            _this.currentPropertyBar.closePopup();
        };
        this.cancelUpdateCssPropertyForQuantumClickHandler = function (evt) {
            _this.currentPropertyBar.closePopup();
        };
        this.insertLayoutRowIntoViewPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.InsertLayoutRowIntoView;
            var instanceableLayoutRows = [];
            if (isPopupVisible) {
                var instanceableRowsView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (view) {
                    return view.IsInternal && view.Name === "[Internal] Instanceable Layout Rows";
                });
                instanceableLayoutRows.push.apply(instanceableLayoutRows, instanceableRowsView.PlacedLayoutRows);
                var userInstanceableRowsView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (view) {
                    return view.IsInternal && view.Name === "[Internal] User Layout Molecules";
                });
                for (var i = 1; i < userInstanceableRowsView.PlacedLayoutRows.length; i++) {
                    instanceableLayoutRows.push(userInstanceableRowsView.PlacedLayoutRows[i]);
                }
            }
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.InsertLayoutRowIntoView], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px", "height": "300px", "overflow": "scroll" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelInsertLayoutRowIntoViewClickHandler },
                        "x"
                    )
                ),
                instanceableLayoutRows.map(function (prop) {
                    return h(
                        "div",
                        { key: prop.LayoutBaseId },
                        h(
                            "button",
                            { styles: { "width": "auto", "margin": "0" }, key: "a", lid: prop.LayoutBaseId.toString(), onclick: _this.currentPropertyBar.insertSelectedLayoutRowIntoViewClickHandler, onmouseenter: _this.currentPropertyBar.insertRowShowPreviewHandler, onmouseleave: _this.currentPropertyBar.insertRowHidePreviewHandler },
                            "\u2714"
                        ),
                        h(
                            "p",
                            { key: "0", styles: { "-webkit-user-select": "none", "width": "auto", "margin": "0", "float": "left" }, lid: prop.LayoutBaseId.toString(), ontouchstart: _this.currentPropertyBar.insertRowShowPreviewHandler, ontouchend: _this.currentPropertyBar.insertRowHidePreviewHandler },
                            prop.LayoutBaseId
                        )
                    );
                })
            );
        };
        this.insertSelectedLayoutRowIntoViewClickHandler = function (evt) {
            var layoutId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            currentApp.controller.CreateLayoutRowForViewJson(_this.currentPropertyBar.viewModel.selectedCaliforniaViewId, layoutId).done(function (data) {
                return currentApp.router.updateData(data);
            });
            currentApp.state.lastCommand = CaliforniaGenerated_1.CaliforniaEvent.CreateLayoutRowForView;
            currentApp.state.lastCaliforniaEventData = [_this.currentPropertyBar.viewModel.selectedCaliforniaViewId, layoutId];
            _this.currentPropertyBar.closePopup();
        };
        this.cancelInsertLayoutRowIntoViewClickHandler = function (evt) {
            _this.currentPropertyBar.closePopup();
        };
        this.insertLayoutAtomIntoBoxPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.InsertLayoutAtomIntoBox;
            var instanceableLayoutAtoms = [];
            if (isPopupVisible) {
                var instanceableAtomsView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (view) {
                    return view.IsInternal && view.Name === "[Internal] Instanceable Layout Atoms";
                });
                var atomContainerBox = instanceableAtomsView.PlacedLayoutRows[0].AllBoxesBelowRow.find(function (b) {
                    return b.PlacedInBoxAtoms.length > 0;
                });
                instanceableLayoutAtoms.push.apply(instanceableLayoutAtoms, atomContainerBox.PlacedInBoxAtoms);
            }
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.InsertLayoutAtomIntoBox], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px", "height": "300px", "overflow": "scroll" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelInsertLayoutAtomIntoBoxClickHandler },
                        "x"
                    )
                ),
                instanceableLayoutAtoms.map(function (prop) {
                    var textPreview = "";
                    if (prop.HostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Text) {
                        textPreview = prop.HostedContentAtom.TextContent;
                    } else if (prop.HostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Link) {
                        textPreview = prop.HostedContentAtom.Url;
                    } else {
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                        return;
                    }
                    return h(
                        "div",
                        { key: prop.LayoutBaseId },
                        h(
                            "button",
                            { styles: { "width": "auto", "margin": "0" }, key: "a", lid: prop.LayoutBaseId.toString(), onclick: _this.currentPropertyBar.insertSelectedLayoutAtomIntoBoxClickHandler, onmouseenter: _this.currentPropertyBar.insertAtomShowPreviewHandler, onmouseleave: _this.currentPropertyBar.insertAtomHidePreviewHandler },
                            "\u2714"
                        ),
                        h(
                            "p",
                            { key: "0", styles: { "-webkit-user-select": "none", "width": "auto", "margin": "0", "float": "left" }, lid: prop.LayoutBaseId.toString(), ontouchstart: _this.currentPropertyBar.insertAtomShowPreviewHandler, ontouchend: _this.currentPropertyBar.insertAtomHidePreviewHandler },
                            prop.LayoutBaseId,
                            " ",
                            textPreview
                        )
                    );
                })
            );
        };
        this.insertSelectedLayoutAtomIntoBoxClickHandler = function (evt) {
            var targetBoxId = currentApp.state.selectedLayoutBaseId;
            currentApp.controller.CreateLayoutAtomForBoxJson(targetBoxId, CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid")).done(function (data) {
                currentApp.router.updateData(data);
                currentApp.projector.renderNow();
                var updatedSubAtoms = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                    return l.LayoutBaseId == targetBoxId;
                }).PlacedInBoxAtoms;
                _this.currentPropertyBar.viewModel.editedLayoutAtomId = updatedSubAtoms[updatedSubAtoms.length - 1].LayoutBaseId;
            });
            _this.currentPropertyBar.closePopup();
        };
        this.cancelInsertLayoutAtomIntoBoxClickHandler = function (evt) {
            _this.currentPropertyBar.closePopup();
        };
        this.displayPopup = function (targetPosition, popupMode) {
            var popupElement = null;
            popupElement = document.getElementById(_this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[popupMode]);
            if (popupElement !== null) {
                _this.viewModel.currentPopupMode = popupMode;
                var displayPopup = new popperjs.default(targetPosition, popupElement, {
                    placement: 'bottom-end',
                    modifiers: {
                        preventOverflow: {
                            boundariesElement: document.body
                        }
                    }
                });
                currentApp.projector.renderNow();
                return;
            }
            console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
        };
        this.closePopup = function () {
            _this.viewModel.currentPopupMode = PropertyBarVM_1.PopupMode.None;
            _this.viewModel.currentSecondaryPopupMode = PropertyBarVM_1.PopupSecondaryMode.None;
        };
        this.insertLayoutBoxIntoBoxPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.SelectBox;
            var instanceableLayoutBoxes = [];
            if (isPopupVisible) {
                var instanceableRowsView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (view) {
                    return view.IsInternal && view.Name === "[Internal] Instanceable Layout Rows";
                });
                var allBoxes = instanceableRowsView.PlacedLayoutRows[0].AllBoxesBelowRow;
                var firstSubBox = allBoxes.find(function (b) {
                    return b.PlacedBoxInBoxId === undefined;
                });
                instanceableLayoutBoxes.push(firstSubBox);
                var userInstanceableView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (view) {
                    return view.IsInternal && view.Name === "[Internal] User Layout Molecules";
                });
                var userBoxes = userInstanceableView.PlacedLayoutRows[0].AllBoxesBelowRow.filter(function (b) {
                    return b.PlacedBoxInBoxId === undefined;
                });
                instanceableLayoutBoxes.push.apply(instanceableLayoutBoxes, userBoxes);
            }
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.SelectBox], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px", "height": "300px", "overflow": "scroll" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelInsertLayoutBoxIntoBoxClickHandler },
                        "x"
                    )
                ),
                instanceableLayoutBoxes.map(function (prop) {
                    return h(
                        "div",
                        { key: prop.LayoutBaseId },
                        h(
                            "button",
                            { styles: { "width": "auto", "margin": "0" }, key: "a", role: "button", lid: prop.LayoutBaseId.toString(), onclick: _this.currentPropertyBar.insertSelectedLayoutBoxIntoBoxOrRowClickHandler, onmouseenter: _this.currentPropertyBar.insertBoxShowPreviewHandler, onmouseleave: _this.currentPropertyBar.insertBoxHidePreviewHandler },
                            "\u2714"
                        ),
                        h(
                            "p",
                            { key: "0", styles: { "-webkit-user-select": "none", "width": "auto", "margin": "0", "float": "left" }, lid: prop.LayoutBaseId.toString(), ontouchstart: _this.currentPropertyBar.insertBoxShowPreviewHandler, ontouchend: _this.currentPropertyBar.insertBoxHidePreviewHandler },
                            prop.LayoutBaseId
                        )
                    );
                })
            );
        };
        this.insertRowShowPreviewHandler = function (evt) {
            var targetElement = evt.target;
            var hoveredLayoutId = CaliforniaApp_1.parseIntFromAttribute(targetElement, "lid");
            currentApp.state.hoveredInsertLayoutBaseId = hoveredLayoutId;
            var tempRow = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                return l.LayoutBaseId == hoveredLayoutId;
            });
            currentApp.state.backupSortOrder = tempRow.LayoutSortOrderKey;
            tempRow.LayoutSortOrderKey = exports.VERY_HIGH_VALUE;
            var californiaView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (v) {
                return v.CaliforniaViewId == _this.currentPropertyBar.viewModel.selectedCaliforniaViewId;
            });
            californiaView.PlacedLayoutRows.push(tempRow);
            currentApp.router.setActiveCaliforniaView(californiaView);
        };
        this.insertRowHidePreviewHandler = function (evt) {
            var californiaView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (v) {
                return v.CaliforniaViewId == _this.currentPropertyBar.viewModel.selectedCaliforniaViewId;
            });
            var tempRowIndex = californiaView.PlacedLayoutRows.findIndex(function (r) {
                return r.LayoutBaseId == currentApp.state.hoveredInsertLayoutBaseId;
            });
            if (tempRowIndex != -1) {
                var tempRow = californiaView.PlacedLayoutRows.splice(tempRowIndex, 1)[0];
                if (currentApp.state.backupSortOrder !== undefined) {
                    tempRow.LayoutSortOrderKey = currentApp.state.backupSortOrder;
                } else {
                    console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                }
                currentApp.state.backupSortOrder = undefined;
                currentApp.state.hoveredInsertLayoutBaseId = 0;
                currentApp.router.setActiveCaliforniaView(californiaView);
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
        };
        this.insertBoxShowPreviewHandler = function (evt) {
            var targetElement = evt.target;
            var hoveredLayoutId = CaliforniaApp_1.parseIntFromAttribute(targetElement, "lid");
            currentApp.state.hoveredInsertLayoutBaseId = hoveredLayoutId;
            var tempBox = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                return l.LayoutBaseId == hoveredLayoutId;
            });
            currentApp.state.backupSortOrder = tempBox.LayoutSortOrderKey;
            tempBox.LayoutSortOrderKey = exports.VERY_HIGH_VALUE;
            var selectedBoxOrRow = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                return l.LayoutBaseId == currentApp.state.selectedLayoutBaseId;
            });
            if (selectedBoxOrRow.LayoutType === CaliforniaGenerated_1.LayoutType.Box) {
                selectedBoxOrRow.PlacedInBoxBoxes.push(tempBox);
            } else if (selectedBoxOrRow.LayoutType === CaliforniaGenerated_1.LayoutType.Row) {
                var tempNewOwnerRow = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (v) {
                    return v.CaliforniaViewId == currentApp.pagePreviewVM.activeCaliforniaViewId;
                }).PlacedLayoutRows.find(function (ro) {
                    return ro.LayoutBaseId == currentApp.state.selectedLayoutBaseId;
                });
                tempNewOwnerRow.AllBoxesBelowRow.push(tempBox);
                currentApp.state.backupOwnerRowId = tempBox.BoxOwnerRowId;
                tempBox.BoxOwnerRowId = tempNewOwnerRow.LayoutBaseId;
                tempBox.BoxOwnerRow = tempNewOwnerRow;
                currentApp.state.backupPlacedBoxInBoxId = tempBox.PlacedBoxInBoxId;
                tempBox.PlacedBoxInBoxId = undefined;
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
            currentApp.router.setActiveCaliforniaView(currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (v) {
                return v.CaliforniaViewId == currentApp.pagePreviewVM.activeCaliforniaViewId;
            }));
        };
        this.insertBoxHidePreviewHandler = function (evt) {
            var selectedBoxOrRow = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                return l.LayoutBaseId == currentApp.state.selectedLayoutBaseId;
            });
            if (selectedBoxOrRow.LayoutType === CaliforniaGenerated_1.LayoutType.Box) {
                var layoutBox = selectedBoxOrRow;
                var tempBoxIndex = layoutBox.PlacedInBoxBoxes.findIndex(function (b) {
                    return b.LayoutBaseId == currentApp.state.hoveredInsertLayoutBaseId;
                });
                if (tempBoxIndex != -1) {
                    var tempBox = layoutBox.PlacedInBoxBoxes.splice(tempBoxIndex, 1)[0];
                    if (currentApp.state.backupSortOrder !== undefined) {
                        tempBox.LayoutSortOrderKey = currentApp.state.backupSortOrder;
                    } else {
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                    }
                    currentApp.state.backupSortOrder = undefined;
                    currentApp.state.hoveredInsertLayoutBaseId = 0;
                } else {
                    console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                }
            } else if (selectedBoxOrRow.LayoutType === CaliforniaGenerated_1.LayoutType.Row) {
                var layoutRow = selectedBoxOrRow;
                var tempBoxIndex = layoutRow.AllBoxesBelowRow.findIndex(function (b) {
                    return b.LayoutBaseId == currentApp.state.hoveredInsertLayoutBaseId;
                });
                if (tempBoxIndex != -1) {
                    var tempBox = layoutRow.AllBoxesBelowRow.splice(tempBoxIndex, 1)[0];
                    if (currentApp.state.backupSortOrder !== undefined) {
                        tempBox.LayoutSortOrderKey = currentApp.state.backupSortOrder;
                    } else {
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                    }
                    if (currentApp.state.backupOwnerRowId !== undefined) {
                        var backupRow = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (r) {
                            return r.LayoutBaseId == currentApp.state.backupOwnerRowId;
                        });
                        tempBox.BoxOwnerRowId = currentApp.state.backupOwnerRowId;
                        tempBox.BoxOwnerRow = backupRow;
                        if (currentApp.state.backupPlacedBoxInBoxId !== undefined) {
                            tempBox.PlacedBoxInBoxId = currentApp.state.backupPlacedBoxInBoxId;
                        }
                        currentApp.state.backupOwnerRowId = undefined;
                        currentApp.state.backupPlacedBoxInBoxId = undefined;
                    }
                    currentApp.state.backupSortOrder = undefined;
                    currentApp.state.hoveredInsertLayoutBaseId = 0;
                } else {
                    console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                }
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
            currentApp.router.setActiveCaliforniaView(currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (v) {
                return v.CaliforniaViewId == currentApp.pagePreviewVM.activeCaliforniaViewId;
            }));
        };
        this.insertAtomShowPreviewHandler = function (evt) {
            var targetElement = evt.target;
            var hoveredLayoutId = CaliforniaApp_1.parseIntFromAttribute(targetElement, "lid");
            currentApp.state.hoveredInsertLayoutBaseId = hoveredLayoutId;
            var tempAtom = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                return l.LayoutBaseId == hoveredLayoutId;
            });
            currentApp.state.backupSortOrder = tempAtom.LayoutSortOrderKey;
            tempAtom.LayoutSortOrderKey = exports.VERY_HIGH_VALUE;
            var layoutBox = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                return l.LayoutBaseId == currentApp.state.selectedLayoutBaseId;
            });
            layoutBox.PlacedInBoxAtoms.push(tempAtom);
        };
        this.insertAtomHidePreviewHandler = function (evt) {
            var layoutBox = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                return l.LayoutBaseId == currentApp.state.selectedLayoutBaseId;
            });
            var tempAtomIndex = layoutBox.PlacedInBoxAtoms.findIndex(function (a) {
                return a.LayoutBaseId == currentApp.state.hoveredInsertLayoutBaseId;
            });
            if (tempAtomIndex != -1) {
                var tempAtom = layoutBox.PlacedInBoxAtoms.splice(tempAtomIndex, 1)[0];
                if (currentApp.state.backupSortOrder !== undefined) {
                    tempAtom.LayoutSortOrderKey = currentApp.state.backupSortOrder;
                } else {
                    console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                }
                currentApp.state.backupSortOrder = undefined;
                currentApp.state.hoveredInsertLayoutBaseId = 0;
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
        };
        this.insertSelectedLayoutBoxIntoBoxOrRowClickHandler = function (evt) {
            if (_this.viewModel.currentSecondaryPopupMode === PropertyBarVM_1.PopupSecondaryMode.SelectBoxIntoBox) {
                var layoutId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
                var targetLayoutId = currentApp.state.selectedLayoutBaseId;
                currentApp.controller.CreateLayoutBoxForBoxOrRowJson(targetLayoutId, layoutId).done(function (data) {
                    currentApp.router.updateData(data);
                });
                currentApp.state.lastCommand = CaliforniaGenerated_1.CaliforniaEvent.CreateLayoutBoxForBoxOrRow;
                currentApp.state.lastCaliforniaEventData = [currentApp.state.selectedLayoutBaseId, layoutId];
            } else if (_this.viewModel.currentSecondaryPopupMode === PropertyBarVM_1.PopupSecondaryMode.SelectBoxIntoBoxAtomInPlace) {
                currentApp.controller.CreateLayoutBoxForAtomInPlaceJson(currentApp.state.selectedLayoutBaseId, CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid")).done(function (data) {
                    currentApp.router.updateData(data);
                });
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
            _this.currentPropertyBar.closePopup();
        };
        this.cancelInsertLayoutBoxIntoBoxClickHandler = function (evt) {
            _this.currentPropertyBar.closePopup();
        };
        this.moveLayoutMoleculeIntoLayoutMolecule = function () {
            currentApp.controller.MoveLayoutMoleculeIntoLayoutMoleculeJson(currentApp.state.preselectedLayoutBaseId, currentApp.state.selectedLayoutBaseId).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.closePopup();
        };
        this.moveLayoutMoleculeBeforeLayoutMolecule = function () {
            currentApp.controller.MoveLayoutMoleculeNextToLayoutMoleculeJson(currentApp.state.preselectedLayoutBaseId, currentApp.state.selectedLayoutBaseId, true).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.closePopup();
        };
        this.syncLayoutMoleculeStylesImitatingReferenceLayout = function () {
            currentApp.controller.SyncLayoutStylesImitatingReferenceLayoutJson(currentApp.state.selectedLayoutBaseId, currentApp.state.preselectedLayoutBaseId).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.closePopup();
        };
        this.moveStyleAtomToResponsiveDevicePopup = function () {
            var thisPopupMode = PropertyBarVM_1.PopupMode.MoveStyleAtom;
            var isPopupVisible = _this.viewModel.currentPopupMode === thisPopupMode;
            var isDataLoaded = currentApp.clientData.CaliforniaProject !== undefined && currentApp.clientData.CaliforniaProject.ResponsiveDevices !== undefined;
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[thisPopupMode], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelMoveStyleAtomClickHandler },
                        "x"
                    )
                ),
                isDataLoaded ? currentApp.clientData.CaliforniaProject.ResponsiveDevices.map(function (responsiveDevice) {
                    var responsiveDeviceIdString = responsiveDevice.ResponsiveDeviceId.toString();
                    var isSelectedResponsiveDeviceInPropertyBar = _this.currentPropertyBar.viewModel.selectedResponsiveDeviceId == responsiveDevice.ResponsiveDeviceId;
                    return h(
                        "div",
                        { key: responsiveDeviceIdString },
                        !isSelectedResponsiveDeviceInPropertyBar ? h(
                            "button",
                            { key: "a", rid: responsiveDeviceIdString, onclick: _this.currentPropertyBar.moveStyleAtomToResponsiveDeviceClickHandler },
                            responsiveDevice.NameShort
                        ) : h(
                            "button",
                            { disabled: true, key: "a0", rid: responsiveDeviceIdString, onclick: _this.currentPropertyBar.moveStyleAtomToResponsiveDeviceClickHandler },
                            responsiveDevice.NameShort
                        )
                    );
                }) : undefined
            );
        };
        this.moveStyleAtomToResponsiveDeviceClickHandler = function (evt) {
            var targetResponsiveDeviceId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "rid");
            currentApp.controller.MoveStyleAtomToResponsiveDeviceJson(_this.currentPropertyBar.viewModel.selectedStyleAtomIdForPopup, targetResponsiveDeviceId).done(function (data) {
                currentApp.router.updateData(data);
                _this.currentPropertyBar.viewModel.selectedResponsiveDeviceId = targetResponsiveDeviceId;
            });
            _this.currentPropertyBar.viewModel.selectedStyleAtomIdForPopup = 0;
            _this.currentPropertyBar.closePopup();
        };
        this.cancelMoveStyleAtomClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.selectedStyleAtomIdForPopup = 0;
            _this.currentPropertyBar.closePopup();
        };
        this.renderAllCssPropertiesPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.AllCssProperties;
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.AllCssProperties], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px", "height": "300px", "overflow": "scroll" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelUpdateCssPropertylickHandler },
                        "x"
                    )
                ),
                currentApp.clientData.AllCssProperties.map(function (prop) {
                    var isPropertyUnmapped = true;
                    var isPropertyVisible = false;
                    if (_this.currentPropertyBar.viewModel.selectedStyleAtomId != 0 && currentApp.clientData.CaliforniaProject !== undefined && currentApp.clientData.CaliforniaProject.StyleAtoms !== undefined) {
                        var targetAtom = currentApp.clientData.CaliforniaProject.StyleAtoms.find(function (s) {
                            return s.StyleAtomId == _this.currentPropertyBar.viewModel.selectedStyleAtomId;
                        });
                        if (targetAtom !== undefined && targetAtom.AppliedValues !== undefined) {
                            isPropertyVisible = currentApp.clientData.StyleAtomCssPropertyMapping[CaliforniaGenerated_1.StyleAtomType[targetAtom.StyleAtomType]].findIndex(function (p) {
                                return p === prop;
                            }) != -1;
                            isPropertyUnmapped = targetAtom.AppliedValues.findIndex(function (v) {
                                return v.CssProperty === prop;
                            }) == -1;
                        }
                    }
                    return isPropertyVisible ? h(
                        "div",
                        { key: prop },
                        prop,
                        isPropertyUnmapped ? h(
                            "button",
                            { key: "a0", role: "button", cid: prop, onclick: _this.currentPropertyBar.setSelectedCssPropertyClickHandler },
                            "\u2714"
                        ) : h(
                            "button",
                            { disabled: true, key: "a1", role: "button", cid: prop, onclick: _this.currentPropertyBar.setSelectedCssPropertyClickHandler },
                            "\u2714"
                        )
                    ) : undefined;
                })
            );
        };
        this.cancelUpdateCssPropertylickHandler = function (evt) {
            _this.viewModel.currentPopupMode = PropertyBarVM_1.PopupMode.AddCssProperty;
        };
        this.showAllCssPropertiesClickHandler = function (evt) {
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.AllCssProperties);
        };
        this.setSelectedCssPropertyClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssPropertyName = CaliforniaApp_1.parseStringFromAttribute(evt.target, "cid");
            _this.currentPropertyBar.saveCssPropertyForAtom();
        };
        this.saveCssPropertyForAtomClickHandler = function (evt) {
            _this.currentPropertyBar.saveCssPropertyForAtom();
        };
        this.saveCssPropertyForAtom = function () {
            currentApp.controller.CreateStyleValueForAtomJson(_this.currentPropertyBar.viewModel.selectedStyleAtomId, _this.currentPropertyBar.viewModel.tempCssPropertyName).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.resetTempCssPropertyState();
        };
        this.cancelAddCssPropertyForAtomClickHandler = function (evt) {
            _this.currentPropertyBar.resetTempCssPropertyState();
        };
        this.resetTempCssPropertyState = function () {
            _this.currentPropertyBar.viewModel.tempCssPropertyName = "";
            _this.currentPropertyBar.viewModel.tempCssValue = "";
            _this.currentPropertyBar.viewModel.selectedStyleAtomId = 0;
            _this.currentPropertyBar.viewModel.selectedStyleValueId = 0;
            _this.currentPropertyBar.viewModel.selectedStyleQuantumId = 0;
            _this.currentPropertyBar.closePopup();
        };
        this.cssPropertyNameInputHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssPropertyName = evt.target.value;
        };
        this.renderUpdateCssValuePopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.UpdateCssValue || _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.MatchingQuantums;
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.UpdateCssValue], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.saveUpdatedCssValueClickHandler },
                        "\u2714"
                    ),
                    h(
                        "button",
                        { key: "b", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelUpdateCssValueClickHandler },
                        "x"
                    )
                ),
                h(
                    "div",
                    null,
                    h("input", { key: "-1", value: _this.currentPropertyBar.viewModel.tempCssValue, oninput: _this.currentPropertyBar.cssValueInputHandler }),
                    h(
                        "button",
                        { key: "a", role: "button", onclick: _this.currentPropertyBar.showMatchingQuantumsClickHandler },
                        "?"
                    ),
                    h(
                        "button",
                        { key: "b", role: "button", onclick: _this.currentPropertyBar.showSuggestedCssValuesClickHandler },
                        "??"
                    ),
                    h(
                        "button",
                        { key: "c", role: "button", onclick: _this.currentPropertyBar.setTempCssToZeroClickHandler },
                        "0"
                    ),
                    h(
                        "button",
                        { key: "d", role: "button", onclick: _this.currentPropertyBar.setTempCssToNoneClickHandler },
                        "none"
                    ),
                    h(
                        "button",
                        { key: "e", role: "button", onclick: _this.currentPropertyBar.setTempCssToNullClickHandler },
                        "null"
                    ),
                    h(
                        "button",
                        { key: "f", role: "button", onclick: _this.currentPropertyBar.setTempCssToAutoClickHandler },
                        "auto"
                    ),
                    _this.currentPropertyBar.viewModel.lastUsedTempCssValue !== "" ? h(
                        "button",
                        { key: "g", role: "button", onclick: _this.currentPropertyBar.setTempCssAppendLastUsedClickHandler },
                        "+",
                        _this.currentPropertyBar.viewModel.lastUsedTempCssValue.length > 10 ? _this.currentPropertyBar.viewModel.lastUsedTempCssValue.substring(0, 10) + "..." : _this.currentPropertyBar.viewModel.lastUsedTempCssValue
                    ) : undefined
                )
            );
        };
        this.showSuggestedCssValuesClickHandler = function (evt) {
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.SuggestedCssValues);
        };
        this.setTempCssToZeroClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssValue = "0";
        };
        this.setTempCssToNullClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssValue = "null";
        };
        this.setTempCssToNoneClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssValue = "none";
        };
        this.setTempCssToAutoClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssValue = "auto";
        };
        this.setTempCssAppendLastUsedClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssValue = _this.currentPropertyBar.viewModel.tempCssValue + _this.currentPropertyBar.viewModel.lastUsedTempCssValue;
        };
        this.renderUpdateCssQuantumPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.UpdateCssQuantum;
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.UpdateCssQuantum], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.saveUpdatedCssQuantumClickHandler },
                        "\u2714"
                    ),
                    h(
                        "button",
                        { key: "b", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelUpdateCssQuantumClickHandler },
                        "x"
                    )
                ),
                h(
                    "div",
                    null,
                    h("input", { key: "-1", value: _this.currentPropertyBar.viewModel.tempCssValue, oninput: _this.currentPropertyBar.cssValueInputHandler })
                )
            );
        };
        this.showMatchingQuantumsClickHandler = function (evt) {
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.MatchingQuantums);
        };
        this.saveUpdatedCssQuantumClickHandler = function (evt) {
            currentApp.controller.UpdateStyleQuantumJson(_this.currentPropertyBar.viewModel.selectedStyleQuantumId, _this.currentPropertyBar.viewModel.tempCssValue).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.viewModel.lastUsedTempCssValue = _this.currentPropertyBar.viewModel.tempCssValue;
            _this.currentPropertyBar.resetTempCssPropertyState();
        };
        this.cancelUpdateCssQuantumClickHandler = function (evt) {
            _this.currentPropertyBar.resetTempCssPropertyState();
        };
        this.saveUpdatedCssValueFromAttrClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssValue = CaliforniaApp_1.parseStringFromAttribute(evt.target, "fid");
            _this.currentPropertyBar.saveUpdatedCssValue();
        };
        this.saveUpdatedCssValueClickHandler = function (evt) {
            _this.currentPropertyBar.saveUpdatedCssValue();
        };
        this.saveUpdatedCssValue = function () {
            currentApp.controller.UpdateStyleValueJson(_this.currentPropertyBar.viewModel.selectedStyleValueId, _this.currentPropertyBar.viewModel.tempCssValue).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.viewModel.lastUsedTempCssValue = _this.currentPropertyBar.viewModel.tempCssValue;
            _this.currentPropertyBar.resetTempCssPropertyState();
        };
        this.cancelUpdateCssValueClickHandler = function (evt) {
            _this.currentPropertyBar.resetTempCssPropertyState();
        };
        this.cssValueInputHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssValue = evt.target.value;
        };
        this.cssValueForInteractionInputHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCssValueForInteraction = evt.target.value;
        };
        this.renderSelectInteractionTargetPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.SelectInteractionTarget;
            var renderedOptions = [];
            if (isPopupVisible === true) {
                currentApp.clientData.CaliforniaProject.LayoutMolecules.map(function (m) {
                    var layoutBaseIdString = m.LayoutBaseId.toString();
                    renderedOptions.push(h(
                        "div",
                        { key: layoutBaseIdString, styles: { "flex": "0 0 100%", "width": "100%", "min-width": "100%" } },
                        "layout #",
                        layoutBaseIdString,
                        " ",
                        h(
                            "button",
                            { key: "a", role: "button", bid: layoutBaseIdString, onclick: _this.currentPropertyBar.selectLayoutBaseForInteractionTargetClickHandler },
                            "\u2714"
                        )
                    ));
                });
            }
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.SelectInteractionTarget], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px" } },
                h(
                    "div",
                    { key: "0", styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelSelectInteractionTargetClickHandler },
                        "x"
                    )
                ),
                h(
                    "div",
                    { key: "1", styles: { "display": "flex", "flex-flow": "row wrap" } },
                    renderedOptions
                )
            );
        };
        this.renderEditUserDefinedCssPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.EditUserDefinedCss;
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.EditUserDefinedCss], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px" } },
                h(
                    "div",
                    { key: "0", styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.confirmEditUserDefinedCssClickHandler },
                        "\u2714"
                    ),
                    h(
                        "button",
                        { key: "b", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelEditUserDefinedCssClickHandler },
                        "x"
                    )
                ),
                h(
                    "div",
                    { key: "1" },
                    h("textarea", { value: _this.currentPropertyBar.viewModel.tempUserDefinedCss, oninput: _this.currentPropertyBar.userDefinedCssInputHandler })
                )
            );
        };
        this.userDefinedCssInputHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempUserDefinedCss = evt.target.value;
        };
        this.updateUserDefinedCss = function () {
            if (_this.currentPropertyBar.viewModel.tempUserDefinedCss !== undefined) {
                currentApp.controller.UpdateUserDefinedCssForViewJson(currentApp.state.preselectedCaliforniaViewId, _this.currentPropertyBar.viewModel.tempUserDefinedCss).done(function (data) {
                    return currentApp.router.updateData(data);
                });
                _this.currentPropertyBar.cancelEditUserDefinedCss();
            }
        };
        this.cancelEditUserDefinedCssClickHandler = function (evt) {
            _this.currentPropertyBar.cancelEditUserDefinedCss();
        };
        this.confirmEditUserDefinedCssClickHandler = function (evt) {
            _this.currentPropertyBar.updateUserDefinedCss();
        };
        this.cancelEditUserDefinedCss = function () {
            _this.currentPropertyBar.viewModel.tempUserDefinedCss = "";
            currentApp.state.preselectedCaliforniaViewId = 0;
            _this.currentPropertyBar.closePopup();
        };
        this.selectLayoutBaseForInteractionTargetClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.selectedLayoutBaseIdForFilter = CaliforniaApp_1.parseIntFromAttribute(evt.target, "bid");
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.SelectInteractionTargetLayoutFilter);
        };
        this.cancelSelectInteractionTargetClickHandler = function (evt) {
            _this.currentPropertyBar.closePopup();
            _this.currentPropertyBar.viewModel.selectedLayoutBaseIdForFilter = 0;
            _this.currentPropertyBar.viewModel.selectedLayoutStyleInteraction = 0;
        };
        this.renderSelectInteractionTargetLayoutFilterPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.SelectInteractionTargetLayoutFilter;
            var renderedOptions = [];
            if (isPopupVisible === true) {
                currentApp.clientData.CaliforniaProject.StyleValues.map(function (v) {
                    var styleAtom = currentApp.clientData.CaliforniaProject.StyleAtoms.find(function (a) {
                        return a.AppliedValues.findIndex(function (map) {
                            return map.StyleValueId == v.StyleValueId;
                        }) != -1;
                    });
                    var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                        return m.MappedStyleAtoms.findIndex(function (map) {
                            return map.StyleMoleculeAtomMappingId == styleAtom.MappedToMoleculeId;
                        }) != -1;
                    });
                    if (styleMolecule.StyleForLayoutId == _this.currentPropertyBar.viewModel.selectedLayoutBaseIdForFilter) {
                        var styleValueIdString = v.StyleValueId.toString();
                        renderedOptions.push(h(
                            "div",
                            { key: styleValueIdString, styles: { "flex": "0 0 100%", "width": "100%", "min-width": "100%" } },
                            "value #",
                            styleValueIdString,
                            ": ",
                            v.CssProperty,
                            ":",
                            v.CssValue,
                            " ",
                            h(
                                "button",
                                { key: "a", role: "button", vid: styleValueIdString, onclick: _this.currentPropertyBar.selectStyleValueForInteractionTargetClickHandler },
                                "\u2714"
                            )
                        ));
                    }
                });
            }
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.SelectInteractionTargetLayoutFilter], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px" } },
                h(
                    "div",
                    { key: "0", styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelSelectStyleValueForInteractionTargetClickHandler },
                        "x"
                    )
                ),
                h(
                    "div",
                    { key: "1", styles: { "display": "flex", "flex-flow": "row wrap" } },
                    renderedOptions
                )
            );
        };
        this.selectStyleValueForInteractionTargetClickHandler = function (evt) {
            _this.currentPropertyBar.closePopup();
            currentApp.controller.CreateStyleValueInteractionJson(_this.currentPropertyBar.viewModel.selectedLayoutStyleInteraction, CaliforniaApp_1.parseIntFromAttribute(evt.target, "vid"), _this.currentPropertyBar.viewModel.tempCssValueForInteraction).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.cancelSelectStyleValueForInteractionTargetClickHandler = function (evt) {
            _this.currentPropertyBar.closePopup();
            _this.currentPropertyBar.viewModel.selectedLayoutBaseIdForFilter = 0;
            _this.currentPropertyBar.viewModel.selectedLayoutStyleInteraction = 0;
        };
        this.renderMatchingQuantumsPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.MatchingQuantums;
            var renderedOptions = [];
            if (isPopupVisible === true) {
                currentApp.clientData.CaliforniaProject.StyleQuantums.map(function (quantum) {
                    var isMatchingProperty = quantum.CssProperty === _this.currentPropertyBar.viewModel.tempCssPropertyName;
                    if (isMatchingProperty === true) {
                        renderedOptions.push(h(
                            "div",
                            { key: quantum.StyleQuantumId },
                            quantum.Name,
                            " = ",
                            quantum.CssValue,
                            " ",
                            h(
                                "button",
                                { key: "a", role: "button", qid: quantum.StyleQuantumId.toString(), onclick: _this.currentPropertyBar.setQuantumOnAtomClickHandler },
                                "\u2714"
                            )
                        ));
                    }
                });
                if (renderedOptions.length == 0) {
                    renderedOptions.push(h(
                        "div",
                        { key: "0" },
                        "No quantums available."
                    ));
                }
            }
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.MatchingQuantums], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px", "height": "300px", "overflow": "scroll" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelSelectMatchingCssQuantumClickHandler },
                        "x"
                    )
                ),
                renderedOptions
            );
        };
        this.cancelSelectMatchingCssQuantumClickHandler = function (evt) {
            _this.viewModel.currentPopupMode = PropertyBarVM_1.PopupMode.UpdateCssValue;
        };
        this.renderSuggestedCssValuesPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.SuggestedCssValues;
            var renderedOptions = [];
            if (isPopupVisible === true) {
                if (_this.currentPropertyBar.viewModel.tempCssPropertyName === "font-family") {
                    currentApp.clientData.ThirdPartyFonts.map(function (family, index) {
                        renderedOptions.push(h(
                            "div",
                            { key: index },
                            "Google Font: ",
                            family,
                            " ",
                            h(
                                "button",
                                { key: "a", role: "button", fid: family, onclick: _this.currentPropertyBar.saveUpdatedCssValueFromAttrClickHandler },
                                "\u2714"
                            )
                        ));
                    });
                }
                if (renderedOptions.length == 0) {
                    renderedOptions.push(h(
                        "div",
                        { key: "0" },
                        "No suggestions available."
                    ));
                }
            }
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.SuggestedCssValues], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px", "height": "300px", "overflow": "scroll" } },
                h(
                    "div",
                    { styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "a", role: "button", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelSuggestedCssValuesClickHandler },
                        "x"
                    )
                ),
                renderedOptions
            );
        };
        this.cancelSuggestedCssValuesClickHandler = function (evt) {
            _this.currentPropertyBar.closePopup();
        };
        this.setQuantumOnAtomClickHandler = function (evt) {
            var quantumId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "qid");
            currentApp.controller.ApplyStyleQuantumToAtomJson(_this.currentPropertyBar.viewModel.selectedStyleAtomId, quantumId).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.resetTempCssPropertyState();
            _this.currentPropertyBar.viewModel.lastUsedTempCssValue = currentApp.clientData.CaliforniaProject.StyleQuantums.find(function (q) {
                return q.StyleQuantumId == quantumId;
            }).CssValue;
        };
        this.renderStyleMoleculeArray = function (propertyBar) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.StyleMoleculeId;
            }, function createSectionTarget(source) {
                var sourceStyleMoleculeIdString = source.StyleMoleculeId.toString();
                return {
                    renderMaquette: function renderMaquette() {
                        return h(
                            "div",
                            { key: sourceStyleMoleculeIdString, exitAnimation: propertyBar.styleElementExitAnimation },
                            h(
                                "p",
                                null,
                                "(#",
                                sourceStyleMoleculeIdString,
                                ")",
                                source.Name
                            ),
                            h(
                                "button",
                                { key: "a", role: "button", mid: sourceStyleMoleculeIdString, onclick: propertyBar.selectStyleMoleculeClickHandler },
                                "Edit"
                            )
                        );
                    },
                    update: function update(updatedSource) {
                        sourceStyleMoleculeIdString = updatedSource.StyleMoleculeId.toString();
                        source = updatedSource;
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.selectStyleMoleculeClickHandler = function (evt) {
            _this.nextExceptLastPropertyBar.viewModel.selectedStyleMoleculeId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "mid");
            _this.nextExceptLastPropertyBar.viewModel.selectedStateModifier = "";
            _this.nextExceptLastPropertyBar.viewModel.currentPropertyBarMode = PropertyBarVM_1.PropertyBarMode.StyleMolecule;
        };
        this.showEditUserDefinedCssClickHandler = function (evt) {
            var californiaViewId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "vid");
            var californiaViewCss = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (v) {
                return v.CaliforniaViewId == californiaViewId;
            }).UserDefinedCss;
            _this.currentPropertyBar.viewModel.tempUserDefinedCss = californiaViewCss !== undefined ? californiaViewCss : "";
            currentApp.state.preselectedCaliforniaViewId = californiaViewId;
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.EditUserDefinedCss);
        };
        this.highlightLayoutBaseClickHandler = function (evt) {
            var targetLayoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            if (currentApp.state.highlightedLayoutBaseId != targetLayoutBaseId) {
                currentApp.state.highlightedLayoutBaseId = targetLayoutBaseId;
            } else {
                currentApp.state.highlightedLayoutBaseId = 0;
            }
        };
        this.renderStyleQuantumArray = function (propertyBar) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.StyleQuantumId;
            }, function createSectionTarget(source) {
                var sourceIdString = source.StyleQuantumId.toString();
                return {
                    renderMaquette: function renderMaquette() {
                        return h(
                            "div",
                            { key: sourceIdString, exitAnimation: propertyBar.styleElementExitAnimation },
                            h(
                                "p",
                                { key: "0", styles: { "margin": "0" } },
                                "(#",
                                sourceIdString,
                                ")",
                                source.Name,
                                ": ",
                                source.CssProperty,
                                " => ",
                                source.CssValue
                            ),
                            h(
                                "button",
                                { key: "a", role: "button", qid: sourceIdString, onclick: propertyBar.duplicateStyleQuantumClickHandler },
                                "DD"
                            ),
                            source.IsDeletable ? h(
                                "button",
                                { key: "b0", role: "button", qid: sourceIdString, onclick: propertyBar.deleteStyleQuantumClickHandler },
                                "X"
                            ) : h(
                                "button",
                                { disabled: true, key: "b1", role: "button" },
                                "X"
                            ),
                            h(
                                "button",
                                { key: "c", role: "button", qid: sourceIdString, onclick: propertyBar.updateCssQuantumClickHandler },
                                "Edit"
                            )
                        );
                    },
                    update: function update(updatedSource) {
                        sourceIdString = updatedSource.StyleQuantumId.toString();
                        source = updatedSource;
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.updateCssQuantumClickHandler = function (evt) {
            var styleQuantumId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "qid");
            _this.currentPropertyBar.viewModel.selectedStyleQuantumId = styleQuantumId;
            var targetStyleQuantum = currentApp.clientData.CaliforniaProject.StyleQuantums.find(function (val) {
                return val.StyleQuantumId == styleQuantumId;
            });
            _this.currentPropertyBar.viewModel.tempCssValue = targetStyleQuantum.CssValue;
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.UpdateCssQuantum);
        };
        this.deleteStyleQuantumClickHandler = function (evt) {
            currentApp.controller.DeleteStyleQuantumJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "qid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.duplicateStyleQuantumClickHandler = function (evt) {
            currentApp.controller.DuplicateStyleQuantumJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "qid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.styleElementExitAnimation = function (domNode, removeElement, properties) {
            domNode.style.overflow = "hidden";
            velocity.animate(domNode, { opacity: 0.5, height: 0 }, { duration: 100, easing: "ease-out", complete: removeElement });
        };
        this.renderLayoutMoleculeArray = function (propertyBar) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.LayoutBaseId;
            }, function createSectionTarget(source) {
                var sourceLayoutBaseIdString = source.LayoutBaseId.toString();
                var sourceStyleMoleculeIdString = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                    return m.StyleForLayoutId == source.LayoutBaseId;
                }).StyleMoleculeId.toString();
                var layoutControlButtonStyles = {
                    "margin-right": "5px"
                };
                return {
                    renderMaquette: function renderMaquette() {
                        var description = "";
                        if (source.LayoutType === CaliforniaGenerated_1.LayoutType.Atom) {
                            var sourceLayoutAtom = source;
                            var textContentString = "";
                            if (sourceLayoutAtom.HostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Text) {
                                textContentString = sourceLayoutAtom.HostedContentAtom.TextContent;
                            } else if (sourceLayoutAtom.HostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Link) {
                                textContentString = sourceLayoutAtom.HostedContentAtom.Url;
                            } else {
                                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                            }
                            description = textContentString.length > 20 ? textContentString.substring(0, 20) + "..." : textContentString;
                            description += " in box #" + source.PlacedAtomInBoxId;
                        }
                        return h(
                            "div",
                            { key: sourceLayoutBaseIdString },
                            " ",
                            CaliforniaGenerated_1.LayoutType[source.LayoutType].toString(),
                            " #",
                            sourceLayoutBaseIdString,
                            " ",
                            description,
                            h(
                                "button",
                                { key: "a", role: "button", lid: sourceLayoutBaseIdString, onclick: propertyBar.selectLayoutBaseClickHandler, styles: layoutControlButtonStyles },
                                "?"
                            ),
                            h(
                                "button",
                                { key: "b", role: "button", mid: sourceStyleMoleculeIdString, onclick: propertyBar.selectStyleMoleculeClickHandler, styles: layoutControlButtonStyles },
                                "S"
                            ),
                            h(
                                "button",
                                { key: "c", role: "button", lid: sourceLayoutBaseIdString, onclick: propertyBar.deleteLayoutBaseClickHandler, styles: layoutControlButtonStyles },
                                "X"
                            )
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        sourceLayoutBaseIdString = source.LayoutBaseId.toString();
                        var sourceStyleMoleculeIdString = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                            return m.StyleForLayoutId == source.LayoutBaseId;
                        }).StyleMoleculeId.toString();
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.renderCaliforniaViewArray = function (propertyBar) {
            return maquette.createMapping(function getSectionSourceKey(source) {
                return source.CaliforniaViewId;
            }, function createSectionTarget(source) {
                var sourceCaliforniaViewIdString = source.CaliforniaViewId.toString();
                return {
                    renderMaquette: function renderMaquette() {
                        var isDeleteButtonEnabled = source.PlacedLayoutRows.length == 0;
                        return h(
                            "div",
                            { key: sourceCaliforniaViewIdString },
                            source.Name,
                            " View #",
                            sourceCaliforniaViewIdString,
                            h(
                                "button",
                                { key: "a", role: "button", vid: sourceCaliforniaViewIdString, onclick: propertyBar.selectCaliforniaViewClickHandler },
                                ":)"
                            ),
                            !source.IsInternal && source.CaliforniaViewId != currentApp.pagePreview.viewModel.activeCaliforniaViewId ? h(
                                "button",
                                { key: "b", role: "button", vid: sourceCaliforniaViewIdString, onclick: propertyBar.activateCaliforniaViewClickHandler },
                                "\u2714"
                            ) : undefined,
                            ": ",
                            source.IsInternal ? "internal" : undefined,
                            " ",
                            source.Name,
                            " hosted by ",
                            source.HostedByLayoutMappings.length,
                            " layouts",
                            h(
                                "button",
                                { key: "c", role: "button", mid: source.SpecialStyleViewStyleMoleculeIdString, onclick: propertyBar.selectStyleMoleculeClickHandler },
                                "style #",
                                source.SpecialStyleViewStyleMoleculeIdString
                            ),
                            h(
                                "button",
                                { key: "d", role: "button", mid: source.SpecialStyleBodyStyleMoleculeIdString, onclick: propertyBar.selectStyleMoleculeClickHandler },
                                "body style #",
                                source.SpecialStyleBodyStyleMoleculeIdString
                            ),
                            h(
                                "button",
                                { key: "e", role: "button", mid: source.SpecialStyleHtmlStyleMoleculeIdString, onclick: propertyBar.selectStyleMoleculeClickHandler },
                                "HTML style #",
                                source.SpecialStyleHtmlStyleMoleculeIdString
                            ),
                            h(
                                "button",
                                { key: "f", role: "button", vid: sourceCaliforniaViewIdString, onclick: propertyBar.showEditUserDefinedCssClickHandler },
                                "CSS"
                            ),
                            isDeleteButtonEnabled ? h(
                                "button",
                                { key: "g", role: "button", vid: sourceCaliforniaViewIdString, onclick: propertyBar.deleteCaliforniaViewClickHandler },
                                "X"
                            ) : h(
                                "button",
                                { disabled: true, key: "g0", role: "button", onclick: propertyBar.deleteCaliforniaViewClickHandler },
                                "X"
                            )
                        );
                    },
                    update: function update(updatedSource) {
                        source = updatedSource;
                        sourceCaliforniaViewIdString = source.CaliforniaViewId.toString();
                    }
                };
            }, function updateSectionTarget(updatedSource, target) {
                target.update(updatedSource);
            });
        };
        this.logoutPopupClickHandler = function (evt) {
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.ShareCaliforniaProject);
        };
        this.renderShareCaliforniaProjectPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.ShareCaliforniaProject;
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.ShareCaliforniaProject], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px" } },
                h(
                    "div",
                    { key: "0", styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "b", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelShareCaliforniaProjectClickHandler },
                        "x"
                    )
                ),
                h(
                    "div",
                    { key: "1", styles: { "display": "flex", "flex-flow": "row wrap" } },
                    h(
                        "p",
                        { key: "a", styles: { "flex": "0 0 100%", "width": "100%", "min-width": "100%" } },
                        currentApp.clientData.UrlToReadOnly
                    ),
                    "Bookmark! Clear browser history!",
                    h(
                        "button",
                        { key: "c", type: "button", onclick: _this.currentPropertyBar.logoutClickHandler, styles: { "flex": "0 0 10%", "width": "10%", "min-width": "10%" } },
                        "\uD83D\uDD12"
                    ),
                    h(
                        "button",
                        { key: "d", type: "button", onclick: _this.currentPropertyBar.tokyoClickHandler, styles: { "flex": "0 0 10%", "width": "10%", "min-width": "10%" } },
                        "TOKYO"
                    )
                )
            );
        };
        this.tokyoClickHandler = function (evt) {
            window.location.assign(window.location.origin + "/tokyo/");
        };
        this.cancelShareCaliforniaProjectClickHandler = function (evt) {
            _this.currentPropertyBar.closePopup();
        };
        this.logoutClickHandler = function (evt) {
            currentApp.controller.LogoutAction().done(function (response) {
                window.location.assign(window.location.origin + "/california/");
            });
        };
        this.activateCaliforniaViewClickHandler = function (evt) {
            var californiaViewId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "vid");
            var userPages = currentApp.clientData.CaliforniaProject.CaliforniaViews.filter(function (view) {
                return !view.IsInternal;
            });
            var activeView = undefined;
            var activePageIndex = userPages.findIndex(function (v) {
                return v.CaliforniaViewId == californiaViewId;
            });
            if (activePageIndex > -1) {
                activeView = userPages[activePageIndex];
                currentApp.router.setActiveCaliforniaView(activeView);
                currentApp.pagePreview.resetEquationNumbersWhenModifying(true);
                _this.currentPropertyBar.viewModel.setSelectedCaliforniaView(activeView, true);
                _this.viewModel.currentPropertyBarMode = PropertyBarVM_1.PropertyBarMode.CaliforniaView;
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
        };
        this.selectLayoutBaseClickHandler = function (evt) {
            var layoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            currentApp.state.selectedLayoutBaseId = layoutBaseId;
            _this.currentPropertyBar.viewModel.currentPropertyBarMode = PropertyBarVM_1.PropertyBarMode.LayoutBase;
        };
        this.selectCaliforniaViewClickHandler = function (evt) {
            var californiaViewId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "vid");
            var userPages = currentApp.clientData.CaliforniaProject.CaliforniaViews.filter(function (view) {
                return !view.IsInternal;
            });
            var activeView = undefined;
            var activePageIndex = userPages.findIndex(function (v) {
                return v.CaliforniaViewId == californiaViewId;
            });
            if (activePageIndex > -1) {
                activeView = userPages[activePageIndex];
                if (_this.currentPropertyBar.propertyBarIndex == 0) {
                    currentApp.router.setActiveCaliforniaView(activeView);
                    currentApp.pagePreview.resetEquationNumbersWhenModifying(true);
                } else {
                    _this.currentPropertyBar.viewModel.isSyncedWithBoxTreeToTheLeft = false;
                }
                _this.currentPropertyBar.viewModel.setSelectedCaliforniaView(activeView, true);
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
            _this.currentPropertyBar.viewModel.currentPropertyBarMode = PropertyBarVM_1.PropertyBarMode.CaliforniaView;
        };
        this.deleteLayoutBaseClickHandler = function (evt) {
            if (currentApp.state.preselectedLayoutBaseId != 0) {
                return;
            }
            currentApp.state.selectedLayoutBaseId = 0;
            currentApp.controller.DeleteLayoutJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid"), false).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.deleteBelowLayoutBaseClickHandler = function (evt) {
            if (currentApp.state.preselectedLayoutBaseId != 0) {
                return;
            }
            currentApp.state.selectedLayoutBaseId = 0;
            currentApp.controller.DeleteLayoutJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid"), true).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.renderLayoutBaseControls = function () {
            if (currentApp.state.selectedLayoutBaseId == 0) {
                return undefined;
            }
            var selectedLayoutBase = currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                return l.LayoutBaseId == currentApp.state.selectedLayoutBaseId;
            });
            var layoutBaseIdString = selectedLayoutBase.LayoutBaseId.toString();
            var sourceStyleMoleculeIdString = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                return m.StyleForLayoutId == selectedLayoutBase.LayoutBaseId;
            }).StyleMoleculeId.toString();
            if (selectedLayoutBase.LayoutType === CaliforniaGenerated_1.LayoutType.Atom) {
                var selectedLayoutAtom = selectedLayoutBase;
                var isPictureContent = selectedLayoutAtom.HostedContentAtom.ContentAtomType === ContentAtomType_1.ContentAtomType.Picture;
                var pictureContentIdString = isPictureContent ? selectedLayoutAtom.HostedContentAtom.PictureContent.PictureContentId.toString() : undefined;
                return h(
                    "div",
                    { key: CaliforniaGenerated_1.LayoutType.Atom },
                    " Atom:",
                    h(
                        "button",
                        { key: "a", role: "button", mid: sourceStyleMoleculeIdString, onclick: _this.currentPropertyBar.selectStyleMoleculeClickHandler },
                        "style #",
                        sourceStyleMoleculeIdString
                    ),
                    h(
                        "button",
                        { key: "b", role: "button", lid: layoutBaseIdString, onclick: _this.currentPropertyBar.deleteLayoutBaseClickHandler },
                        "X"
                    ),
                    h(
                        "button",
                        { key: "c", role: "button", aid: layoutBaseIdString, onclick: _this.currentPropertyBar.createLayoutStyleInteraction },
                        "+ Interaction"
                    ),
                    selectedLayoutAtom.LayoutStyleInteractions.map(function (interaction) {
                        var interactionIdString = interaction.LayoutStyleInteractionId.toString();
                        return h(
                            "div",
                            { key: "i" + interactionIdString },
                            h(
                                "p",
                                { key: "0" },
                                "Interaction #",
                                interaction.LayoutStyleInteractionId
                            ),
                            h("input", { key: "1", value: _this.currentPropertyBar.viewModel.tempCssValueForInteraction, oninput: _this.currentPropertyBar.cssValueForInteractionInputHandler }),
                            _this.currentPropertyBar.viewModel.tempCssValueForInteraction !== "" ? h(
                                "button",
                                { key: "a", role: "button", lid: interactionIdString, onclick: _this.currentPropertyBar.selectInteractionTargetClickHandler },
                                "?"
                            ) : h(
                                "button",
                                { disabled: true, key: "a0", role: "button", lid: interactionIdString, onclick: _this.currentPropertyBar.selectInteractionTargetClickHandler },
                                "?"
                            ),
                            h(
                                "button",
                                { key: "b", role: "button", lid: interactionIdString, onclick: _this.currentPropertyBar.deleteLayoutStyleInteractionClickHandler },
                                "X"
                            ),
                            interaction.StyleValueInteractions.map(function (map) {
                                var mappingIdString = map.StyleValueInteractionMappingId.toString();
                                return h(
                                    "div",
                                    { key: mappingIdString },
                                    h(
                                        "p",
                                        { key: "0" },
                                        "#",
                                        mappingIdString,
                                        ": ",
                                        map.CssValue
                                    ),
                                    h(
                                        "button",
                                        { key: "a", role: "button", vid: map.StyleValueId.toString(), lid: interactionIdString, onclick: _this.currentPropertyBar.deleteStyleValueInteractionClickHandler },
                                        "X"
                                    )
                                );
                            })
                        );
                    }),
                    h(
                        "form",
                        { key: "0", action: "UploadFiles", method: "post", enctype: "multipart/form-data" },
                        h(
                            "p",
                            { key: "0" },
                            "picture id #",
                            pictureContentIdString
                        ),
                        h("input", { multiple: true, key: "1", type: "file", name: "formFiles", onchange: _this.currentPropertyBar.uploadFileChangeHandler }),
                        h(
                            "button",
                            { key: "a", role: "button", pid: pictureContentIdString, onclick: _this.currentPropertyBar.uploadFileClickHandler },
                            "..."
                        )
                    )
                );
            } else if (selectedLayoutBase.LayoutType === CaliforniaGenerated_1.LayoutType.Box) {
                var selectedLayoutBox_1 = selectedLayoutBase;
                var specialLayoutBoxTypeSelectors_1 = [];
                CaliforniaApp_1.getArrayForEnum(CaliforniaGenerated_1.SpecialLayoutBoxType).map(function (type, index) {
                    var isLayoutBoxType = index == selectedLayoutBox_1.SpecialLayoutBoxType;
                    var layoutBoxTypeString = index.toString();
                    specialLayoutBoxTypeSelectors_1.push(isLayoutBoxType ? h(
                        "option",
                        { selected: true, key: layoutBoxTypeString, value: layoutBoxTypeString },
                        type
                    ) : h(
                        "option",
                        { key: layoutBoxTypeString, value: layoutBoxTypeString },
                        type
                    ));
                });
                return h(
                    "div",
                    { key: CaliforniaGenerated_1.LayoutType.Box },
                    " Box:",
                    h(
                        "button",
                        { key: "a", role: "button", mid: sourceStyleMoleculeIdString, onclick: _this.currentPropertyBar.selectStyleMoleculeClickHandler },
                        "style #",
                        sourceStyleMoleculeIdString
                    ),
                    h(
                        "button",
                        { disabled: true, key: "b", role: "button", onclick: _this.currentPropertyBar.createViewForBoxClickHandler },
                        "Create View"
                    ),
                    h(
                        "button",
                        { key: "c", role: "button", lid: layoutBaseIdString, onclick: _this.currentPropertyBar.deleteLayoutBaseClickHandler },
                        "X"
                    ),
                    h(
                        "select",
                        { key: "0", bid: layoutBaseIdString, onchange: _this.currentPropertyBar.specialLayoutBoxTypeChangedHandler },
                        specialLayoutBoxTypeSelectors_1
                    )
                );
            } else if (selectedLayoutBase.LayoutType === CaliforniaGenerated_1.LayoutType.Row) {
                var selectedLayoutRow = selectedLayoutBase;
                var currentBoxCount = selectedLayoutRow.AllBoxesBelowRow.filter(function (b) {
                    return b.PlacedBoxInBoxId === undefined;
                }).length;
                var boxCountSelectors = [];
                for (var i = 0; i <= 12; i++) {
                    var isSelected = i == currentBoxCount;
                    var boxCountString = i.toString();
                    if (i == 0) {
                        boxCountSelectors.push(isSelected ? h(
                            "option",
                            { disabled: true, selected: true, key: boxCountString, value: boxCountString },
                            boxCountString
                        ) : h(
                            "option",
                            { disabled: true, key: boxCountString, value: boxCountString },
                            boxCountString
                        ));
                    } else {
                        boxCountSelectors.push(isSelected ? h(
                            "option",
                            { selected: true, key: boxCountString, value: boxCountString },
                            boxCountString
                        ) : h(
                            "option",
                            { key: boxCountString, value: boxCountString },
                            boxCountString
                        ));
                    }
                }
                return h(
                    "div",
                    { key: CaliforniaGenerated_1.LayoutType.Row },
                    " Row:",
                    h(
                        "button",
                        { key: "a", role: "button", mid: sourceStyleMoleculeIdString, onclick: _this.currentPropertyBar.selectStyleMoleculeClickHandler },
                        "style #",
                        sourceStyleMoleculeIdString
                    ),
                    h(
                        "button",
                        { key: "b", role: "button", lid: layoutBaseIdString, onclick: _this.currentPropertyBar.deleteLayoutBaseClickHandler },
                        "X"
                    ),
                    h(
                        "select",
                        { key: "c", rid: layoutBaseIdString, onchange: _this.currentPropertyBar.boxCountInRowChangedHandler },
                        boxCountSelectors
                    )
                );
            }
            console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            return undefined;
        };
        this.uploadFileChangeHandler = function (evt) {
            var fileSelector = evt.target;
            if (fileSelector.files !== null) {
                var fileArray = [];
                for (var index in fileSelector.files) {
                    var file = fileSelector.files[index];
                    fileArray.push(file);
                    console.log(file);
                    var fileReader = new FileReader();
                    fileReader.addEventListener("loadend", _this.currentPropertyBar.fileProcessingLoadEndHandler);
                }
                if (fileSelector.files.length == 0) {
                    console.log("empty");
                }
            } else {
                console.log("undefined");
            }
        };
        this.fileProcessingLoadEndHandler = function (evt) {
            console.log(evt.total);
            console.log(evt.target.result);
        };
        this.uploadFileClickHandler = function (evt) {
            evt.preventDefault();
            var targetForm = evt.target.form;
            console.log("upload dialog TODO");
            jQuery.ajax(targetForm.action, {
                method: targetForm.method,
                contentType: "multipart/form-data",
                data: $(targetForm).serialize()
            });
        };
        this.selectInteractionTargetClickHandler = function (evt) {
            _this.currentPropertyBar.viewModel.selectedLayoutStyleInteraction = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.SelectInteractionTarget);
        };
        this.deleteStyleValueInteractionClickHandler = function (evt) {
            currentApp.controller.DeleteStyleValueInteractionJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid"), CaliforniaApp_1.parseIntFromAttribute(evt.target, "vid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.deleteLayoutStyleInteractionClickHandler = function (evt) {
            currentApp.controller.DeleteLayoutStyleInteractionJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.createLayoutStyleInteraction = function (evt) {
            currentApp.controller.CreateLayoutStyleInteractionForLayoutAtomJson(CaliforniaApp_1.parseIntFromAttribute(evt.target, "aid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.specialLayoutBoxTypeChangedHandler = function (evt) {
            var targetSelect = evt.target;
            var selectedSpecialLayoutBoxType = undefined;
            if (targetSelect.selectedIndex < targetSelect.childElementCount) {
                var selectOptionElement = targetSelect.options[targetSelect.selectedIndex];
                selectedSpecialLayoutBoxType = parseInt(selectOptionElement.value);
            }
            if (selectedSpecialLayoutBoxType !== undefined) {
                currentApp.controller.SetSpecialLayoutBoxTypeJson(CaliforniaApp_1.parseIntFromAttribute(targetSelect, "bid"), selectedSpecialLayoutBoxType).done(function (data) {
                    return currentApp.router.updateData(data);
                });
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
        };
        this.boxCountInRowChangedHandler = function (evt) {
            var targetSelect = evt.target;
            var parsedBoxCount = undefined;
            if (targetSelect.selectedIndex < targetSelect.childElementCount) {
                var selectOptionElement = targetSelect.options[targetSelect.selectedIndex];
                parsedBoxCount = parseInt(selectOptionElement.value);
            }
            if (parsedBoxCount !== undefined) {
                currentApp.controller.SetLayoutBoxCountForRowOrBoxJson(CaliforniaApp_1.parseIntFromAttribute(targetSelect, "rid"), currentApp.state.newBoxStyleMoleculeId, parsedBoxCount, false).done(function (data) {
                    return currentApp.router.updateData(data);
                });
            } else {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
            }
        };
        this.finalizeLayoutRequest = function (evt) {
            currentApp.state.selectedLayoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            if (currentApp.state.currentTransactionMode === PropertyBarVM_1.TransactionMode.MoveLayoutMoleculeIntoLayoutMolecule) {
                _this.currentPropertyBar.moveLayoutMoleculeIntoLayoutMolecule();
                currentApp.state.preselectedLayoutBaseId = 0;
            } else if (currentApp.state.currentTransactionMode === PropertyBarVM_1.TransactionMode.MoveLayoutMoleculeBeforeLayoutMolecule) {
                _this.currentPropertyBar.moveLayoutMoleculeBeforeLayoutMolecule();
                currentApp.state.preselectedLayoutBaseId = 0;
            } else if (currentApp.state.currentTransactionMode === PropertyBarVM_1.TransactionMode.SyncLayoutStylesImitating) {
                _this.currentPropertyBar.syncLayoutMoleculeStylesImitatingReferenceLayout();
            } else {
                currentApp.state.preselectedLayoutBaseId = 0;
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                return;
            }
        };
        this.moveLayoutBoxIntoRowClickHandler = function (evt) {
            var layoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            if (currentApp.state.preselectedLayoutBaseId != layoutBaseId) {
                currentApp.state.preselectedLayoutBaseId = layoutBaseId;
                currentApp.state.currentTransactionMode = PropertyBarVM_1.TransactionMode.MoveLayoutMoleculeIntoLayoutMolecule;
            } else {
                currentApp.state.preselectedLayoutBaseId = 0;
            }
        };
        this.moveLayoutBoxIntoBoxClickHandler = function (evt) {
            var layoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            if (currentApp.state.preselectedLayoutBaseId != layoutBaseId) {
                currentApp.state.preselectedLayoutBaseId = layoutBaseId;
                currentApp.state.currentTransactionMode = PropertyBarVM_1.TransactionMode.MoveLayoutMoleculeIntoLayoutMolecule;
            } else {
                currentApp.state.preselectedLayoutBaseId = 0;
            }
        };
        this.moveLayoutBoxBeforeBoxClickHandler = function (evt) {
            var layoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            if (currentApp.state.preselectedLayoutBaseId != layoutBaseId) {
                currentApp.state.preselectedLayoutBaseId = layoutBaseId;
                currentApp.state.currentTransactionMode = PropertyBarVM_1.TransactionMode.MoveLayoutMoleculeBeforeLayoutMolecule;
            } else {
                currentApp.state.preselectedLayoutBaseId = 0;
            }
        };
        this.moveLayoutRowBeforeRowClickHandler = function (evt) {
            var layoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            if (currentApp.state.preselectedLayoutBaseId != layoutBaseId) {
                currentApp.state.preselectedLayoutBaseId = layoutBaseId;
                currentApp.state.currentTransactionMode = PropertyBarVM_1.TransactionMode.MoveLayoutMoleculeBeforeLayoutMolecule;
            } else {
                currentApp.state.preselectedLayoutBaseId = 0;
            }
        };
        this.syncLayoutBaseStylesClickHandler = function (evt) {
            var layoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            if (currentApp.state.preselectedLayoutBaseId != layoutBaseId) {
                currentApp.state.preselectedLayoutBaseId = layoutBaseId;
                currentApp.state.currentTransactionMode = PropertyBarVM_1.TransactionMode.SyncLayoutStylesImitating;
            } else {
                currentApp.state.preselectedLayoutBaseId = 0;
            }
        };
        this.moveLayoutAtomIntoBoxClickHandler = function (evt) {
            var layoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            if (currentApp.state.preselectedLayoutBaseId != layoutBaseId) {
                currentApp.state.preselectedLayoutBaseId = layoutBaseId;
                currentApp.state.currentTransactionMode = PropertyBarVM_1.TransactionMode.MoveLayoutMoleculeIntoLayoutMolecule;
            } else {
                currentApp.state.preselectedLayoutBaseId = 0;
            }
        };
        this.createBoxForAtomInPlaceClickHandler = function (evt) {
            currentApp.state.selectedLayoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            _this.viewModel.currentSecondaryPopupMode = PropertyBarVM_1.PopupSecondaryMode.SelectBoxIntoBoxAtomInPlace;
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.SelectBox);
        };
        this.moveLayoutAtomBeforeAtomClickHandler = function (evt) {
            var layoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            if (currentApp.state.preselectedLayoutBaseId != layoutBaseId) {
                currentApp.state.preselectedLayoutBaseId = layoutBaseId;
                currentApp.state.currentTransactionMode = PropertyBarVM_1.TransactionMode.MoveLayoutMoleculeBeforeLayoutMolecule;
            } else {
                currentApp.state.preselectedLayoutBaseId = 0;
            }
        };
        this.moveLayoutAtomBeforeBoxClickHandler = function (evt) {
            var layoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            if (currentApp.state.preselectedLayoutBaseId != layoutBaseId) {
                currentApp.state.preselectedLayoutBaseId = layoutBaseId;
                currentApp.state.currentTransactionMode = PropertyBarVM_1.TransactionMode.MoveLayoutMoleculeBeforeLayoutMolecule;
            } else {
                currentApp.state.preselectedLayoutBaseId = 0;
            }
        };
        this.saveLayoutMoleculeClickHandler = function (evt) {
            currentApp.controller.SetLayoutRowOrBoxAsInstanceableJson(currentApp.clientData.CaliforniaProject.CaliforniaProjectId, CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.createViewForBoxClickHandler = function (evt) {
            console.log("TODO");
        };
        this.insertLayoutAtomIntoBoxClickHandler = function (evt) {
            currentApp.state.selectedLayoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.InsertLayoutAtomIntoBox);
        };
        this.insertLayoutBoxIntoBoxClickHandler = function (evt) {
            currentApp.state.selectedLayoutBaseId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "lid");
            _this.viewModel.currentSecondaryPopupMode = PropertyBarVM_1.PopupSecondaryMode.SelectBoxIntoBox;
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.SelectBox);
        };
        this.renderCaliforniaViewControlsWhenAll = function () {
            var isAddButtonEnabled = _this.currentPropertyBar.viewModel.tempCaliforniaViewName !== "";
            return h(
                "div",
                { key: "-1" },
                h("input", { key: "0", value: _this.currentPropertyBar.viewModel.tempCaliforniaViewName, oninput: _this.currentPropertyBar.californiaViewNameInputHandler }),
                isAddButtonEnabled ? h(
                    "button",
                    { key: "a", role: "button", onclick: _this.currentPropertyBar.createCaliforniaViewClickHandler },
                    "\u2714"
                ) : h(
                    "button",
                    { disabled: true, key: "a0", role: "button", onclick: _this.currentPropertyBar.createCaliforniaViewClickHandler },
                    "\u2714"
                ),
                isAddButtonEnabled ? h(
                    "button",
                    { key: "b", role: "button", onclick: _this.currentPropertyBar.createCaliforniaViewFromReferenceClickHandler },
                    "x2"
                ) : h(
                    "button",
                    { disabled: true, key: "b0", role: "button", onclick: _this.currentPropertyBar.createCaliforniaViewFromReferenceClickHandler },
                    "x2"
                )
            );
        };
        this.createCaliforniaViewFromReferenceClickHandler = function (evt) {
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.CaliforniaViewSelection);
        };
        this.createCaliforniaViewClickHandler = function (evt) {
            currentApp.controller.CreateCaliforniaViewJson(currentApp.clientData.CaliforniaProject.CaliforniaProjectId, _this.currentPropertyBar.viewModel.tempCaliforniaViewName).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.viewModel.tempCaliforniaViewName = "";
        };
        this.californiaViewNameInputHandler = function (evt) {
            _this.currentPropertyBar.viewModel.tempCaliforniaViewName = evt.target.value;
        };
        this.renderCaliforniaViewSelectionPopup = function () {
            var isPopupVisible = _this.viewModel.currentPopupMode === PropertyBarVM_1.PopupMode.CaliforniaViewSelection;
            var renderedOptions = [];
            if (isPopupVisible === true) {
                currentApp.clientData.CaliforniaProject.CaliforniaViews.filter(function (m) {
                    return !m.IsInternal;
                }).map(function (m) {
                    var californiaViewIdString = m.CaliforniaViewId.toString();
                    renderedOptions.push(h(
                        "div",
                        { key: californiaViewIdString, styles: { "flex": "0 0 100%", "width": "100%", "min-width": "100%" } },
                        "view #",
                        californiaViewIdString,
                        ": ",
                        m.Name,
                        " ",
                        h(
                            "button",
                            { key: "a", role: "button", vid: californiaViewIdString, onclick: _this.currentPropertyBar.selectCaliforniaViewInPopupClickHandler },
                            "\u2714"
                        )
                    ));
                });
            }
            return h(
                "div",
                { id: _this.currentPropertyBar.propertyBarIndex + "PopupMode" + PropertyBarVM_1.PopupMode[PropertyBarVM_1.PopupMode.CaliforniaViewSelection], styles: { "display": isPopupVisible ? "block" : "none", "z-index": "31", "background-color": "white", "border": "solid black 1px" } },
                h(
                    "div",
                    { key: "0", styles: { "display": "flex", "flex-flow": "row nowrap", "min-width": "250px" } },
                    h(
                        "button",
                        { key: "b", styles: { "flex": "1 0 10%", "width": "10%", "min-width": "10%" }, onclick: _this.currentPropertyBar.cancelSelectCaliforniaViewPopupClickHandler },
                        "x"
                    )
                ),
                h(
                    "div",
                    { key: "1", styles: { "display": "flex", "flex-flow": "row wrap" } },
                    renderedOptions
                )
            );
        };
        this.selectCaliforniaViewInPopupClickHandler = function (evt) {
            currentApp.controller.CreateCaliforniaViewFromReferenceViewJson(currentApp.clientData.CaliforniaProject.CaliforniaProjectId, _this.currentPropertyBar.viewModel.tempCaliforniaViewName, CaliforniaApp_1.parseIntFromAttribute(evt.target, "vid")).done(function (data) {
                return currentApp.router.updateData(data);
            });
            _this.currentPropertyBar.viewModel.tempCaliforniaViewName = "";
            _this.currentPropertyBar.closePopup();
        };
        this.cancelSelectCaliforniaViewPopupClickHandler = function (evt) {
            _this.currentPropertyBar.closePopup();
        };
        this.renderCaliforniaViewControls = function () {
            if (_this.currentPropertyBar.viewModel.selectedCaliforniaViewId == 0) {
                return undefined;
            }
            var selectedCaliforniaView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (v) {
                return v.CaliforniaViewId == _this.currentPropertyBar.viewModel.selectedCaliforniaViewId;
            });
            var californiaViewIdString = selectedCaliforniaView.CaliforniaViewId.toString();
            var viewControlsButtonHolderStyles = {
                "flex": "0 0 auto",
                "height": "auto"
            };
            var viewControlsBoxTreeHolderStyles = {
                "flex": "1 1 1px",
                "width": "100%",
                "height": "auto",
                "overflow": "scroll"
            };
            var isSyncWithPreviewActive = _this.currentPropertyBar.propertyBarIndex == 0;
            var isSyncWithLeftActive = _this.currentPropertyBar.propertyBarIndex != 0;
            var isDrawHelperLinesActive = _this.currentPropertyBar.propertyBarIndex == 0;
            var syncWithLeftBoxTreeButtonStyles = {
                "outline": !isSyncWithLeftActive ? undefined : _this.currentPropertyBar.viewModel.isSyncedWithBoxTreeToTheLeft ? "solid 1px rgb(200,0,0)" : "solid 1px rgb(0,242,0)",
                "outline-offset": !isSyncWithLeftActive ? undefined : "-1px"
            };
            var syncWithPreviewButtonStyles = {
                "outline": !isSyncWithPreviewActive ? undefined : _this.currentPropertyBar.viewModel.isSyncedWithPagePreview ? "solid 1px rgb(200,0,0)" : "solid 1px rgb(0,242,0)",
                "outline-offset": !isSyncWithPreviewActive ? undefined : "-1px"
            };
            var drawHelperLinesButtonStyles = {
                "outline": !isDrawHelperLinesActive ? undefined : currentApp.state.isDrawHelperLines ? "solid 1px rgb(200,0,0)" : undefined,
                "outline-offset": !isDrawHelperLinesActive ? undefined : "-1px"
            };
            return h(
                "div",
                { styles: { "width": "100%", "height": "100%", "display": "flex", "flex-flow": "column nowrap" } },
                " View #",
                californiaViewIdString,
                h(
                    "div",
                    { key: "0", styles: viewControlsButtonHolderStyles },
                    h(
                        "button",
                        { key: "a", onclick: _this.currentPropertyBar.insertLayoutRowIntoViewClickHandler },
                        "+(R)"
                    ),
                    h(
                        "button",
                        { key: "b", mid: selectedCaliforniaView.SpecialStyleViewStyleMoleculeIdString, onclick: _this.currentPropertyBar.selectStyleMoleculeClickHandler },
                        "style #",
                        selectedCaliforniaView.SpecialStyleViewStyleMoleculeIdString
                    ),
                    h(
                        "button",
                        { key: "c", mid: selectedCaliforniaView.SpecialStyleBodyStyleMoleculeIdString, onclick: _this.currentPropertyBar.selectStyleMoleculeClickHandler },
                        "body style #",
                        selectedCaliforniaView.SpecialStyleBodyStyleMoleculeIdString
                    ),
                    h(
                        "button",
                        { key: "d", mid: selectedCaliforniaView.SpecialStyleHtmlStyleMoleculeIdString, onclick: _this.currentPropertyBar.selectStyleMoleculeClickHandler },
                        "HTML style #",
                        selectedCaliforniaView.SpecialStyleHtmlStyleMoleculeIdString
                    ),
                    h(
                        "button",
                        { key: "e", onclick: _this.currentPropertyBar.resetPreselectedLayoutClickHandler },
                        "o"
                    ),
                    isDrawHelperLinesActive ? h(
                        "button",
                        { key: "f", onclick: _this.currentPropertyBar.drawHelperLinesClickHandler, styles: drawHelperLinesButtonStyles },
                        "\\-\\"
                    ) : h(
                        "button",
                        { disabled: true, key: "f0", onclick: _this.currentPropertyBar.drawHelperLinesClickHandler, styles: drawHelperLinesButtonStyles },
                        "\\-\\"
                    ),
                    isSyncWithPreviewActive ? h(
                        "button",
                        { key: "g", onclick: _this.currentPropertyBar.syncWithPagePreviewClickHandler, styles: syncWithPreviewButtonStyles },
                        "-=-"
                    ) : h(
                        "button",
                        { disabled: true, key: "g0", onclick: _this.currentPropertyBar.syncWithPagePreviewClickHandler, styles: syncWithPreviewButtonStyles },
                        "-=-"
                    ),
                    isSyncWithLeftActive ? h(
                        "button",
                        { key: "h", onclick: _this.currentPropertyBar.syncWithLeftPropertyBarClickHandler, styles: syncWithLeftBoxTreeButtonStyles },
                        "=="
                    ) : h(
                        "button",
                        { disabled: true, key: "h0", onclick: _this.currentPropertyBar.syncWithLeftPropertyBarClickHandler, styles: syncWithLeftBoxTreeButtonStyles },
                        "=="
                    )
                ),
                h(
                    "div",
                    { key: "1", styles: viewControlsBoxTreeHolderStyles, onscroll: _this.currentPropertyBar.boxTreeScrollHandler, afterCreate: _this.currentPropertyBar.boxTreeAfterCreateHandler },
                    _this.currentPropertyBar.viewModel.boxTreeProjector.results.map(function (r) {
                        return r.renderMaquette();
                    })
                )
            );
        };
        this.boxTreeScrollHandler = function (evt) {
            var currentPropertyBarIndex = _this.currentPropertyBar.propertyBarIndex;
            var currentScrollDom = currentApp.propertyBarBoxTreeDomReferences[currentPropertyBarIndex];
            if (currentApp.state.visiblePropertyBarMaxCount > 1 && currentApp.propertyBarBoxTreeScrollHandled[currentPropertyBarIndex] === false) {
                currentApp.propertyBarBoxTreeScrollHandled[currentPropertyBarIndex] = true;
                var currentViewModel = _this.currentPropertyBar.viewModel;
                if (currentScrollDom === undefined) {
                    console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                    return;
                }
                var progressingPropertyBarIndex = currentPropertyBarIndex;
                var isKeepGoingLeft = currentPropertyBarIndex > 0;
                var currentIteration = 0;
                var maxIteration = currentPropertyBarIndex - 1;
                while (isKeepGoingLeft === true && progressingPropertyBarIndex > 0) {
                    if (currentApp.propertyBarVMs[progressingPropertyBarIndex].isSyncedWithBoxTreeToTheLeft) {
                        var targetScrollDom = currentApp.propertyBarBoxTreeDomReferences[progressingPropertyBarIndex - 1];
                        if (targetScrollDom !== undefined && targetScrollDom.scrollTop != currentScrollDom.scrollTop) {
                            currentApp.propertyBarBoxTreeScrollHandled[progressingPropertyBarIndex - 1] = true;
                            targetScrollDom.scrollTop = currentScrollDom.scrollTop;
                        }
                    } else {
                        isKeepGoingLeft = false;
                        break;
                    }
                    if (currentIteration > maxIteration) {
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                        break;
                    }
                    progressingPropertyBarIndex--;
                    currentIteration++;
                }
                progressingPropertyBarIndex = currentPropertyBarIndex + 1;
                var isKeepGoingRight = true;
                currentIteration = 0;
                maxIteration = currentApp.state.visiblePropertyBarMaxCount - 1 - currentPropertyBarIndex;
                while (isKeepGoingRight === true && progressingPropertyBarIndex < currentApp.state.visiblePropertyBarMaxCount) {
                    if (currentApp.propertyBarVMs[progressingPropertyBarIndex].isSyncedWithBoxTreeToTheLeft) {
                        var targetScrollDom = currentApp.propertyBarBoxTreeDomReferences[progressingPropertyBarIndex];
                        if (targetScrollDom !== undefined && targetScrollDom.scrollTop != currentScrollDom.scrollTop) {
                            currentApp.propertyBarBoxTreeScrollHandled[progressingPropertyBarIndex] = true;
                            targetScrollDom.scrollTop = currentScrollDom.scrollTop;
                        }
                    } else {
                        isKeepGoingRight = false;
                        break;
                    }
                    if (currentIteration > maxIteration) {
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                        break;
                    }
                    progressingPropertyBarIndex++;
                    currentIteration++;
                }
            } else {
                for (var i = 0; i < currentApp.state.visiblePropertyBarMaxCount; i++) {
                    currentApp.propertyBarBoxTreeScrollHandled[i] = false;
                }
            }
            if (currentPropertyBarIndex == 0 && _this.currentPropertyBar.viewModel.isSyncedWithPagePreview) {
                _this.currentPropertyBar._visibleLayoutAtomDomNodeReferences = [];
                _this.currentPropertyBar._visibleLayoutAtomKeys = [];
                _this.currentPropertyBar._mostUpperVisibleLayoutAtomId = 0;
                var processedElementCount = 0;
                var mostUpperVisibleIndex = -1;
                var mostUpperVisibleLayoutAtomId = 0;
                var mostUpperVisibleDeltaTopLeft = currentScrollDom.clientHeight + 1;
                var staticOffsetPx = currentScrollDom.getBoundingClientRect().top;
                var currentScrollTop = currentScrollDom.scrollTop;
                var minXPreview = 0;
                var maxXPreview = currentScrollDom.clientHeight;
                for (var elementKey in _this.currentPropertyBar._activeViewLayoutAtomDomNodeReferences) {
                    var domNode = _this.currentPropertyBar._activeViewLayoutAtomDomNodeReferences[elementKey];
                    var isDomNodeVisible = false;
                    var boundingRectElement = domNode.getBoundingClientRect();
                    var minXElementDeltaTopLeft = boundingRectElement.top - staticOffsetPx;
                    var maxXElementDeltaBottomLeft = currentScrollDom.clientHeight - (boundingRectElement.top - staticOffsetPx + currentScrollTop + boundingRectElement.height) + currentScrollTop;
                    if (boundingRectElement.height > 0) {
                        if (minXElementDeltaTopLeft >= 0.0 && minXElementDeltaTopLeft <= currentScrollDom.clientHeight) {
                            isDomNodeVisible = true;
                        } else if (maxXElementDeltaBottomLeft >= 0.0 && maxXElementDeltaBottomLeft <= currentScrollDom.clientHeight) {
                            isDomNodeVisible = true;
                        } else if (minXElementDeltaTopLeft <= 0.0 && maxXElementDeltaBottomLeft <= 0.0) {
                            isDomNodeVisible = true;
                        }
                    }
                    if (isDomNodeVisible) {
                        _this.currentPropertyBar._visibleLayoutAtomDomNodeReferences.push(domNode);
                        _this.currentPropertyBar._visibleLayoutAtomKeys.push(elementKey);
                        if (minXElementDeltaTopLeft < mostUpperVisibleDeltaTopLeft) {
                            mostUpperVisibleDeltaTopLeft = minXElementDeltaTopLeft;
                            mostUpperVisibleIndex = _this.currentPropertyBar._visibleLayoutAtomKeys.length;
                            mostUpperVisibleLayoutAtomId = CaliforniaApp_1.parseIntFromAttribute(domNode, "lid");
                        }
                    }
                    processedElementCount++;
                }
                if (mostUpperVisibleLayoutAtomId != _this.currentPropertyBar._mostUpperVisibleLayoutAtomId) {
                    _this.currentPropertyBar._mostUpperVisibleLayoutAtomId = mostUpperVisibleLayoutAtomId;
                    if (mostUpperVisibleLayoutAtomId != 0 && _this.currentPropertyBar.viewModel.isSyncedWithPagePreview) {
                        currentApp.pagePreview.syncScrollPositionFromBoxTree();
                    }
                }
            }
        };
        this.syncScrollPositionFromPagePreview = function () {
            if (_this.currentPropertyBar.viewModel.isSyncedWithPagePreview) {
                var currentPropertyBarIndex = _this.currentPropertyBar.propertyBarIndex;
                var currentScrollDom = currentApp.propertyBarBoxTreeDomReferences[currentPropertyBarIndex];
                if (currentScrollDom !== undefined) {
                    var staticOffsetPx = currentScrollDom.getBoundingClientRect().top;
                    var targetLayoutAtomId_1 = currentApp.pagePreview.mostUpperVisibleLayoutAtomId;
                    console.log("tree from preview for target layout #" + targetLayoutAtomId_1);
                    var domNodeOfTargetLayout = _this.currentPropertyBar._visibleLayoutAtomDomNodeReferences.find(function (r) {
                        return CaliforniaApp_1.parseIntFromAttribute(r, "lid") == targetLayoutAtomId_1;
                    });
                    if (domNodeOfTargetLayout === undefined) {
                        domNodeOfTargetLayout = _this.currentPropertyBar._activeViewLayoutAtomDomNodeReferences[targetLayoutAtomId_1];
                    }
                    if (domNodeOfTargetLayout !== undefined) {
                        currentScrollDom.scrollTop = currentScrollDom.scrollTop + (domNodeOfTargetLayout.getBoundingClientRect().top - staticOffsetPx);
                    } else {
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                    }
                } else {}
            }
        };
        this.boxTreeAfterCreateHandler = function (element, projectionOptions, vnodeSelector, properties, children) {
            currentApp.propertyBarBoxTreeDomReferences[_this.currentPropertyBar.propertyBarIndex] = element;
        };
        this.deleteCaliforniaViewClickHandler = function (evt) {
            var deleteCaliforniaViewId = CaliforniaApp_1.parseIntFromAttribute(evt.target, "vid");
            currentApp.router.clearCaliforniaPropertyBars(false, deleteCaliforniaViewId);
            currentApp.controller.DeleteCaliforniaViewJson(deleteCaliforniaViewId).done(function (data) {
                return currentApp.router.updateData(data);
            });
        };
        this.insertLayoutRowIntoViewClickHandler = function (evt) {
            _this.currentPropertyBar.displayPopup(evt.target, PropertyBarVM_1.PopupMode.InsertLayoutRowIntoView);
        };
        this.resetPreselectedLayoutClickHandler = function (evt) {
            currentApp.state.preselectedLayoutBaseId = 0;
        };
        this.drawHelperLinesClickHandler = function (evt) {
            currentApp.state.isDrawHelperLines = !currentApp.state.isDrawHelperLines;
        };
        this.syncWithPagePreviewClickHandler = function (evt) {
            var currentPropertyBarIndex = _this.currentPropertyBar.propertyBarIndex;
            var currentViewModel = _this.currentPropertyBar.viewModel;
            if (currentPropertyBarIndex == 0) {
                currentViewModel.isSyncedWithPagePreview = !currentViewModel.isSyncedWithPagePreview;
                if (currentViewModel.isSyncedWithPagePreview) {
                    var currentBoxTreeDomReference = currentApp.propertyBarBoxTreeDomReferences[currentPropertyBarIndex];
                    if (currentBoxTreeDomReference !== undefined) {
                        if (currentBoxTreeDomReference.scrollTop <= 1.0) {
                            _this.currentPropertyBar.syncScrollPositionFromPagePreview();
                        } else {
                            currentApp.pagePreview.syncScrollPositionFromBoxTree();
                        }
                    }
                }
            }
        };
        this.syncWithLeftPropertyBarClickHandler = function (evt) {
            var currentPropertyBarIndex = _this.currentPropertyBar.propertyBarIndex;
            var currentViewModel = _this.currentPropertyBar.viewModel;
            if (currentPropertyBarIndex != 0 && currentApp.propertyBarVMs[currentPropertyBarIndex - 1].currentPropertyBarMode === PropertyBarVM_1.PropertyBarMode.CaliforniaView && currentApp.propertyBarVMs[currentPropertyBarIndex - 1].selectedCaliforniaViewId == currentViewModel.selectedCaliforniaViewId) {
                currentViewModel.isSyncedWithBoxTreeToTheLeft = !currentViewModel.isSyncedWithBoxTreeToTheLeft;
                if (currentViewModel.isSyncedWithBoxTreeToTheLeft === true) {
                    var currentBoxTreeDomReference = currentApp.propertyBarBoxTreeDomReferences[currentPropertyBarIndex];
                    var otherBoxTreeDomReference = currentApp.propertyBarBoxTreeDomReferences[currentPropertyBarIndex - 1];
                    if (currentBoxTreeDomReference !== undefined && otherBoxTreeDomReference !== undefined) {
                        otherBoxTreeDomReference.scrollTop = currentBoxTreeDomReference.scrollTop;
                    } else {
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                        currentViewModel.isSyncedWithBoxTreeToTheLeft = false;
                    }
                }
            } else {
                currentViewModel.isSyncedWithBoxTreeToTheLeft = false;
            }
        };
        currentApp = californiaAppArg;
        this.propertyBarIndex = targetIndex;
        this.viewModel = new PropertyBarVM_1.PropertyBarVM(this, targetIndex, californiaAppArg);
        this.viewModel.isSyncedWithBoxTreeToTheLeft = false;
        this.viewModel.isSyncedWithPagePreview = false;
    }
    ;
    Object.defineProperty(PropertyBar.prototype, "currentPropertyBar", {
        get: function get() {
            return currentApp.propertyBars[this.propertyBarIndex];
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PropertyBar.prototype, "nextExceptLastPropertyBar", {
        get: function get() {
            var nextPropertyBarIndex = this.propertyBarIndex + 1;
            if (nextPropertyBarIndex < currentApp.state.visiblePropertyBarMaxCount) {
                return currentApp.propertyBars[nextPropertyBarIndex];
            } else {
                return this.currentPropertyBar;
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PropertyBar.prototype, "visibleLayoutAtomDomNodeReferences", {
        get: function get() {
            return this._visibleLayoutAtomDomNodeReferences;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PropertyBar.prototype, "visibleLayoutAtomKeys", {
        get: function get() {
            return this._visibleLayoutAtomKeys;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PropertyBar.prototype, "mostUpperVisibleLayoutAtomId", {
        get: function get() {
            return this._mostUpperVisibleLayoutAtomId;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PropertyBar.prototype, "activeViewLayoutAtomDomNodeReferences", {
        get: function get() {
            return this._activeViewLayoutAtomDomNodeReferences;
        },
        enumerable: true,
        configurable: true
    });
    ;
    return PropertyBar;
}();
exports.PropertyBar = PropertyBar;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(0)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery, jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! VelocityJS.org (1.5.0). (C) 2014 Julian Shapiro. MIT @license: en.wikipedia.org/wiki/MIT_License */

/*************************
 Velocity jQuery Shim
 *************************/

/*! VelocityJS.org jQuery Shim (1.0.1). (C) 2014 The jQuery Foundation. MIT @license: en.wikipedia.org/wiki/MIT_License. */

/* This file contains the jQuery functions that Velocity relies on, thereby removing Velocity's dependency on a full copy of jQuery, and allowing it to work in any environment. */
/* These shimmed functions are only used if jQuery isn't present. If both this shim and jQuery are loaded, Velocity defaults to jQuery proper. */
/* Browser support: Using this shim instead of jQuery proper removes support for IE8. */

(function(window) {
	"use strict";
	/***************
	 Setup
	 ***************/

	/* If jQuery is already loaded, there's no point in loading this shim. */
	if (__webpack_provided_window_dot_jQuery) {
		return;
	}

	/* jQuery base. */
	var $ = function(selector, context) {
		return new $.fn.init(selector, context);
	};

	/********************
	 Private Methods
	 ********************/

	/* jQuery */
	$.isWindow = function(obj) {
		/* jshint eqeqeq: false */
		return obj && obj === obj.window;
	};

	/* jQuery */
	$.type = function(obj) {
		if (!obj) {
			return obj + "";
		}

		return typeof obj === "object" || typeof obj === "function" ?
				class2type[toString.call(obj)] || "object" :
				typeof obj;
	};

	/* jQuery */
	$.isArray = Array.isArray || function(obj) {
		return $.type(obj) === "array";
	};

	/* jQuery */
	function isArraylike(obj) {
		var length = obj.length,
				type = $.type(obj);

		if (type === "function" || $.isWindow(obj)) {
			return false;
		}

		if (obj.nodeType === 1 && length) {
			return true;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj;
	}

	/***************
	 $ Methods
	 ***************/

	/* jQuery: Support removed for IE<9. */
	$.isPlainObject = function(obj) {
		var key;

		if (!obj || $.type(obj) !== "object" || obj.nodeType || $.isWindow(obj)) {
			return false;
		}

		try {
			if (obj.constructor &&
					!hasOwn.call(obj, "constructor") &&
					!hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
				return false;
			}
		} catch (e) {
			return false;
		}

		for (key in obj) {
		}

		return key === undefined || hasOwn.call(obj, key);
	};

	/* jQuery */
	$.each = function(obj, callback, args) {
		var value,
				i = 0,
				length = obj.length,
				isArray = isArraylike(obj);

		if (args) {
			if (isArray) {
				for (; i < length; i++) {
					value = callback.apply(obj[i], args);

					if (value === false) {
						break;
					}
				}
			} else {
				for (i in obj) {
					if (!obj.hasOwnProperty(i)) {
						continue;
					}
					value = callback.apply(obj[i], args);

					if (value === false) {
						break;
					}
				}
			}

		} else {
			if (isArray) {
				for (; i < length; i++) {
					value = callback.call(obj[i], i, obj[i]);

					if (value === false) {
						break;
					}
				}
			} else {
				for (i in obj) {
					if (!obj.hasOwnProperty(i)) {
						continue;
					}
					value = callback.call(obj[i], i, obj[i]);

					if (value === false) {
						break;
					}
				}
			}
		}

		return obj;
	};

	/* Custom */
	$.data = function(node, key, value) {
		/* $.getData() */
		if (value === undefined) {
			var getId = node[$.expando],
					store = getId && cache[getId];

			if (key === undefined) {
				return store;
			} else if (store) {
				if (key in store) {
					return store[key];
				}
			}
			/* $.setData() */
		} else if (key !== undefined) {
			var setId = node[$.expando] || (node[$.expando] = ++$.uuid);

			cache[setId] = cache[setId] || {};
			cache[setId][key] = value;

			return value;
		}
	};

	/* Custom */
	$.removeData = function(node, keys) {
		var id = node[$.expando],
				store = id && cache[id];

		if (store) {
			// Cleanup the entire store if no keys are provided.
			if (!keys) {
				delete cache[id];
			} else {
				$.each(keys, function(_, key) {
					delete store[key];
				});
			}
		}
	};

	/* jQuery */
	$.extend = function() {
		var src, copyIsArray, copy, name, options, clone,
				target = arguments[0] || {},
				i = 1,
				length = arguments.length,
				deep = false;

		if (typeof target === "boolean") {
			deep = target;

			target = arguments[i] || {};
			i++;
		}

		if (typeof target !== "object" && $.type(target) !== "function") {
			target = {};
		}

		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {
			if ((options = arguments[i])) {
				for (name in options) {
					if (!options.hasOwnProperty(name)) {
						continue;
					}
					src = target[name];
					copy = options[name];

					if (target === copy) {
						continue;
					}

					if (deep && copy && ($.isPlainObject(copy) || (copyIsArray = $.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && $.isArray(src) ? src : [];

						} else {
							clone = src && $.isPlainObject(src) ? src : {};
						}

						target[name] = $.extend(deep, clone, copy);

					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		return target;
	};

	/* jQuery 1.4.3 */
	$.queue = function(elem, type, data) {
		function $makeArray(arr, results) {
			var ret = results || [];

			if (arr) {
				if (isArraylike(Object(arr))) {
					/* $.merge */
					(function(first, second) {
						var len = +second.length,
								j = 0,
								i = first.length;

						while (j < len) {
							first[i++] = second[j++];
						}

						if (len !== len) {
							while (second[j] !== undefined) {
								first[i++] = second[j++];
							}
						}

						first.length = i;

						return first;
					})(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					[].push.call(ret, arr);
				}
			}

			return ret;
		}

		if (!elem) {
			return;
		}

		type = (type || "fx") + "queue";

		var q = $.data(elem, type);

		if (!data) {
			return q || [];
		}

		if (!q || $.isArray(data)) {
			q = $.data(elem, type, $makeArray(data));
		} else {
			q.push(data);
		}

		return q;
	};

	/* jQuery 1.4.3 */
	$.dequeue = function(elems, type) {
		/* Custom: Embed element iteration. */
		$.each(elems.nodeType ? [elems] : elems, function(i, elem) {
			type = type || "fx";

			var queue = $.queue(elem, type),
					fn = queue.shift();

			if (fn === "inprogress") {
				fn = queue.shift();
			}

			if (fn) {
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				fn.call(elem, function() {
					$.dequeue(elem, type);
				});
			}
		});
	};

	/******************
	 $.fn Methods
	 ******************/

	/* jQuery */
	$.fn = $.prototype = {
		init: function(selector) {
			/* Just return the element wrapped inside an array; don't proceed with the actual jQuery node wrapping process. */
			if (selector.nodeType) {
				this[0] = selector;

				return this;
			} else {
				throw new Error("Not a DOM node.");
			}
		},
		offset: function() {
			/* jQuery altered code: Dropped disconnected DOM node checking. */
			var box = this[0].getBoundingClientRect ? this[0].getBoundingClientRect() : {top: 0, left: 0};

			return {
				top: box.top + (window.pageYOffset || document.scrollTop || 0) - (document.clientTop || 0),
				left: box.left + (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || 0)
			};
		},
		position: function() {
			/* jQuery */
			function offsetParentFn(elem) {
				var offsetParent = elem.offsetParent;

				while (offsetParent && (offsetParent.nodeName.toLowerCase() !== "html" && offsetParent.style && offsetParent.style.position.toLowerCase() === "static")) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || document;
			}

			/* Zepto */
			var elem = this[0],
					offsetParent = offsetParentFn(elem),
					offset = this.offset(),
					parentOffset = /^(?:body|html)$/i.test(offsetParent.nodeName) ? {top: 0, left: 0} : $(offsetParent).offset();

			offset.top -= parseFloat(elem.style.marginTop) || 0;
			offset.left -= parseFloat(elem.style.marginLeft) || 0;

			if (offsetParent.style) {
				parentOffset.top += parseFloat(offsetParent.style.borderTopWidth) || 0;
				parentOffset.left += parseFloat(offsetParent.style.borderLeftWidth) || 0;
			}

			return {
				top: offset.top - parentOffset.top,
				left: offset.left - parentOffset.left
			};
		}
	};

	/**********************
	 Private Variables
	 **********************/

	/* For $.data() */
	var cache = {};
	$.expando = "velocity" + (new Date().getTime());
	$.uuid = 0;

	/* For $.queue() */
	var class2type = {},
			hasOwn = class2type.hasOwnProperty,
			toString = class2type.toString;

	var types = "Boolean Number String Function Array Date RegExp Object Error".split(" ");
	for (var i = 0; i < types.length; i++) {
		class2type["[object " + types[i] + "]"] = types[i].toLowerCase();
	}

	/* Makes $(node) possible, without having to call init. */
	$.fn.init.prototype = $.fn;

	/* Globalize Velocity onto the window, and assign its Utilities property. */
	window.Velocity = {Utilities: $};
})(window);

/******************
 Velocity.js
 ******************/

(function(factory) {
	"use strict";
	/* CommonJS module. */
	if (typeof module === "object" && typeof module.exports === "object") {
		module.exports = factory();
		/* AMD module. */
	} else if (true) {
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		/* Browser globals. */
	} else {
		factory();
	}
}(function() {
	"use strict";
	return function(global, window, document, undefined) {

		/***************
		 Summary
		 ***************/

		/*
		 - CSS: CSS stack that works independently from the rest of Velocity.
		 - animate(): Core animation method that iterates over the targeted elements and queues the incoming call onto each element individually.
		 - Pre-Queueing: Prepare the element for animation by instantiating its data cache and processing the call's options.
		 - Queueing: The logic that runs once the call has reached its point of execution in the element's $.queue() stack.
		 Most logic is placed here to avoid risking it becoming stale (if the element's properties have changed).
		 - Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
		 - tick(): The single requestAnimationFrame loop responsible for tweening all in-progress calls.
		 - completeCall(): Handles the cleanup process for each Velocity call.
		 */

		/*********************
		 Helper Functions
		 *********************/

		/* IE detection. Gist: https://gist.github.com/julianshapiro/9098609 */
		var IE = (function() {
			if (document.documentMode) {
				return document.documentMode;
			} else {
				for (var i = 7; i > 4; i--) {
					var div = document.createElement("div");

					div.innerHTML = "<!--[if IE " + i + "]><span></span><![endif]-->";

					if (div.getElementsByTagName("span").length) {
						div = null;

						return i;
					}
				}
			}

			return undefined;
		})();

		/* rAF shim. Gist: https://gist.github.com/julianshapiro/9497513 */
		var rAFShim = (function() {
			var timeLast = 0;

			return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
				var timeCurrent = (new Date()).getTime(),
						timeDelta;

				/* Dynamically set delay on a per-tick basis to match 60fps. */
				/* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */
				timeDelta = Math.max(0, 16 - (timeCurrent - timeLast));
				timeLast = timeCurrent + timeDelta;

				return setTimeout(function() {
					callback(timeCurrent + timeDelta);
				}, timeDelta);
			};
		})();

		var performance = (function() {
			var perf = window.performance || {};

			if (typeof perf.now !== "function") {
				var nowOffset = perf.timing && perf.timing.navigationStart ? perf.timing.navigationStart : (new Date()).getTime();

				perf.now = function() {
					return (new Date()).getTime() - nowOffset;
				};
			}
			return perf;
		})();

		/* Array compacting. Copyright Lo-Dash. MIT License: https://github.com/lodash/lodash/blob/master/LICENSE.txt */
		function compactSparseArray(array) {
			var index = -1,
					length = array ? array.length : 0,
					result = [];

			while (++index < length) {
				var value = array[index];

				if (value) {
					result.push(value);
				}
			}

			return result;
		}

		/**
		 * Shim for "fixing" IE's lack of support (IE < 9) for applying slice
		 * on host objects like NamedNodeMap, NodeList, and HTMLCollection
		 * (technically, since host objects have been implementation-dependent,
		 * at least before ES2015, IE hasn't needed to work this way).
		 * Also works on strings, fixes IE < 9 to allow an explicit undefined
		 * for the 2nd argument (as in Firefox), and prevents errors when
		 * called on other DOM objects.
		 */
		var _slice = (function() {
			var slice = Array.prototype.slice;

			try {
				// Can't be used with DOM elements in IE < 9
				slice.call(document.documentElement);
				return slice;
			} catch (e) { // Fails in IE < 9

				// This will work for genuine arrays, array-like objects, 
				// NamedNodeMap (attributes, entities, notations),
				// NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),
				// and will not fail on other DOM objects (as do DOM elements in IE < 9)
				return function(begin, end) {
					var len = this.length;

					if (typeof begin !== "number") {
						begin = 0;
					}
					// IE < 9 gets unhappy with an undefined end argument
					if (typeof end !== "number") {
						end = len;
					}
					// For native Array objects, we use the native slice function
					if (this.slice) {
						return slice.call(this, begin, end);
					}
					// For array like object we handle it ourselves.
					var i,
							cloned = [],
							// Handle negative value for "begin"
							start = (begin >= 0) ? begin : Math.max(0, len + begin),
							// Handle negative value for "end"
							upTo = end < 0 ? len + end : Math.min(end, len),
							// Actual expected size of the slice
							size = upTo - start;

					if (size > 0) {
						cloned = new Array(size);
						if (this.charAt) {
							for (i = 0; i < size; i++) {
								cloned[i] = this.charAt(start + i);
							}
						} else {
							for (i = 0; i < size; i++) {
								cloned[i] = this[start + i];
							}
						}
					}
					return cloned;
				};
			}
		})();

		/* .indexOf doesn't exist in IE<9 */
		var _inArray = (function() {
			if (Array.prototype.includes) {
				return function(arr, val) {
					return arr.includes(val);
				};
			}
			if (Array.prototype.indexOf) {
				return function(arr, val) {
					return arr.indexOf(val) >= 0;
				};
			}
			return function(arr, val) {
				for (var i = 0; i < arr.length; i++) {
					if (arr[i] === val) {
						return true;
					}
				}
				return false;
			};
		});

		function sanitizeElements(elements) {
			/* Unwrap jQuery/Zepto objects. */
			if (Type.isWrapped(elements)) {
				elements = _slice.call(elements);
				/* Wrap a single element in an array so that $.each() can iterate with the element instead of its node's children. */
			} else if (Type.isNode(elements)) {
				elements = [elements];
			}

			return elements;
		}

		var Type = {
			isNumber: function(variable) {
				return (typeof variable === "number");
			},
			isString: function(variable) {
				return (typeof variable === "string");
			},
			isArray: Array.isArray || function(variable) {
				return Object.prototype.toString.call(variable) === "[object Array]";
			},
			isFunction: function(variable) {
				return Object.prototype.toString.call(variable) === "[object Function]";
			},
			isNode: function(variable) {
				return variable && variable.nodeType;
			},
			/* Determine if variable is an array-like wrapped jQuery, Zepto or similar element, or even a NodeList etc. */
			/* NOTE: HTMLFormElements also have a length. */
			isWrapped: function(variable) {
				return variable
						&& variable !== window
						&& Type.isNumber(variable.length)
						&& !Type.isString(variable)
						&& !Type.isFunction(variable)
						&& !Type.isNode(variable)
						&& (variable.length === 0 || Type.isNode(variable[0]));
			},
			isSVG: function(variable) {
				return window.SVGElement && (variable instanceof window.SVGElement);
			},
			isEmptyObject: function(variable) {
				for (var name in variable) {
					if (variable.hasOwnProperty(name)) {
						return false;
					}
				}

				return true;
			}
		};

		/*****************
		 Dependencies
		 *****************/

		var $,
				isJQuery = false;

		if (global.fn && global.fn.jquery) {
			$ = global;
			isJQuery = true;
		} else {
			$ = window.Velocity.Utilities;
		}

		if (IE <= 8 && !isJQuery) {
			throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");
		} else if (IE <= 7) {
			/* Revert to jQuery's $.animate(), and lose Velocity's extra features. */
			jQuery.fn.velocity = jQuery.fn.animate;

			/* Now that $.fn.velocity is aliased, abort this Velocity declaration. */
			return;
		}

		/*****************
		 Constants
		 *****************/

		var DURATION_DEFAULT = 400,
				EASING_DEFAULT = "swing";

		/*************
		 State
		 *************/

		var Velocity = {
			/* Container for page-wide Velocity state data. */
			State: {
				/* Detect mobile devices to determine if mobileHA should be turned on. */
				isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(window.navigator.userAgent),
				/* The mobileHA option's behavior changes on older Android devices (Gingerbread, versions 2.3.3-2.3.7). */
				isAndroid: /Android/i.test(window.navigator.userAgent),
				isGingerbread: /Android 2\.3\.[3-7]/i.test(window.navigator.userAgent),
				isChrome: window.chrome,
				isFirefox: /Firefox/i.test(window.navigator.userAgent),
				/* Create a cached element for re-use when checking for CSS property prefixes. */
				prefixElement: document.createElement("div"),
				/* Cache every prefix match to avoid repeating lookups. */
				prefixMatches: {},
				/* Cache the anchor used for animating window scrolling. */
				scrollAnchor: null,
				/* Cache the browser-specific property names associated with the scroll anchor. */
				scrollPropertyLeft: null,
				scrollPropertyTop: null,
				/* Keep track of whether our RAF tick is running. */
				isTicking: false,
				/* Container for every in-progress call to Velocity. */
				calls: [],
				delayedElements: {
					count: 0
				}
			},
			/* Velocity's custom CSS stack. Made global for unit testing. */
			CSS: {/* Defined below. */},
			/* A shim of the jQuery utility functions used by Velocity -- provided by Velocity's optional jQuery shim. */
			Utilities: $,
			/* Container for the user's custom animation redirects that are referenced by name in place of the properties map argument. */
			Redirects: {/* Manually registered by the user. */},
			Easings: {/* Defined below. */},
			/* Attempt to use ES6 Promises by default. Users can override this with a third-party promises library. */
			Promise: window.Promise,
			/* Velocity option defaults, which can be overriden by the user. */
			defaults: {
				queue: "",
				duration: DURATION_DEFAULT,
				easing: EASING_DEFAULT,
				begin: undefined,
				complete: undefined,
				progress: undefined,
				display: undefined,
				visibility: undefined,
				loop: false,
				delay: false,
				mobileHA: true,
				/* Advanced: Set to false to prevent property values from being cached between consecutive Velocity-initiated chain calls. */
				_cacheValues: true,
				/* Advanced: Set to false if the promise should always resolve on empty element lists. */
				promiseRejectEmpty: true
			},
			/* A design goal of Velocity is to cache data wherever possible in order to avoid DOM requerying. Accordingly, each element has a data cache. */
			init: function(element) {
				$.data(element, "velocity", {
					/* Store whether this is an SVG element, since its properties are retrieved and updated differently than standard HTML elements. */
					isSVG: Type.isSVG(element),
					/* Keep track of whether the element is currently being animated by Velocity.
					 This is used to ensure that property values are not transferred between non-consecutive (stale) calls. */
					isAnimating: false,
					/* A reference to the element's live computedStyle object. Learn more here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */
					computedStyle: null,
					/* Tween data is cached for each animation on the element so that data can be passed across calls --
					 in particular, end values are used as subsequent start values in consecutive Velocity calls. */
					tweensContainer: null,
					/* The full root property values of each CSS hook being animated on this element are cached so that:
					 1) Concurrently-animating hooks sharing the same root can have their root values' merged into one while tweening.
					 2) Post-hook-injection root values can be transferred over to consecutively chained Velocity calls as starting root values. */
					rootPropertyValueCache: {},
					/* A cache for transform updates, which must be manually flushed via CSS.flushTransformCache(). */
					transformCache: {}
				});
			},
			/* A parallel to jQuery's $.css(), used for getting/setting Velocity's hooked CSS properties. */
			hook: null, /* Defined below. */
			/* Velocity-wide animation time remapping for testing purposes. */
			mock: false,
			version: {major: 1, minor: 5, patch: 1},
			/* Set to 1 or 2 (most verbose) to output debug info to console. */
			debug: false,
			/* Use rAF high resolution timestamp when available */
			timestamp: true,
			/* Pause all animations */
			pauseAll: function(queueName) {
				var currentTime = (new Date()).getTime();

				$.each(Velocity.State.calls, function(i, activeCall) {

					if (activeCall) {

						/* If we have a queueName and this call is not on that queue, skip */
						if (queueName !== undefined && ((activeCall[2].queue !== queueName) || (activeCall[2].queue === false))) {
							return true;
						}

						/* Set call to paused */
						activeCall[5] = {
							resume: false
						};
					}
				});

				/* Pause timers on any currently delayed calls */
				$.each(Velocity.State.delayedElements, function(k, element) {
					if (!element) {
						return;
					}
					pauseDelayOnElement(element, currentTime);
				});
			},
			/* Resume all animations */
			resumeAll: function(queueName) {
				var currentTime = (new Date()).getTime();

				$.each(Velocity.State.calls, function(i, activeCall) {

					if (activeCall) {

						/* If we have a queueName and this call is not on that queue, skip */
						if (queueName !== undefined && ((activeCall[2].queue !== queueName) || (activeCall[2].queue === false))) {
							return true;
						}

						/* Set call to resumed if it was paused */
						if (activeCall[5]) {
							activeCall[5].resume = true;
						}
					}
				});
				/* Resume timers on any currently delayed calls */
				$.each(Velocity.State.delayedElements, function(k, element) {
					if (!element) {
						return;
					}
					resumeDelayOnElement(element, currentTime);
				});
			}
		};

		/* Retrieve the appropriate scroll anchor and property name for the browser: https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY */
		if (window.pageYOffset !== undefined) {
			Velocity.State.scrollAnchor = window;
			Velocity.State.scrollPropertyLeft = "pageXOffset";
			Velocity.State.scrollPropertyTop = "pageYOffset";
		} else {
			Velocity.State.scrollAnchor = document.documentElement || document.body.parentNode || document.body;
			Velocity.State.scrollPropertyLeft = "scrollLeft";
			Velocity.State.scrollPropertyTop = "scrollTop";
		}

		/* Shorthand alias for jQuery's $.data() utility. */
		function Data(element) {
			/* Hardcode a reference to the plugin name. */
			var response = $.data(element, "velocity");

			/* jQuery <=1.4.2 returns null instead of undefined when no match is found. We normalize this behavior. */
			return response === null ? undefined : response;
		}

		/**************
		 Delay Timer
		 **************/

		function pauseDelayOnElement(element, currentTime) {
			/* Check for any delay timers, and pause the set timeouts (while preserving time data)
			 to be resumed when the "resume" command is issued */
			var data = Data(element);
			if (data && data.delayTimer && !data.delayPaused) {
				data.delayRemaining = data.delay - currentTime + data.delayBegin;
				data.delayPaused = true;
				clearTimeout(data.delayTimer.setTimeout);
			}
		}

		function resumeDelayOnElement(element, currentTime) {
			/* Check for any paused timers and resume */
			var data = Data(element);
			if (data && data.delayTimer && data.delayPaused) {
				/* If the element was mid-delay, re initiate the timeout with the remaining delay */
				data.delayPaused = false;
				data.delayTimer.setTimeout = setTimeout(data.delayTimer.next, data.delayRemaining);
			}
		}



		/**************
		 Easing
		 **************/

		/* Step easing generator. */
		function generateStep(steps) {
			return function(p) {
				return Math.round(p * steps) * (1 / steps);
			};
		}

		/* Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
		function generateBezier(mX1, mY1, mX2, mY2) {
			var NEWTON_ITERATIONS = 4,
					NEWTON_MIN_SLOPE = 0.001,
					SUBDIVISION_PRECISION = 0.0000001,
					SUBDIVISION_MAX_ITERATIONS = 10,
					kSplineTableSize = 11,
					kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
					float32ArraySupported = "Float32Array" in window;

			/* Must contain four arguments. */
			if (arguments.length !== 4) {
				return false;
			}

			/* Arguments must be numbers. */
			for (var i = 0; i < 4; ++i) {
				if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
					return false;
				}
			}

			/* X values must be in the [0, 1] range. */
			mX1 = Math.min(mX1, 1);
			mX2 = Math.min(mX2, 1);
			mX1 = Math.max(mX1, 0);
			mX2 = Math.max(mX2, 0);

			var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

			function A(aA1, aA2) {
				return 1.0 - 3.0 * aA2 + 3.0 * aA1;
			}
			function B(aA1, aA2) {
				return 3.0 * aA2 - 6.0 * aA1;
			}
			function C(aA1) {
				return 3.0 * aA1;
			}

			function calcBezier(aT, aA1, aA2) {
				return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
			}

			function getSlope(aT, aA1, aA2) {
				return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
			}

			function newtonRaphsonIterate(aX, aGuessT) {
				for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
					var currentSlope = getSlope(aGuessT, mX1, mX2);

					if (currentSlope === 0.0) {
						return aGuessT;
					}

					var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
					aGuessT -= currentX / currentSlope;
				}

				return aGuessT;
			}

			function calcSampleValues() {
				for (var i = 0; i < kSplineTableSize; ++i) {
					mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
				}
			}

			function binarySubdivide(aX, aA, aB) {
				var currentX, currentT, i = 0;

				do {
					currentT = aA + (aB - aA) / 2.0;
					currentX = calcBezier(currentT, mX1, mX2) - aX;
					if (currentX > 0.0) {
						aB = currentT;
					} else {
						aA = currentT;
					}
				} while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

				return currentT;
			}

			function getTForX(aX) {
				var intervalStart = 0.0,
						currentSample = 1,
						lastSample = kSplineTableSize - 1;

				for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
					intervalStart += kSampleStepSize;
				}

				--currentSample;

				var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
						guessForT = intervalStart + dist * kSampleStepSize,
						initialSlope = getSlope(guessForT, mX1, mX2);

				if (initialSlope >= NEWTON_MIN_SLOPE) {
					return newtonRaphsonIterate(aX, guessForT);
				} else if (initialSlope === 0.0) {
					return guessForT;
				} else {
					return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
				}
			}

			var _precomputed = false;

			function precompute() {
				_precomputed = true;
				if (mX1 !== mY1 || mX2 !== mY2) {
					calcSampleValues();
				}
			}

			var f = function(aX) {
				if (!_precomputed) {
					precompute();
				}
				if (mX1 === mY1 && mX2 === mY2) {
					return aX;
				}
				if (aX === 0) {
					return 0;
				}
				if (aX === 1) {
					return 1;
				}

				return calcBezier(getTForX(aX), mY1, mY2);
			};

			f.getControlPoints = function() {
				return [{x: mX1, y: mY1}, {x: mX2, y: mY2}];
			};

			var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
			f.toString = function() {
				return str;
			};

			return f;
		}

		/* Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
		/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
		 then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
		var generateSpringRK4 = (function() {
			function springAccelerationForState(state) {
				return (-state.tension * state.x) - (state.friction * state.v);
			}

			function springEvaluateStateWithDerivative(initialState, dt, derivative) {
				var state = {
					x: initialState.x + derivative.dx * dt,
					v: initialState.v + derivative.dv * dt,
					tension: initialState.tension,
					friction: initialState.friction
				};

				return {dx: state.v, dv: springAccelerationForState(state)};
			}

			function springIntegrateState(state, dt) {
				var a = {
					dx: state.v,
					dv: springAccelerationForState(state)
				},
						b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
						c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
						d = springEvaluateStateWithDerivative(state, dt, c),
						dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
						dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);

				state.x = state.x + dxdt * dt;
				state.v = state.v + dvdt * dt;

				return state;
			}

			return function springRK4Factory(tension, friction, duration) {

				var initState = {
					x: -1,
					v: 0,
					tension: null,
					friction: null
				},
						path = [0],
						time_lapsed = 0,
						tolerance = 1 / 10000,
						DT = 16 / 1000,
						have_duration, dt, last_state;

				tension = parseFloat(tension) || 500;
				friction = parseFloat(friction) || 20;
				duration = duration || null;

				initState.tension = tension;
				initState.friction = friction;

				have_duration = duration !== null;

				/* Calculate the actual time it takes for this animation to complete with the provided conditions. */
				if (have_duration) {
					/* Run the simulation without a duration. */
					time_lapsed = springRK4Factory(tension, friction);
					/* Compute the adjusted time delta. */
					dt = time_lapsed / duration * DT;
				} else {
					dt = DT;
				}

				while (true) {
					/* Next/step function .*/
					last_state = springIntegrateState(last_state || initState, dt);
					/* Store the position. */
					path.push(1 + last_state.x);
					time_lapsed += 16;
					/* If the change threshold is reached, break. */
					if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
						break;
					}
				}

				/* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
				 computed path and returns a snapshot of the position according to a given percentComplete. */
				return !have_duration ? time_lapsed : function(percentComplete) {
					return path[ (percentComplete * (path.length - 1)) | 0 ];
				};
			};
		}());

		/* jQuery easings. */
		Velocity.Easings = {
			linear: function(p) {
				return p;
			},
			swing: function(p) {
				return 0.5 - Math.cos(p * Math.PI) / 2;
			},
			/* Bonus "spring" easing, which is a less exaggerated version of easeInOutElastic. */
			spring: function(p) {
				return 1 - (Math.cos(p * 4.5 * Math.PI) * Math.exp(-p * 6));
			}
		};

		/* CSS3 and Robert Penner easings. */
		$.each(
				[
					["ease", [0.25, 0.1, 0.25, 1.0]],
					["ease-in", [0.42, 0.0, 1.00, 1.0]],
					["ease-out", [0.00, 0.0, 0.58, 1.0]],
					["ease-in-out", [0.42, 0.0, 0.58, 1.0]],
					["easeInSine", [0.47, 0, 0.745, 0.715]],
					["easeOutSine", [0.39, 0.575, 0.565, 1]],
					["easeInOutSine", [0.445, 0.05, 0.55, 0.95]],
					["easeInQuad", [0.55, 0.085, 0.68, 0.53]],
					["easeOutQuad", [0.25, 0.46, 0.45, 0.94]],
					["easeInOutQuad", [0.455, 0.03, 0.515, 0.955]],
					["easeInCubic", [0.55, 0.055, 0.675, 0.19]],
					["easeOutCubic", [0.215, 0.61, 0.355, 1]],
					["easeInOutCubic", [0.645, 0.045, 0.355, 1]],
					["easeInQuart", [0.895, 0.03, 0.685, 0.22]],
					["easeOutQuart", [0.165, 0.84, 0.44, 1]],
					["easeInOutQuart", [0.77, 0, 0.175, 1]],
					["easeInQuint", [0.755, 0.05, 0.855, 0.06]],
					["easeOutQuint", [0.23, 1, 0.32, 1]],
					["easeInOutQuint", [0.86, 0, 0.07, 1]],
					["easeInExpo", [0.95, 0.05, 0.795, 0.035]],
					["easeOutExpo", [0.19, 1, 0.22, 1]],
					["easeInOutExpo", [1, 0, 0, 1]],
					["easeInCirc", [0.6, 0.04, 0.98, 0.335]],
					["easeOutCirc", [0.075, 0.82, 0.165, 1]],
					["easeInOutCirc", [0.785, 0.135, 0.15, 0.86]]
				], function(i, easingArray) {
			Velocity.Easings[easingArray[0]] = generateBezier.apply(null, easingArray[1]);
		});

		/* Determine the appropriate easing type given an easing input. */
		function getEasing(value, duration) {
			var easing = value;

			/* The easing option can either be a string that references a pre-registered easing,
			 or it can be a two-/four-item array of integers to be converted into a bezier/spring function. */
			if (Type.isString(value)) {
				/* Ensure that the easing has been assigned to jQuery's Velocity.Easings object. */
				if (!Velocity.Easings[value]) {
					easing = false;
				}
			} else if (Type.isArray(value) && value.length === 1) {
				easing = generateStep.apply(null, value);
			} else if (Type.isArray(value) && value.length === 2) {
				/* springRK4 must be passed the animation's duration. */
				/* Note: If the springRK4 array contains non-numbers, generateSpringRK4() returns an easing
				 function generated with default tension and friction values. */
				easing = generateSpringRK4.apply(null, value.concat([duration]));
			} else if (Type.isArray(value) && value.length === 4) {
				/* Note: If the bezier array contains non-numbers, generateBezier() returns false. */
				easing = generateBezier.apply(null, value);
			} else {
				easing = false;
			}

			/* Revert to the Velocity-wide default easing type, or fall back to "swing" (which is also jQuery's default)
			 if the Velocity-wide default has been incorrectly modified. */
			if (easing === false) {
				if (Velocity.Easings[Velocity.defaults.easing]) {
					easing = Velocity.defaults.easing;
				} else {
					easing = EASING_DEFAULT;
				}
			}

			return easing;
		}

		/*****************
		 CSS Stack
		 *****************/

		/* The CSS object is a highly condensed and performant CSS stack that fully replaces jQuery's.
		 It handles the validation, getting, and setting of both standard CSS properties and CSS property hooks. */
		/* Note: A "CSS" shorthand is aliased so that our code is easier to read. */
		var CSS = Velocity.CSS = {
			/*************
			 RegEx
			 *************/

			RegEx: {
				isHex: /^#([A-f\d]{3}){1,2}$/i,
				/* Unwrap a property value's surrounding text, e.g. "rgba(4, 3, 2, 1)" ==> "4, 3, 2, 1" and "rect(4px 3px 2px 1px)" ==> "4px 3px 2px 1px". */
				valueUnwrap: /^[A-z]+\((.*)\)$/i,
				wrappedValueAlreadyExtracted: /[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,
				/* Split a multi-value property into an array of subvalues, e.g. "rgba(4, 3, 2, 1) 4px 3px 2px 1px" ==> [ "rgba(4, 3, 2, 1)", "4px", "3px", "2px", "1px" ]. */
				valueSplit: /([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/ig
			},
			/************
			 Lists
			 ************/

			Lists: {
				colors: ["fill", "stroke", "stopColor", "color", "backgroundColor", "borderColor", "borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor", "outlineColor"],
				transformsBase: ["translateX", "translateY", "scale", "scaleX", "scaleY", "skewX", "skewY", "rotateZ"],
				transforms3D: ["transformPerspective", "translateZ", "scaleZ", "rotateX", "rotateY"],
				units: [
					"%", // relative
					"em", "ex", "ch", "rem", // font relative
					"vw", "vh", "vmin", "vmax", // viewport relative
					"cm", "mm", "Q", "in", "pc", "pt", "px", // absolute lengths
					"deg", "grad", "rad", "turn", // angles
					"s", "ms" // time
				],
				colorNames: {
					"aliceblue": "240,248,255",
					"antiquewhite": "250,235,215",
					"aquamarine": "127,255,212",
					"aqua": "0,255,255",
					"azure": "240,255,255",
					"beige": "245,245,220",
					"bisque": "255,228,196",
					"black": "0,0,0",
					"blanchedalmond": "255,235,205",
					"blueviolet": "138,43,226",
					"blue": "0,0,255",
					"brown": "165,42,42",
					"burlywood": "222,184,135",
					"cadetblue": "95,158,160",
					"chartreuse": "127,255,0",
					"chocolate": "210,105,30",
					"coral": "255,127,80",
					"cornflowerblue": "100,149,237",
					"cornsilk": "255,248,220",
					"crimson": "220,20,60",
					"cyan": "0,255,255",
					"darkblue": "0,0,139",
					"darkcyan": "0,139,139",
					"darkgoldenrod": "184,134,11",
					"darkgray": "169,169,169",
					"darkgrey": "169,169,169",
					"darkgreen": "0,100,0",
					"darkkhaki": "189,183,107",
					"darkmagenta": "139,0,139",
					"darkolivegreen": "85,107,47",
					"darkorange": "255,140,0",
					"darkorchid": "153,50,204",
					"darkred": "139,0,0",
					"darksalmon": "233,150,122",
					"darkseagreen": "143,188,143",
					"darkslateblue": "72,61,139",
					"darkslategray": "47,79,79",
					"darkturquoise": "0,206,209",
					"darkviolet": "148,0,211",
					"deeppink": "255,20,147",
					"deepskyblue": "0,191,255",
					"dimgray": "105,105,105",
					"dimgrey": "105,105,105",
					"dodgerblue": "30,144,255",
					"firebrick": "178,34,34",
					"floralwhite": "255,250,240",
					"forestgreen": "34,139,34",
					"fuchsia": "255,0,255",
					"gainsboro": "220,220,220",
					"ghostwhite": "248,248,255",
					"gold": "255,215,0",
					"goldenrod": "218,165,32",
					"gray": "128,128,128",
					"grey": "128,128,128",
					"greenyellow": "173,255,47",
					"green": "0,128,0",
					"honeydew": "240,255,240",
					"hotpink": "255,105,180",
					"indianred": "205,92,92",
					"indigo": "75,0,130",
					"ivory": "255,255,240",
					"khaki": "240,230,140",
					"lavenderblush": "255,240,245",
					"lavender": "230,230,250",
					"lawngreen": "124,252,0",
					"lemonchiffon": "255,250,205",
					"lightblue": "173,216,230",
					"lightcoral": "240,128,128",
					"lightcyan": "224,255,255",
					"lightgoldenrodyellow": "250,250,210",
					"lightgray": "211,211,211",
					"lightgrey": "211,211,211",
					"lightgreen": "144,238,144",
					"lightpink": "255,182,193",
					"lightsalmon": "255,160,122",
					"lightseagreen": "32,178,170",
					"lightskyblue": "135,206,250",
					"lightslategray": "119,136,153",
					"lightsteelblue": "176,196,222",
					"lightyellow": "255,255,224",
					"limegreen": "50,205,50",
					"lime": "0,255,0",
					"linen": "250,240,230",
					"magenta": "255,0,255",
					"maroon": "128,0,0",
					"mediumaquamarine": "102,205,170",
					"mediumblue": "0,0,205",
					"mediumorchid": "186,85,211",
					"mediumpurple": "147,112,219",
					"mediumseagreen": "60,179,113",
					"mediumslateblue": "123,104,238",
					"mediumspringgreen": "0,250,154",
					"mediumturquoise": "72,209,204",
					"mediumvioletred": "199,21,133",
					"midnightblue": "25,25,112",
					"mintcream": "245,255,250",
					"mistyrose": "255,228,225",
					"moccasin": "255,228,181",
					"navajowhite": "255,222,173",
					"navy": "0,0,128",
					"oldlace": "253,245,230",
					"olivedrab": "107,142,35",
					"olive": "128,128,0",
					"orangered": "255,69,0",
					"orange": "255,165,0",
					"orchid": "218,112,214",
					"palegoldenrod": "238,232,170",
					"palegreen": "152,251,152",
					"paleturquoise": "175,238,238",
					"palevioletred": "219,112,147",
					"papayawhip": "255,239,213",
					"peachpuff": "255,218,185",
					"peru": "205,133,63",
					"pink": "255,192,203",
					"plum": "221,160,221",
					"powderblue": "176,224,230",
					"purple": "128,0,128",
					"red": "255,0,0",
					"rosybrown": "188,143,143",
					"royalblue": "65,105,225",
					"saddlebrown": "139,69,19",
					"salmon": "250,128,114",
					"sandybrown": "244,164,96",
					"seagreen": "46,139,87",
					"seashell": "255,245,238",
					"sienna": "160,82,45",
					"silver": "192,192,192",
					"skyblue": "135,206,235",
					"slateblue": "106,90,205",
					"slategray": "112,128,144",
					"snow": "255,250,250",
					"springgreen": "0,255,127",
					"steelblue": "70,130,180",
					"tan": "210,180,140",
					"teal": "0,128,128",
					"thistle": "216,191,216",
					"tomato": "255,99,71",
					"turquoise": "64,224,208",
					"violet": "238,130,238",
					"wheat": "245,222,179",
					"whitesmoke": "245,245,245",
					"white": "255,255,255",
					"yellowgreen": "154,205,50",
					"yellow": "255,255,0"
				}
			},
			/************
			 Hooks
			 ************/

			/* Hooks allow a subproperty (e.g. "boxShadowBlur") of a compound-value CSS property
			 (e.g. "boxShadow: X Y Blur Spread Color") to be animated as if it were a discrete property. */
			/* Note: Beyond enabling fine-grained property animation, hooking is necessary since Velocity only
			 tweens properties with single numeric values; unlike CSS transitions, Velocity does not interpolate compound-values. */
			Hooks: {
				/********************
				 Registration
				 ********************/

				/* Templates are a concise way of indicating which subproperties must be individually registered for each compound-value CSS property. */
				/* Each template consists of the compound-value's base name, its constituent subproperty names, and those subproperties' default values. */
				templates: {
					"textShadow": ["Color X Y Blur", "black 0px 0px 0px"],
					"boxShadow": ["Color X Y Blur Spread", "black 0px 0px 0px 0px"],
					"clip": ["Top Right Bottom Left", "0px 0px 0px 0px"],
					"backgroundPosition": ["X Y", "0% 0%"],
					"transformOrigin": ["X Y Z", "50% 50% 0px"],
					"perspectiveOrigin": ["X Y", "50% 50%"]
				},
				/* A "registered" hook is one that has been converted from its template form into a live,
				 tweenable property. It contains data to associate it with its root property. */
				registered: {
					/* Note: A registered hook looks like this ==> textShadowBlur: [ "textShadow", 3 ],
					 which consists of the subproperty's name, the associated root property's name,
					 and the subproperty's position in the root's value. */
				},
				/* Convert the templates into individual hooks then append them to the registered object above. */
				register: function() {
					/* Color hooks registration: Colors are defaulted to white -- as opposed to black -- since colors that are
					 currently set to "transparent" default to their respective template below when color-animated,
					 and white is typically a closer match to transparent than black is. An exception is made for text ("color"),
					 which is almost always set closer to black than white. */
					for (var i = 0; i < CSS.Lists.colors.length; i++) {
						var rgbComponents = (CSS.Lists.colors[i] === "color") ? "0 0 0 1" : "255 255 255 1";
						CSS.Hooks.templates[CSS.Lists.colors[i]] = ["Red Green Blue Alpha", rgbComponents];
					}

					var rootProperty,
							hookTemplate,
							hookNames;

					/* In IE, color values inside compound-value properties are positioned at the end the value instead of at the beginning.
					 Thus, we re-arrange the templates accordingly. */
					if (IE) {
						for (rootProperty in CSS.Hooks.templates) {
							if (!CSS.Hooks.templates.hasOwnProperty(rootProperty)) {
								continue;
							}
							hookTemplate = CSS.Hooks.templates[rootProperty];
							hookNames = hookTemplate[0].split(" ");

							var defaultValues = hookTemplate[1].match(CSS.RegEx.valueSplit);

							if (hookNames[0] === "Color") {
								/* Reposition both the hook's name and its default value to the end of their respective strings. */
								hookNames.push(hookNames.shift());
								defaultValues.push(defaultValues.shift());

								/* Replace the existing template for the hook's root property. */
								CSS.Hooks.templates[rootProperty] = [hookNames.join(" "), defaultValues.join(" ")];
							}
						}
					}

					/* Hook registration. */
					for (rootProperty in CSS.Hooks.templates) {
						if (!CSS.Hooks.templates.hasOwnProperty(rootProperty)) {
							continue;
						}
						hookTemplate = CSS.Hooks.templates[rootProperty];
						hookNames = hookTemplate[0].split(" ");

						for (var j in hookNames) {
							if (!hookNames.hasOwnProperty(j)) {
								continue;
							}
							var fullHookName = rootProperty + hookNames[j],
									hookPosition = j;

							/* For each hook, register its full name (e.g. textShadowBlur) with its root property (e.g. textShadow)
							 and the hook's position in its template's default value string. */
							CSS.Hooks.registered[fullHookName] = [rootProperty, hookPosition];
						}
					}
				},
				/*****************************
				 Injection and Extraction
				 *****************************/

				/* Look up the root property associated with the hook (e.g. return "textShadow" for "textShadowBlur"). */
				/* Since a hook cannot be set directly (the browser won't recognize it), style updating for hooks is routed through the hook's root property. */
				getRoot: function(property) {
					var hookData = CSS.Hooks.registered[property];

					if (hookData) {
						return hookData[0];
					} else {
						/* If there was no hook match, return the property name untouched. */
						return property;
					}
				},
				getUnit: function(str, start) {
					var unit = (str.substr(start || 0, 5).match(/^[a-z%]+/) || [])[0] || "";

					if (unit && _inArray(CSS.Lists.units, unit)) {
						return unit;
					}
					return "";
				},
				fixColors: function(str) {
					return str.replace(/(rgba?\(\s*)?(\b[a-z]+\b)/g, function($0, $1, $2) {
						if (CSS.Lists.colorNames.hasOwnProperty($2)) {
							return ($1 ? $1 : "rgba(") + CSS.Lists.colorNames[$2] + ($1 ? "" : ",1)");
						}
						return $1 + $2;
					});
				},
				/* Convert any rootPropertyValue, null or otherwise, into a space-delimited list of hook values so that
				 the targeted hook can be injected or extracted at its standard position. */
				cleanRootPropertyValue: function(rootProperty, rootPropertyValue) {
					/* If the rootPropertyValue is wrapped with "rgb()", "clip()", etc., remove the wrapping to normalize the value before manipulation. */
					if (CSS.RegEx.valueUnwrap.test(rootPropertyValue)) {
						rootPropertyValue = rootPropertyValue.match(CSS.RegEx.valueUnwrap)[1];
					}

					/* If rootPropertyValue is a CSS null-value (from which there's inherently no hook value to extract),
					 default to the root's default value as defined in CSS.Hooks.templates. */
					/* Note: CSS null-values include "none", "auto", and "transparent". They must be converted into their
					 zero-values (e.g. textShadow: "none" ==> textShadow: "0px 0px 0px black") for hook manipulation to proceed. */
					if (CSS.Values.isCSSNullValue(rootPropertyValue)) {
						rootPropertyValue = CSS.Hooks.templates[rootProperty][1];
					}

					return rootPropertyValue;
				},
				/* Extracted the hook's value from its root property's value. This is used to get the starting value of an animating hook. */
				extractValue: function(fullHookName, rootPropertyValue) {
					var hookData = CSS.Hooks.registered[fullHookName];

					if (hookData) {
						var hookRoot = hookData[0],
								hookPosition = hookData[1];

						rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);

						/* Split rootPropertyValue into its constituent hook values then grab the desired hook at its standard position. */
						return rootPropertyValue.toString().match(CSS.RegEx.valueSplit)[hookPosition];
					} else {
						/* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */
						return rootPropertyValue;
					}
				},
				/* Inject the hook's value into its root property's value. This is used to piece back together the root property
				 once Velocity has updated one of its individually hooked values through tweening. */
				injectValue: function(fullHookName, hookValue, rootPropertyValue) {
					var hookData = CSS.Hooks.registered[fullHookName];

					if (hookData) {
						var hookRoot = hookData[0],
								hookPosition = hookData[1],
								rootPropertyValueParts,
								rootPropertyValueUpdated;

						rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);

						/* Split rootPropertyValue into its individual hook values, replace the targeted value with hookValue,
						 then reconstruct the rootPropertyValue string. */
						rootPropertyValueParts = rootPropertyValue.toString().match(CSS.RegEx.valueSplit);
						rootPropertyValueParts[hookPosition] = hookValue;
						rootPropertyValueUpdated = rootPropertyValueParts.join(" ");

						return rootPropertyValueUpdated;
					} else {
						/* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */
						return rootPropertyValue;
					}
				}
			},
			/*******************
			 Normalizations
			 *******************/

			/* Normalizations standardize CSS property manipulation by pollyfilling browser-specific implementations (e.g. opacity)
			 and reformatting special properties (e.g. clip, rgba) to look like standard ones. */
			Normalizations: {
				/* Normalizations are passed a normalization target (either the property's name, its extracted value, or its injected value),
				 the targeted element (which may need to be queried), and the targeted property value. */
				registered: {
					clip: function(type, element, propertyValue) {
						switch (type) {
							case "name":
								return "clip";
								/* Clip needs to be unwrapped and stripped of its commas during extraction. */
							case "extract":
								var extracted;

								/* If Velocity also extracted this value, skip extraction. */
								if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
									extracted = propertyValue;
								} else {
									/* Remove the "rect()" wrapper. */
									extracted = propertyValue.toString().match(CSS.RegEx.valueUnwrap);

									/* Strip off commas. */
									extracted = extracted ? extracted[1].replace(/,(\s+)?/g, " ") : propertyValue;
								}

								return extracted;
								/* Clip needs to be re-wrapped during injection. */
							case "inject":
								return "rect(" + propertyValue + ")";
						}
					},
					blur: function(type, element, propertyValue) {
						switch (type) {
							case "name":
								return Velocity.State.isFirefox ? "filter" : "-webkit-filter";
							case "extract":
								var extracted = parseFloat(propertyValue);

								/* If extracted is NaN, meaning the value isn't already extracted. */
								if (!(extracted || extracted === 0)) {
									var blurComponent = propertyValue.toString().match(/blur\(([0-9]+[A-z]+)\)/i);

									/* If the filter string had a blur component, return just the blur value and unit type. */
									if (blurComponent) {
										extracted = blurComponent[1];
										/* If the component doesn't exist, default blur to 0. */
									} else {
										extracted = 0;
									}
								}

								return extracted;
								/* Blur needs to be re-wrapped during injection. */
							case "inject":
								/* For the blur effect to be fully de-applied, it needs to be set to "none" instead of 0. */
								if (!parseFloat(propertyValue)) {
									return "none";
								} else {
									return "blur(" + propertyValue + ")";
								}
						}
					},
					/* <=IE8 do not support the standard opacity property. They use filter:alpha(opacity=INT) instead. */
					opacity: function(type, element, propertyValue) {
						if (IE <= 8) {
							switch (type) {
								case "name":
									return "filter";
								case "extract":
									/* <=IE8 return a "filter" value of "alpha(opacity=\d{1,3})".
									 Extract the value and convert it to a decimal value to match the standard CSS opacity property's formatting. */
									var extracted = propertyValue.toString().match(/alpha\(opacity=(.*)\)/i);

									if (extracted) {
										/* Convert to decimal value. */
										propertyValue = extracted[1] / 100;
									} else {
										/* When extracting opacity, default to 1 since a null value means opacity hasn't been set. */
										propertyValue = 1;
									}

									return propertyValue;
								case "inject":
									/* Opacified elements are required to have their zoom property set to a non-zero value. */
									element.style.zoom = 1;

									/* Setting the filter property on elements with certain font property combinations can result in a
									 highly unappealing ultra-bolding effect. There's no way to remedy this throughout a tween, but dropping the
									 value altogether (when opacity hits 1) at leasts ensures that the glitch is gone post-tweening. */
									if (parseFloat(propertyValue) >= 1) {
										return "";
									} else {
										/* As per the filter property's spec, convert the decimal value to a whole number and wrap the value. */
										return "alpha(opacity=" + parseInt(parseFloat(propertyValue) * 100, 10) + ")";
									}
							}
							/* With all other browsers, normalization is not required; return the same values that were passed in. */
						} else {
							switch (type) {
								case "name":
									return "opacity";
								case "extract":
									return propertyValue;
								case "inject":
									return propertyValue;
							}
						}
					}
				},
				/*****************************
				 Batched Registrations
				 *****************************/

				/* Note: Batched normalizations extend the CSS.Normalizations.registered object. */
				register: function() {

					/*****************
					 Transforms
					 *****************/

					/* Transforms are the subproperties contained by the CSS "transform" property. Transforms must undergo normalization
					 so that they can be referenced in a properties map by their individual names. */
					/* Note: When transforms are "set", they are actually assigned to a per-element transformCache. When all transform
					 setting is complete complete, CSS.flushTransformCache() must be manually called to flush the values to the DOM.
					 Transform setting is batched in this way to improve performance: the transform style only needs to be updated
					 once when multiple transform subproperties are being animated simultaneously. */
					/* Note: IE9 and Android Gingerbread have support for 2D -- but not 3D -- transforms. Since animating unsupported
					 transform properties results in the browser ignoring the *entire* transform string, we prevent these 3D values
					 from being normalized for these browsers so that tweening skips these properties altogether
					 (since it will ignore them as being unsupported by the browser.) */
					if ((!IE || IE > 9) && !Velocity.State.isGingerbread) {
						/* Note: Since the standalone CSS "perspective" property and the CSS transform "perspective" subproperty
						 share the same name, the latter is given a unique token within Velocity: "transformPerspective". */
						CSS.Lists.transformsBase = CSS.Lists.transformsBase.concat(CSS.Lists.transforms3D);
					}

					for (var i = 0; i < CSS.Lists.transformsBase.length; i++) {
						/* Wrap the dynamically generated normalization function in a new scope so that transformName's value is
						 paired with its respective function. (Otherwise, all functions would take the final for loop's transformName.) */
						(function() {
							var transformName = CSS.Lists.transformsBase[i];

							CSS.Normalizations.registered[transformName] = function(type, element, propertyValue) {
								switch (type) {
									/* The normalized property name is the parent "transform" property -- the property that is actually set in CSS. */
									case "name":
										return "transform";
										/* Transform values are cached onto a per-element transformCache object. */
									case "extract":
										/* If this transform has yet to be assigned a value, return its null value. */
										if (Data(element) === undefined || Data(element).transformCache[transformName] === undefined) {
											/* Scale CSS.Lists.transformsBase default to 1 whereas all other transform properties default to 0. */
											return /^scale/i.test(transformName) ? 1 : 0;
											/* When transform values are set, they are wrapped in parentheses as per the CSS spec.
											 Thus, when extracting their values (for tween calculations), we strip off the parentheses. */
										}
										return Data(element).transformCache[transformName].replace(/[()]/g, "");
									case "inject":
										var invalid = false;

										/* If an individual transform property contains an unsupported unit type, the browser ignores the *entire* transform property.
										 Thus, protect users from themselves by skipping setting for transform values supplied with invalid unit types. */
										/* Switch on the base transform type; ignore the axis by removing the last letter from the transform's name. */
										switch (transformName.substr(0, transformName.length - 1)) {
											/* Whitelist unit types for each transform. */
											case "translate":
												invalid = !/(%|px|em|rem|vw|vh|\d)$/i.test(propertyValue);
												break;
												/* Since an axis-free "scale" property is supported as well, a little hack is used here to detect it by chopping off its last letter. */
											case "scal":
											case "scale":
												/* Chrome on Android has a bug in which scaled elements blur if their initial scale
												 value is below 1 (which can happen with forcefeeding). Thus, we detect a yet-unset scale property
												 and ensure that its first value is always 1. More info: http://stackoverflow.com/questions/10417890/css3-animations-with-transform-causes-blurred-elements-on-webkit/10417962#10417962 */
												if (Velocity.State.isAndroid && Data(element).transformCache[transformName] === undefined && propertyValue < 1) {
													propertyValue = 1;
												}

												invalid = !/(\d)$/i.test(propertyValue);
												break;
											case "skew":
												invalid = !/(deg|\d)$/i.test(propertyValue);
												break;
											case "rotate":
												invalid = !/(deg|\d)$/i.test(propertyValue);
												break;
										}

										if (!invalid) {
											/* As per the CSS spec, wrap the value in parentheses. */
											Data(element).transformCache[transformName] = "(" + propertyValue + ")";
										}

										/* Although the value is set on the transformCache object, return the newly-updated value for the calling code to process as normal. */
										return Data(element).transformCache[transformName];
								}
							};
						})();
					}

					/*************
					 Colors
					 *************/

					/* Since Velocity only animates a single numeric value per property, color animation is achieved by hooking the individual RGBA components of CSS color properties.
					 Accordingly, color values must be normalized (e.g. "#ff0000", "red", and "rgb(255, 0, 0)" ==> "255 0 0 1") so that their components can be injected/extracted by CSS.Hooks logic. */
					for (var j = 0; j < CSS.Lists.colors.length; j++) {
						/* Wrap the dynamically generated normalization function in a new scope so that colorName's value is paired with its respective function.
						 (Otherwise, all functions would take the final for loop's colorName.) */
						(function() {
							var colorName = CSS.Lists.colors[j];

							/* Note: In IE<=8, which support rgb but not rgba, color properties are reverted to rgb by stripping off the alpha component. */
							CSS.Normalizations.registered[colorName] = function(type, element, propertyValue) {
								switch (type) {
									case "name":
										return colorName;
										/* Convert all color values into the rgb format. (Old IE can return hex values and color names instead of rgb/rgba.) */
									case "extract":
										var extracted;

										/* If the color is already in its hookable form (e.g. "255 255 255 1") due to having been previously extracted, skip extraction. */
										if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
											extracted = propertyValue;
										} else {
											var converted,
													colorNames = {
														black: "rgb(0, 0, 0)",
														blue: "rgb(0, 0, 255)",
														gray: "rgb(128, 128, 128)",
														green: "rgb(0, 128, 0)",
														red: "rgb(255, 0, 0)",
														white: "rgb(255, 255, 255)"
													};

											/* Convert color names to rgb. */
											if (/^[A-z]+$/i.test(propertyValue)) {
												if (colorNames[propertyValue] !== undefined) {
													converted = colorNames[propertyValue];
												} else {
													/* If an unmatched color name is provided, default to black. */
													converted = colorNames.black;
												}
												/* Convert hex values to rgb. */
											} else if (CSS.RegEx.isHex.test(propertyValue)) {
												converted = "rgb(" + CSS.Values.hexToRgb(propertyValue).join(" ") + ")";
												/* If the provided color doesn't match any of the accepted color formats, default to black. */
											} else if (!(/^rgba?\(/i.test(propertyValue))) {
												converted = colorNames.black;
											}

											/* Remove the surrounding "rgb/rgba()" string then replace commas with spaces and strip
											 repeated spaces (in case the value included spaces to begin with). */
											extracted = (converted || propertyValue).toString().match(CSS.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g, " ");
										}

										/* So long as this isn't <=IE8, add a fourth (alpha) component if it's missing and default it to 1 (visible). */
										if ((!IE || IE > 8) && extracted.split(" ").length === 3) {
											extracted += " 1";
										}

										return extracted;
									case "inject":
										/* If we have a pattern then it might already have the right values */
										if (/^rgb/.test(propertyValue)) {
											return propertyValue;
										}

										/* If this is IE<=8 and an alpha component exists, strip it off. */
										if (IE <= 8) {
											if (propertyValue.split(" ").length === 4) {
												propertyValue = propertyValue.split(/\s+/).slice(0, 3).join(" ");
											}
											/* Otherwise, add a fourth (alpha) component if it's missing and default it to 1 (visible). */
										} else if (propertyValue.split(" ").length === 3) {
											propertyValue += " 1";
										}

										/* Re-insert the browser-appropriate wrapper("rgb/rgba()"), insert commas, and strip off decimal units
										 on all values but the fourth (R, G, and B only accept whole numbers). */
										return (IE <= 8 ? "rgb" : "rgba") + "(" + propertyValue.replace(/\s+/g, ",").replace(/\.(\d)+(?=,)/g, "") + ")";
								}
							};
						})();
					}

					/**************
					 Dimensions
					 **************/
					function augmentDimension(name, element, wantInner) {
						var isBorderBox = CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() === "border-box";

						if (isBorderBox === (wantInner || false)) {
							/* in box-sizing mode, the CSS width / height accessors already give the outerWidth / outerHeight. */
							var i,
									value,
									augment = 0,
									sides = name === "width" ? ["Left", "Right"] : ["Top", "Bottom"],
									fields = ["padding" + sides[0], "padding" + sides[1], "border" + sides[0] + "Width", "border" + sides[1] + "Width"];

							for (i = 0; i < fields.length; i++) {
								value = parseFloat(CSS.getPropertyValue(element, fields[i]));
								if (!isNaN(value)) {
									augment += value;
								}
							}
							return wantInner ? -augment : augment;
						}
						return 0;
					}
					function getDimension(name, wantInner) {
						return function(type, element, propertyValue) {
							switch (type) {
								case "name":
									return name;
								case "extract":
									return parseFloat(propertyValue) + augmentDimension(name, element, wantInner);
								case "inject":
									return (parseFloat(propertyValue) - augmentDimension(name, element, wantInner)) + "px";
							}
						};
					}
					CSS.Normalizations.registered.innerWidth = getDimension("width", true);
					CSS.Normalizations.registered.innerHeight = getDimension("height", true);
					CSS.Normalizations.registered.outerWidth = getDimension("width");
					CSS.Normalizations.registered.outerHeight = getDimension("height");
				}
			},
			/************************
			 CSS Property Names
			 ************************/

			Names: {
				/* Camelcase a property name into its JavaScript notation (e.g. "background-color" ==> "backgroundColor").
				 Camelcasing is used to normalize property names between and across calls. */
				camelCase: function(property) {
					return property.replace(/-(\w)/g, function(match, subMatch) {
						return subMatch.toUpperCase();
					});
				},
				/* For SVG elements, some properties (namely, dimensional ones) are GET/SET via the element's HTML attributes (instead of via CSS styles). */
				SVGAttribute: function(property) {
					var SVGAttributes = "width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";

					/* Certain browsers require an SVG transform to be applied as an attribute. (Otherwise, application via CSS is preferable due to 3D support.) */
					if (IE || (Velocity.State.isAndroid && !Velocity.State.isChrome)) {
						SVGAttributes += "|transform";
					}

					return new RegExp("^(" + SVGAttributes + ")$", "i").test(property);
				},
				/* Determine whether a property should be set with a vendor prefix. */
				/* If a prefixed version of the property exists, return it. Otherwise, return the original property name.
				 If the property is not at all supported by the browser, return a false flag. */
				prefixCheck: function(property) {
					/* If this property has already been checked, return the cached value. */
					if (Velocity.State.prefixMatches[property]) {
						return [Velocity.State.prefixMatches[property], true];
					} else {
						var vendors = ["", "Webkit", "Moz", "ms", "O"];

						for (var i = 0, vendorsLength = vendors.length; i < vendorsLength; i++) {
							var propertyPrefixed;

							if (i === 0) {
								propertyPrefixed = property;
							} else {
								/* Capitalize the first letter of the property to conform to JavaScript vendor prefix notation (e.g. webkitFilter). */
								propertyPrefixed = vendors[i] + property.replace(/^\w/, function(match) {
									return match.toUpperCase();
								});
							}

							/* Check if the browser supports this property as prefixed. */
							if (Type.isString(Velocity.State.prefixElement.style[propertyPrefixed])) {
								/* Cache the match. */
								Velocity.State.prefixMatches[property] = propertyPrefixed;

								return [propertyPrefixed, true];
							}
						}

						/* If the browser doesn't support this property in any form, include a false flag so that the caller can decide how to proceed. */
						return [property, false];
					}
				}
			},
			/************************
			 CSS Property Values
			 ************************/

			Values: {
				/* Hex to RGB conversion. Copyright Tim Down: http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */
				hexToRgb: function(hex) {
					var shortformRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i,
							longformRegex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
							rgbParts;

					hex = hex.replace(shortformRegex, function(m, r, g, b) {
						return r + r + g + g + b + b;
					});

					rgbParts = longformRegex.exec(hex);

					return rgbParts ? [parseInt(rgbParts[1], 16), parseInt(rgbParts[2], 16), parseInt(rgbParts[3], 16)] : [0, 0, 0];
				},
				isCSSNullValue: function(value) {
					/* The browser defaults CSS values that have not been set to either 0 or one of several possible null-value strings.
					 Thus, we check for both falsiness and these special strings. */
					/* Null-value checking is performed to default the special strings to 0 (for the sake of tweening) or their hook
					 templates as defined as CSS.Hooks (for the sake of hook injection/extraction). */
					/* Note: Chrome returns "rgba(0, 0, 0, 0)" for an undefined color whereas IE returns "transparent". */
					return (!value || /^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(value));
				},
				/* Retrieve a property's default unit type. Used for assigning a unit type when one is not supplied by the user. */
				getUnitType: function(property) {
					if (/^(rotate|skew)/i.test(property)) {
						return "deg";
					} else if (/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(property)) {
						/* The above properties are unitless. */
						return "";
					} else {
						/* Default to px for all other properties. */
						return "px";
					}
				},
				/* HTML elements default to an associated display type when they're not set to display:none. */
				/* Note: This function is used for correctly setting the non-"none" display value in certain Velocity redirects, such as fadeIn/Out. */
				getDisplayType: function(element) {
					var tagName = element && element.tagName.toString().toLowerCase();

					if (/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(tagName)) {
						return "inline";
					} else if (/^(li)$/i.test(tagName)) {
						return "list-item";
					} else if (/^(tr)$/i.test(tagName)) {
						return "table-row";
					} else if (/^(table)$/i.test(tagName)) {
						return "table";
					} else if (/^(tbody)$/i.test(tagName)) {
						return "table-row-group";
						/* Default to "block" when no match is found. */
					} else {
						return "block";
					}
				},
				/* The class add/remove functions are used to temporarily apply a "velocity-animating" class to elements while they're animating. */
				addClass: function(element, className) {
					if (element) {
						if (element.classList) {
							element.classList.add(className);
						} else if (Type.isString(element.className)) {
							// Element.className is around 15% faster then set/getAttribute
							element.className += (element.className.length ? " " : "") + className;
						} else {
							// Work around for IE strict mode animating SVG - and anything else that doesn't behave correctly - the same way jQuery does it
							var currentClass = element.getAttribute(IE <= 7 ? "className" : "class") || "";

							element.setAttribute("class", currentClass + (currentClass ? " " : "") + className);
						}
					}
				},
				removeClass: function(element, className) {
					if (element) {
						if (element.classList) {
							element.classList.remove(className);
						} else if (Type.isString(element.className)) {
							// Element.className is around 15% faster then set/getAttribute
							// TODO: Need some jsperf tests on performance - can we get rid of the regex and maybe use split / array manipulation?
							element.className = element.className.toString().replace(new RegExp("(^|\\s)" + className.split(" ").join("|") + "(\\s|$)", "gi"), " ");
						} else {
							// Work around for IE strict mode animating SVG - and anything else that doesn't behave correctly - the same way jQuery does it
							var currentClass = element.getAttribute(IE <= 7 ? "className" : "class") || "";

							element.setAttribute("class", currentClass.replace(new RegExp("(^|\s)" + className.split(" ").join("|") + "(\s|$)", "gi"), " "));
						}
					}
				}
			},
			/****************************
			 Style Getting & Setting
			 ****************************/

			/* The singular getPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */
			getPropertyValue: function(element, property, rootPropertyValue, forceStyleLookup) {
				/* Get an element's computed property value. */
				/* Note: Retrieving the value of a CSS property cannot simply be performed by checking an element's
				 style attribute (which only reflects user-defined values). Instead, the browser must be queried for a property's
				 *computed* value. You can read more about getComputedStyle here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */
				function computePropertyValue(element, property) {
					/* When box-sizing isn't set to border-box, height and width style values are incorrectly computed when an
					 element's scrollbars are visible (which expands the element's dimensions). Thus, we defer to the more accurate
					 offsetHeight/Width property, which includes the total dimensions for interior, border, padding, and scrollbar.
					 We subtract border and padding to get the sum of interior + scrollbar. */
					var computedValue = 0;

					/* IE<=8 doesn't support window.getComputedStyle, thus we defer to jQuery, which has an extensive array
					 of hacks to accurately retrieve IE8 property values. Re-implementing that logic here is not worth bloating the
					 codebase for a dying browser. The performance repercussions of using jQuery here are minimal since
					 Velocity is optimized to rarely (and sometimes never) query the DOM. Further, the $.css() codepath isn't that slow. */
					if (IE <= 8) {
						computedValue = $.css(element, property); /* GET */
						/* All other browsers support getComputedStyle. The returned live object reference is cached onto its
						 associated element so that it does not need to be refetched upon every GET. */
					} else {
						/* Browsers do not return height and width values for elements that are set to display:"none". Thus, we temporarily
						 toggle display to the element type's default value. */
						var toggleDisplay = false;

						if (/^(width|height)$/.test(property) && CSS.getPropertyValue(element, "display") === 0) {
							toggleDisplay = true;
							CSS.setPropertyValue(element, "display", CSS.Values.getDisplayType(element));
						}

						var revertDisplay = function() {
							if (toggleDisplay) {
								CSS.setPropertyValue(element, "display", "none");
							}
						};

						if (!forceStyleLookup) {
							if (property === "height" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
								var contentBoxHeight = element.offsetHeight - (parseFloat(CSS.getPropertyValue(element, "borderTopWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderBottomWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingTop")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingBottom")) || 0);
								revertDisplay();

								return contentBoxHeight;
							} else if (property === "width" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
								var contentBoxWidth = element.offsetWidth - (parseFloat(CSS.getPropertyValue(element, "borderLeftWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderRightWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingLeft")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingRight")) || 0);
								revertDisplay();

								return contentBoxWidth;
							}
						}

						var computedStyle;

						/* For elements that Velocity hasn't been called on directly (e.g. when Velocity queries the DOM on behalf
						 of a parent of an element its animating), perform a direct getComputedStyle lookup since the object isn't cached. */
						if (Data(element) === undefined) {
							computedStyle = window.getComputedStyle(element, null); /* GET */
							/* If the computedStyle object has yet to be cached, do so now. */
						} else if (!Data(element).computedStyle) {
							computedStyle = Data(element).computedStyle = window.getComputedStyle(element, null); /* GET */
							/* If computedStyle is cached, use it. */
						} else {
							computedStyle = Data(element).computedStyle;
						}

						/* IE and Firefox do not return a value for the generic borderColor -- they only return individual values for each border side's color.
						 Also, in all browsers, when border colors aren't all the same, a compound value is returned that Velocity isn't setup to parse.
						 So, as a polyfill for querying individual border side colors, we just return the top border's color and animate all borders from that value. */
						if (property === "borderColor") {
							property = "borderTopColor";
						}

						/* IE9 has a bug in which the "filter" property must be accessed from computedStyle using the getPropertyValue method
						 instead of a direct property lookup. The getPropertyValue method is slower than a direct lookup, which is why we avoid it by default. */
						if (IE === 9 && property === "filter") {
							computedValue = computedStyle.getPropertyValue(property); /* GET */
						} else {
							computedValue = computedStyle[property];
						}

						/* Fall back to the property's style value (if defined) when computedValue returns nothing,
						 which can happen when the element hasn't been painted. */
						if (computedValue === "" || computedValue === null) {
							computedValue = element.style[property];
						}

						revertDisplay();
					}

					/* For top, right, bottom, and left (TRBL) values that are set to "auto" on elements of "fixed" or "absolute" position,
					 defer to jQuery for converting "auto" to a numeric value. (For elements with a "static" or "relative" position, "auto" has the same
					 effect as being set to 0, so no conversion is necessary.) */
					/* An example of why numeric conversion is necessary: When an element with "position:absolute" has an untouched "left"
					 property, which reverts to "auto", left's value is 0 relative to its parent element, but is often non-zero relative
					 to its *containing* (not parent) element, which is the nearest "position:relative" ancestor or the viewport (and always the viewport in the case of "position:fixed"). */
					if (computedValue === "auto" && /^(top|right|bottom|left)$/i.test(property)) {
						var position = computePropertyValue(element, "position"); /* GET */

						/* For absolute positioning, jQuery's $.position() only returns values for top and left;
						 right and bottom will have their "auto" value reverted to 0. */
						/* Note: A jQuery object must be created here since jQuery doesn't have a low-level alias for $.position().
						 Not a big deal since we're currently in a GET batch anyway. */
						if (position === "fixed" || (position === "absolute" && /top|left/i.test(property))) {
							/* Note: jQuery strips the pixel unit from its returned values; we re-add it here to conform with computePropertyValue's behavior. */
							computedValue = $(element).position()[property] + "px"; /* GET */
						}
					}

					return computedValue;
				}

				var propertyValue;

				/* If this is a hooked property (e.g. "clipLeft" instead of the root property of "clip"),
				 extract the hook's value from a normalized rootPropertyValue using CSS.Hooks.extractValue(). */
				if (CSS.Hooks.registered[property]) {
					var hook = property,
							hookRoot = CSS.Hooks.getRoot(hook);

					/* If a cached rootPropertyValue wasn't passed in (which Velocity always attempts to do in order to avoid requerying the DOM),
					 query the DOM for the root property's value. */
					if (rootPropertyValue === undefined) {
						/* Since the browser is now being directly queried, use the official post-prefixing property name for this lookup. */
						rootPropertyValue = CSS.getPropertyValue(element, CSS.Names.prefixCheck(hookRoot)[0]); /* GET */
					}

					/* If this root has a normalization registered, peform the associated normalization extraction. */
					if (CSS.Normalizations.registered[hookRoot]) {
						rootPropertyValue = CSS.Normalizations.registered[hookRoot]("extract", element, rootPropertyValue);
					}

					/* Extract the hook's value. */
					propertyValue = CSS.Hooks.extractValue(hook, rootPropertyValue);

					/* If this is a normalized property (e.g. "opacity" becomes "filter" in <=IE8) or "translateX" becomes "transform"),
					 normalize the property's name and value, and handle the special case of transforms. */
					/* Note: Normalizing a property is mutually exclusive from hooking a property since hook-extracted values are strictly
					 numerical and therefore do not require normalization extraction. */
				} else if (CSS.Normalizations.registered[property]) {
					var normalizedPropertyName,
							normalizedPropertyValue;

					normalizedPropertyName = CSS.Normalizations.registered[property]("name", element);

					/* Transform values are calculated via normalization extraction (see below), which checks against the element's transformCache.
					 At no point do transform GETs ever actually query the DOM; initial stylesheet values are never processed.
					 This is because parsing 3D transform matrices is not always accurate and would bloat our codebase;
					 thus, normalization extraction defaults initial transform values to their zero-values (e.g. 1 for scaleX and 0 for translateX). */
					if (normalizedPropertyName !== "transform") {
						normalizedPropertyValue = computePropertyValue(element, CSS.Names.prefixCheck(normalizedPropertyName)[0]); /* GET */

						/* If the value is a CSS null-value and this property has a hook template, use that zero-value template so that hooks can be extracted from it. */
						if (CSS.Values.isCSSNullValue(normalizedPropertyValue) && CSS.Hooks.templates[property]) {
							normalizedPropertyValue = CSS.Hooks.templates[property][1];
						}
					}

					propertyValue = CSS.Normalizations.registered[property]("extract", element, normalizedPropertyValue);
				}

				/* If a (numeric) value wasn't produced via hook extraction or normalization, query the DOM. */
				if (!/^[\d-]/.test(propertyValue)) {
					/* For SVG elements, dimensional properties (which SVGAttribute() detects) are tweened via
					 their HTML attribute values instead of their CSS style values. */
					var data = Data(element);

					if (data && data.isSVG && CSS.Names.SVGAttribute(property)) {
						/* Since the height/width attribute values must be set manually, they don't reflect computed values.
						 Thus, we use use getBBox() to ensure we always get values for elements with undefined height/width attributes. */
						if (/^(height|width)$/i.test(property)) {
							/* Firefox throws an error if .getBBox() is called on an SVG that isn't attached to the DOM. */
							try {
								propertyValue = element.getBBox()[property];
							} catch (error) {
								propertyValue = 0;
							}
							/* Otherwise, access the attribute value directly. */
						} else {
							propertyValue = element.getAttribute(property);
						}
					} else {
						propertyValue = computePropertyValue(element, CSS.Names.prefixCheck(property)[0]); /* GET */
					}
				}

				/* Since property lookups are for animation purposes (which entails computing the numeric delta between start and end values),
				 convert CSS null-values to an integer of value 0. */
				if (CSS.Values.isCSSNullValue(propertyValue)) {
					propertyValue = 0;
				}

				if (Velocity.debug >= 2) {
					console.log("Get " + property + ": " + propertyValue);
				}

				return propertyValue;
			},
			/* The singular setPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */
			setPropertyValue: function(element, property, propertyValue, rootPropertyValue, scrollData) {
				var propertyName = property;

				/* In order to be subjected to call options and element queueing, scroll animation is routed through Velocity as if it were a standard CSS property. */
				if (property === "scroll") {
					/* If a container option is present, scroll the container instead of the browser window. */
					if (scrollData.container) {
						scrollData.container["scroll" + scrollData.direction] = propertyValue;
						/* Otherwise, Velocity defaults to scrolling the browser window. */
					} else {
						if (scrollData.direction === "Left") {
							window.scrollTo(propertyValue, scrollData.alternateValue);
						} else {
							window.scrollTo(scrollData.alternateValue, propertyValue);
						}
					}
				} else {
					/* Transforms (translateX, rotateZ, etc.) are applied to a per-element transformCache object, which is manually flushed via flushTransformCache().
					 Thus, for now, we merely cache transforms being SET. */
					if (CSS.Normalizations.registered[property] && CSS.Normalizations.registered[property]("name", element) === "transform") {
						/* Perform a normalization injection. */
						/* Note: The normalization logic handles the transformCache updating. */
						CSS.Normalizations.registered[property]("inject", element, propertyValue);

						propertyName = "transform";
						propertyValue = Data(element).transformCache[property];
					} else {
						/* Inject hooks. */
						if (CSS.Hooks.registered[property]) {
							var hookName = property,
									hookRoot = CSS.Hooks.getRoot(property);

							/* If a cached rootPropertyValue was not provided, query the DOM for the hookRoot's current value. */
							rootPropertyValue = rootPropertyValue || CSS.getPropertyValue(element, hookRoot); /* GET */

							propertyValue = CSS.Hooks.injectValue(hookName, propertyValue, rootPropertyValue);
							property = hookRoot;
						}

						/* Normalize names and values. */
						if (CSS.Normalizations.registered[property]) {
							propertyValue = CSS.Normalizations.registered[property]("inject", element, propertyValue);
							property = CSS.Normalizations.registered[property]("name", element);
						}

						/* Assign the appropriate vendor prefix before performing an official style update. */
						propertyName = CSS.Names.prefixCheck(property)[0];

						/* A try/catch is used for IE<=8, which throws an error when "invalid" CSS values are set, e.g. a negative width.
						 Try/catch is avoided for other browsers since it incurs a performance overhead. */
						if (IE <= 8) {
							try {
								element.style[propertyName] = propertyValue;
							} catch (error) {
								if (Velocity.debug) {
									console.log("Browser does not support [" + propertyValue + "] for [" + propertyName + "]");
								}
							}
							/* SVG elements have their dimensional properties (width, height, x, y, cx, etc.) applied directly as attributes instead of as styles. */
							/* Note: IE8 does not support SVG elements, so it's okay that we skip it for SVG animation. */
						} else {
							var data = Data(element);

							if (data && data.isSVG && CSS.Names.SVGAttribute(property)) {
								/* Note: For SVG attributes, vendor-prefixed property names are never used. */
								/* Note: Not all CSS properties can be animated via attributes, but the browser won't throw an error for unsupported properties. */
								element.setAttribute(property, propertyValue);
							} else {
								element.style[propertyName] = propertyValue;
							}
						}

						if (Velocity.debug >= 2) {
							console.log("Set " + property + " (" + propertyName + "): " + propertyValue);
						}
					}
				}

				/* Return the normalized property name and value in case the caller wants to know how these values were modified before being applied to the DOM. */
				return [propertyName, propertyValue];
			},
			/* To increase performance by batching transform updates into a single SET, transforms are not directly applied to an element until flushTransformCache() is called. */
			/* Note: Velocity applies transform properties in the same order that they are chronogically introduced to the element's CSS styles. */
			flushTransformCache: function(element) {
				var transformString = "",
						data = Data(element);

				/* Certain browsers require that SVG transforms be applied as an attribute. However, the SVG transform attribute takes a modified version of CSS's transform string
				 (units are dropped and, except for skewX/Y, subproperties are merged into their master property -- e.g. scaleX and scaleY are merged into scale(X Y). */
				if ((IE || (Velocity.State.isAndroid && !Velocity.State.isChrome)) && data && data.isSVG) {
					/* Since transform values are stored in their parentheses-wrapped form, we use a helper function to strip out their numeric values.
					 Further, SVG transform properties only take unitless (representing pixels) values, so it's okay that parseFloat() strips the unit suffixed to the float value. */
					var getTransformFloat = function(transformProperty) {
						return parseFloat(CSS.getPropertyValue(element, transformProperty));
					};

					/* Create an object to organize all the transforms that we'll apply to the SVG element. To keep the logic simple,
					 we process *all* transform properties -- even those that may not be explicitly applied (since they default to their zero-values anyway). */
					var SVGTransforms = {
						translate: [getTransformFloat("translateX"), getTransformFloat("translateY")],
						skewX: [getTransformFloat("skewX")], skewY: [getTransformFloat("skewY")],
						/* If the scale property is set (non-1), use that value for the scaleX and scaleY values
						 (this behavior mimics the result of animating all these properties at once on HTML elements). */
						scale: getTransformFloat("scale") !== 1 ? [getTransformFloat("scale"), getTransformFloat("scale")] : [getTransformFloat("scaleX"), getTransformFloat("scaleY")],
						/* Note: SVG's rotate transform takes three values: rotation degrees followed by the X and Y values
						 defining the rotation's origin point. We ignore the origin values (default them to 0). */
						rotate: [getTransformFloat("rotateZ"), 0, 0]
					};

					/* Iterate through the transform properties in the user-defined property map order.
					 (This mimics the behavior of non-SVG transform animation.) */
					$.each(Data(element).transformCache, function(transformName) {
						/* Except for with skewX/Y, revert the axis-specific transform subproperties to their axis-free master
						 properties so that they match up with SVG's accepted transform properties. */
						if (/^translate/i.test(transformName)) {
							transformName = "translate";
						} else if (/^scale/i.test(transformName)) {
							transformName = "scale";
						} else if (/^rotate/i.test(transformName)) {
							transformName = "rotate";
						}

						/* Check that we haven't yet deleted the property from the SVGTransforms container. */
						if (SVGTransforms[transformName]) {
							/* Append the transform property in the SVG-supported transform format. As per the spec, surround the space-delimited values in parentheses. */
							transformString += transformName + "(" + SVGTransforms[transformName].join(" ") + ")" + " ";

							/* After processing an SVG transform property, delete it from the SVGTransforms container so we don't
							 re-insert the same master property if we encounter another one of its axis-specific properties. */
							delete SVGTransforms[transformName];
						}
					});
				} else {
					var transformValue,
							perspective;

					/* Transform properties are stored as members of the transformCache object. Concatenate all the members into a string. */
					$.each(Data(element).transformCache, function(transformName) {
						transformValue = Data(element).transformCache[transformName];

						/* Transform's perspective subproperty must be set first in order to take effect. Store it temporarily. */
						if (transformName === "transformPerspective") {
							perspective = transformValue;
							return true;
						}

						/* IE9 only supports one rotation type, rotateZ, which it refers to as "rotate". */
						if (IE === 9 && transformName === "rotateZ") {
							transformName = "rotate";
						}

						transformString += transformName + transformValue + " ";
					});

					/* If present, set the perspective subproperty first. */
					if (perspective) {
						transformString = "perspective" + perspective + " " + transformString;
					}
				}

				CSS.setPropertyValue(element, "transform", transformString);
			}
		};

		/* Register hooks and normalizations. */
		CSS.Hooks.register();
		CSS.Normalizations.register();

		/* Allow hook setting in the same fashion as jQuery's $.css(). */
		Velocity.hook = function(elements, arg2, arg3) {
			var value;

			elements = sanitizeElements(elements);

			$.each(elements, function(i, element) {
				/* Initialize Velocity's per-element data cache if this element hasn't previously been animated. */
				if (Data(element) === undefined) {
					Velocity.init(element);
				}

				/* Get property value. If an element set was passed in, only return the value for the first element. */
				if (arg3 === undefined) {
					if (value === undefined) {
						value = CSS.getPropertyValue(element, arg2);
					}
					/* Set property value. */
				} else {
					/* sPV returns an array of the normalized propertyName/propertyValue pair used to update the DOM. */
					var adjustedSet = CSS.setPropertyValue(element, arg2, arg3);

					/* Transform properties don't automatically set. They have to be flushed to the DOM. */
					if (adjustedSet[0] === "transform") {
						Velocity.CSS.flushTransformCache(element);
					}

					value = adjustedSet;
				}
			});

			return value;
		};

		/*****************
		 Animation
		 *****************/

		var animate = function() {
			var opts;

			/******************
			 Call Chain
			 ******************/

			/* Logic for determining what to return to the call stack when exiting out of Velocity. */
			function getChain() {
				/* If we are using the utility function, attempt to return this call's promise. If no promise library was detected,
				 default to null instead of returning the targeted elements so that utility function's return value is standardized. */
				if (isUtility) {
					return promiseData.promise || null;
					/* Otherwise, if we're using $.fn, return the jQuery-/Zepto-wrapped element set. */
				} else {
					return elementsWrapped;
				}
			}

			/*************************
			 Arguments Assignment
			 *************************/

			/* To allow for expressive CoffeeScript code, Velocity supports an alternative syntax in which "elements" (or "e"), "properties" (or "p"), and "options" (or "o")
			 objects are defined on a container object that's passed in as Velocity's sole argument. */
			/* Note: Some browsers automatically populate arguments with a "properties" object. We detect it by checking for its default "names" property. */
			var syntacticSugar = (arguments[0] && (arguments[0].p || (($.isPlainObject(arguments[0].properties) && !arguments[0].properties.names) || Type.isString(arguments[0].properties)))),
					/* Whether Velocity was called via the utility function (as opposed to on a jQuery/Zepto object). */
					isUtility,
					/* When Velocity is called via the utility function ($.Velocity()/Velocity()), elements are explicitly
					 passed in as the first parameter. Thus, argument positioning varies. We normalize them here. */
					elementsWrapped,
					argumentIndex;

			var elements,
					propertiesMap,
					options;

			/* Detect jQuery/Zepto elements being animated via the $.fn method. */
			if (Type.isWrapped(this)) {
				isUtility = false;

				argumentIndex = 0;
				elements = this;
				elementsWrapped = this;
				/* Otherwise, raw elements are being animated via the utility function. */
			} else {
				isUtility = true;

				argumentIndex = 1;
				elements = syntacticSugar ? (arguments[0].elements || arguments[0].e) : arguments[0];
			}

			/***************
			 Promises
			 ***************/

			var promiseData = {
				promise: null,
				resolver: null,
				rejecter: null
			};

			/* If this call was made via the utility function (which is the default method of invocation when jQuery/Zepto are not being used), and if
			 promise support was detected, create a promise object for this call and store references to its resolver and rejecter methods. The resolve
			 method is used when a call completes naturally or is prematurely stopped by the user. In both cases, completeCall() handles the associated
			 call cleanup and promise resolving logic. The reject method is used when an invalid set of arguments is passed into a Velocity call. */
			/* Note: Velocity employs a call-based queueing architecture, which means that stopping an animating element actually stops the full call that
			 triggered it -- not that one element exclusively. Similarly, there is one promise per call, and all elements targeted by a Velocity call are
			 grouped together for the purposes of resolving and rejecting a promise. */
			if (isUtility && Velocity.Promise) {
				promiseData.promise = new Velocity.Promise(function(resolve, reject) {
					promiseData.resolver = resolve;
					promiseData.rejecter = reject;
				});
			}

			if (syntacticSugar) {
				propertiesMap = arguments[0].properties || arguments[0].p;
				options = arguments[0].options || arguments[0].o;
			} else {
				propertiesMap = arguments[argumentIndex];
				options = arguments[argumentIndex + 1];
			}

			elements = sanitizeElements(elements);

			if (!elements) {
				if (promiseData.promise) {
					if (!propertiesMap || !options || options.promiseRejectEmpty !== false) {
						promiseData.rejecter();
					} else {
						promiseData.resolver();
					}
				}
				return;
			}

			/* The length of the element set (in the form of a nodeList or an array of elements) is defaulted to 1 in case a
			 single raw DOM element is passed in (which doesn't contain a length property). */
			var elementsLength = elements.length,
					elementsIndex = 0;

			/***************************
			 Argument Overloading
			 ***************************/

			/* Support is included for jQuery's argument overloading: $.animate(propertyMap [, duration] [, easing] [, complete]).
			 Overloading is detected by checking for the absence of an object being passed into options. */
			/* Note: The stop/finish/pause/resume actions do not accept animation options, and are therefore excluded from this check. */
			if (!/^(stop|finish|finishAll|pause|resume)$/i.test(propertiesMap) && !$.isPlainObject(options)) {
				/* The utility function shifts all arguments one position to the right, so we adjust for that offset. */
				var startingArgumentPosition = argumentIndex + 1;

				options = {};

				/* Iterate through all options arguments */
				for (var i = startingArgumentPosition; i < arguments.length; i++) {
					/* Treat a number as a duration. Parse it out. */
					/* Note: The following RegEx will return true if passed an array with a number as its first item.
					 Thus, arrays are skipped from this check. */
					if (!Type.isArray(arguments[i]) && (/^(fast|normal|slow)$/i.test(arguments[i]) || /^\d/.test(arguments[i]))) {
						options.duration = arguments[i];
						/* Treat strings and arrays as easings. */
					} else if (Type.isString(arguments[i]) || Type.isArray(arguments[i])) {
						options.easing = arguments[i];
						/* Treat a function as a complete callback. */
					} else if (Type.isFunction(arguments[i])) {
						options.complete = arguments[i];
					}
				}
			}

			/*********************
			 Action Detection
			 *********************/

			/* Velocity's behavior is categorized into "actions": Elements can either be specially scrolled into view,
			 or they can be started, stopped, paused, resumed, or reversed . If a literal or referenced properties map is passed in as Velocity's
			 first argument, the associated action is "start". Alternatively, "scroll", "reverse", "pause", "resume" or "stop" can be passed in 
			 instead of a properties map. */
			var action;

			switch (propertiesMap) {
				case "scroll":
					action = "scroll";
					break;

				case "reverse":
					action = "reverse";
					break;

				case "pause":

					/*******************
					 Action: Pause
					 *******************/

					var currentTime = (new Date()).getTime();

					/* Handle delay timers */
					$.each(elements, function(i, element) {
						pauseDelayOnElement(element, currentTime);
					});

					/* Pause and Resume are call-wide (not on a per element basis). Thus, calling pause or resume on a 
					 single element will cause any calls that containt tweens for that element to be paused/resumed
					 as well. */

					/* Iterate through all calls and pause any that contain any of our elements */
					$.each(Velocity.State.calls, function(i, activeCall) {

						var found = false;
						/* Inactive calls are set to false by the logic inside completeCall(). Skip them. */
						if (activeCall) {
							/* Iterate through the active call's targeted elements. */
							$.each(activeCall[1], function(k, activeElement) {
								var queueName = (options === undefined) ? "" : options;

								if (queueName !== true && (activeCall[2].queue !== queueName) && !(options === undefined && activeCall[2].queue === false)) {
									return true;
								}

								/* Iterate through the calls targeted by the stop command. */
								$.each(elements, function(l, element) {
									/* Check that this call was applied to the target element. */
									if (element === activeElement) {

										/* Set call to paused */
										activeCall[5] = {
											resume: false
										};

										/* Once we match an element, we can bounce out to the next call entirely */
										found = true;
										return false;
									}
								});

								/* Proceed to check next call if we have already matched */
								if (found) {
									return false;
								}
							});
						}

					});

					/* Since pause creates no new tweens, exit out of Velocity. */
					return getChain();

				case "resume":

					/*******************
					 Action: Resume
					 *******************/

					/* Handle delay timers */
					$.each(elements, function(i, element) {
						resumeDelayOnElement(element, currentTime);
					});

					/* Pause and Resume are call-wide (not on a per elemnt basis). Thus, calling pause or resume on a 
					 single element will cause any calls that containt tweens for that element to be paused/resumed
					 as well. */

					/* Iterate through all calls and pause any that contain any of our elements */
					$.each(Velocity.State.calls, function(i, activeCall) {
						var found = false;
						/* Inactive calls are set to false by the logic inside completeCall(). Skip them. */
						if (activeCall) {
							/* Iterate through the active call's targeted elements. */
							$.each(activeCall[1], function(k, activeElement) {
								var queueName = (options === undefined) ? "" : options;

								if (queueName !== true && (activeCall[2].queue !== queueName) && !(options === undefined && activeCall[2].queue === false)) {
									return true;
								}

								/* Skip any calls that have never been paused */
								if (!activeCall[5]) {
									return true;
								}

								/* Iterate through the calls targeted by the stop command. */
								$.each(elements, function(l, element) {
									/* Check that this call was applied to the target element. */
									if (element === activeElement) {

										/* Flag a pause object to be resumed, which will occur during the next tick. In
										 addition, the pause object will at that time be deleted */
										activeCall[5].resume = true;

										/* Once we match an element, we can bounce out to the next call entirely */
										found = true;
										return false;
									}
								});

								/* Proceed to check next call if we have already matched */
								if (found) {
									return false;
								}
							});
						}

					});

					/* Since resume creates no new tweens, exit out of Velocity. */
					return getChain();

				case "finish":
				case "finishAll":
				case "stop":
					/*******************
					 Action: Stop
					 *******************/

					/* Clear the currently-active delay on each targeted element. */
					$.each(elements, function(i, element) {
						if (Data(element) && Data(element).delayTimer) {
							/* Stop the timer from triggering its cached next() function. */
							clearTimeout(Data(element).delayTimer.setTimeout);

							/* Manually call the next() function so that the subsequent queue items can progress. */
							if (Data(element).delayTimer.next) {
								Data(element).delayTimer.next();
							}

							delete Data(element).delayTimer;
						}

						/* If we want to finish everything in the queue, we have to iterate through it
						 and call each function. This will make them active calls below, which will
						 cause them to be applied via the duration setting. */
						if (propertiesMap === "finishAll" && (options === true || Type.isString(options))) {
							/* Iterate through the items in the element's queue. */
							$.each($.queue(element, Type.isString(options) ? options : ""), function(_, item) {
								/* The queue array can contain an "inprogress" string, which we skip. */
								if (Type.isFunction(item)) {
									item();
								}
							});

							/* Clearing the $.queue() array is achieved by resetting it to []. */
							$.queue(element, Type.isString(options) ? options : "", []);
						}
					});

					var callsToStop = [];

					/* When the stop action is triggered, the elements' currently active call is immediately stopped. The active call might have
					 been applied to multiple elements, in which case all of the call's elements will be stopped. When an element
					 is stopped, the next item in its animation queue is immediately triggered. */
					/* An additional argument may be passed in to clear an element's remaining queued calls. Either true (which defaults to the "fx" queue)
					 or a custom queue string can be passed in. */
					/* Note: The stop command runs prior to Velocity's Queueing phase since its behavior is intended to take effect *immediately*,
					 regardless of the element's current queue state. */

					/* Iterate through every active call. */
					$.each(Velocity.State.calls, function(i, activeCall) {
						/* Inactive calls are set to false by the logic inside completeCall(). Skip them. */
						if (activeCall) {
							/* Iterate through the active call's targeted elements. */
							$.each(activeCall[1], function(k, activeElement) {
								/* If true was passed in as a secondary argument, clear absolutely all calls on this element. Otherwise, only
								 clear calls associated with the relevant queue. */
								/* Call stopping logic works as follows:
								 - options === true --> stop current default queue calls (and queue:false calls), including remaining queued ones.
								 - options === undefined --> stop current queue:"" call and all queue:false calls.
								 - options === false --> stop only queue:false calls.
								 - options === "custom" --> stop current queue:"custom" call, including remaining queued ones (there is no functionality to only clear the currently-running queue:"custom" call). */
								var queueName = (options === undefined) ? "" : options;

								if (queueName !== true && (activeCall[2].queue !== queueName) && !(options === undefined && activeCall[2].queue === false)) {
									return true;
								}

								/* Iterate through the calls targeted by the stop command. */
								$.each(elements, function(l, element) {
									/* Check that this call was applied to the target element. */
									if (element === activeElement) {
										/* Optionally clear the remaining queued calls. If we're doing "finishAll" this won't find anything,
										 due to the queue-clearing above. */
										if (options === true || Type.isString(options)) {
											/* Iterate through the items in the element's queue. */
											$.each($.queue(element, Type.isString(options) ? options : ""), function(_, item) {
												/* The queue array can contain an "inprogress" string, which we skip. */
												if (Type.isFunction(item)) {
													/* Pass the item's callback a flag indicating that we want to abort from the queue call.
													 (Specifically, the queue will resolve the call's associated promise then abort.)  */
													item(null, true);
												}
											});

											/* Clearing the $.queue() array is achieved by resetting it to []. */
											$.queue(element, Type.isString(options) ? options : "", []);
										}

										if (propertiesMap === "stop") {
											/* Since "reverse" uses cached start values (the previous call's endValues), these values must be
											 changed to reflect the final value that the elements were actually tweened to. */
											/* Note: If only queue:false animations are currently running on an element, it won't have a tweensContainer
											 object. Also, queue:false animations can't be reversed. */
											var data = Data(element);
											if (data && data.tweensContainer && queueName !== false) {
												$.each(data.tweensContainer, function(m, activeTween) {
													activeTween.endValue = activeTween.currentValue;
												});
											}

											callsToStop.push(i);
										} else if (propertiesMap === "finish" || propertiesMap === "finishAll") {
											/* To get active tweens to finish immediately, we forcefully shorten their durations to 1ms so that
											 they finish upon the next rAf tick then proceed with normal call completion logic. */
											activeCall[2].duration = 1;
										}
									}
								});
							});
						}
					});

					/* Prematurely call completeCall() on each matched active call. Pass an additional flag for "stop" to indicate
					 that the complete callback and display:none setting should be skipped since we're completing prematurely. */
					if (propertiesMap === "stop") {
						$.each(callsToStop, function(i, j) {
							completeCall(j, true);
						});

						if (promiseData.promise) {
							/* Immediately resolve the promise associated with this stop call since stop runs synchronously. */
							promiseData.resolver(elements);
						}
					}

					/* Since we're stopping, and not proceeding with queueing, exit out of Velocity. */
					return getChain();

				default:
					/* Treat a non-empty plain object as a literal properties map. */
					if ($.isPlainObject(propertiesMap) && !Type.isEmptyObject(propertiesMap)) {
						action = "start";

						/****************
						 Redirects
						 ****************/

						/* Check if a string matches a registered redirect (see Redirects above). */
					} else if (Type.isString(propertiesMap) && Velocity.Redirects[propertiesMap]) {
						opts = $.extend({}, options);

						var durationOriginal = opts.duration,
								delayOriginal = opts.delay || 0;

						/* If the backwards option was passed in, reverse the element set so that elements animate from the last to the first. */
						if (opts.backwards === true) {
							elements = $.extend(true, [], elements).reverse();
						}

						/* Individually trigger the redirect for each element in the set to prevent users from having to handle iteration logic in their redirect. */
						$.each(elements, function(elementIndex, element) {
							/* If the stagger option was passed in, successively delay each element by the stagger value (in ms). Retain the original delay value. */
							if (parseFloat(opts.stagger)) {
								opts.delay = delayOriginal + (parseFloat(opts.stagger) * elementIndex);
							} else if (Type.isFunction(opts.stagger)) {
								opts.delay = delayOriginal + opts.stagger.call(element, elementIndex, elementsLength);
							}

							/* If the drag option was passed in, successively increase/decrease (depending on the presense of opts.backwards)
							 the duration of each element's animation, using floors to prevent producing very short durations. */
							if (opts.drag) {
								/* Default the duration of UI pack effects (callouts and transitions) to 1000ms instead of the usual default duration of 400ms. */
								opts.duration = parseFloat(durationOriginal) || (/^(callout|transition)/.test(propertiesMap) ? 1000 : DURATION_DEFAULT);

								/* For each element, take the greater duration of: A) animation completion percentage relative to the original duration,
								 B) 75% of the original duration, or C) a 200ms fallback (in case duration is already set to a low value).
								 The end result is a baseline of 75% of the redirect's duration that increases/decreases as the end of the element set is approached. */
								opts.duration = Math.max(opts.duration * (opts.backwards ? 1 - elementIndex / elementsLength : (elementIndex + 1) / elementsLength), opts.duration * 0.75, 200);
							}

							/* Pass in the call's opts object so that the redirect can optionally extend it. It defaults to an empty object instead of null to
							 reduce the opts checking logic required inside the redirect. */
							Velocity.Redirects[propertiesMap].call(element, element, opts || {}, elementIndex, elementsLength, elements, promiseData.promise ? promiseData : undefined);
						});

						/* Since the animation logic resides within the redirect's own code, abort the remainder of this call.
						 (The performance overhead up to this point is virtually non-existant.) */
						/* Note: The jQuery call chain is kept intact by returning the complete element set. */
						return getChain();
					} else {
						var abortError = "Velocity: First argument (" + propertiesMap + ") was not a property map, a known action, or a registered redirect. Aborting.";

						if (promiseData.promise) {
							promiseData.rejecter(new Error(abortError));
						} else if (window.console) {
							console.log(abortError);
						}

						return getChain();
					}
			}

			/**************************
			 Call-Wide Variables
			 **************************/

			/* A container for CSS unit conversion ratios (e.g. %, rem, and em ==> px) that is used to cache ratios across all elements
			 being animated in a single Velocity call. Calculating unit ratios necessitates DOM querying and updating, and is therefore
			 avoided (via caching) wherever possible. This container is call-wide instead of page-wide to avoid the risk of using stale
			 conversion metrics across Velocity animations that are not immediately consecutively chained. */
			var callUnitConversionData = {
				lastParent: null,
				lastPosition: null,
				lastFontSize: null,
				lastPercentToPxWidth: null,
				lastPercentToPxHeight: null,
				lastEmToPx: null,
				remToPx: null,
				vwToPx: null,
				vhToPx: null
			};

			/* A container for all the ensuing tween data and metadata associated with this call. This container gets pushed to the page-wide
			 Velocity.State.calls array that is processed during animation ticking. */
			var call = [];

			/************************
			 Element Processing
			 ************************/

			/* Element processing consists of three parts -- data processing that cannot go stale and data processing that *can* go stale (i.e. third-party style modifications):
			 1) Pre-Queueing: Element-wide variables, including the element's data storage, are instantiated. Call options are prepared. If triggered, the Stop action is executed.
			 2) Queueing: The logic that runs once this call has reached its point of execution in the element's $.queue() stack. Most logic is placed here to avoid risking it becoming stale.
			 3) Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
			 `elementArrayIndex` allows passing index of the element in the original array to value functions.
			 If `elementsIndex` were used instead the index would be determined by the elements' per-element queue.
			 */
			function processElement(element, elementArrayIndex) {

				/*************************
				 Part I: Pre-Queueing
				 *************************/

				/***************************
				 Element-Wide Variables
				 ***************************/

				var /* The runtime opts object is the extension of the current call's options and Velocity's page-wide option defaults. */
						opts = $.extend({}, Velocity.defaults, options),
						/* A container for the processed data associated with each property in the propertyMap.
						 (Each property in the map produces its own "tween".) */
						tweensContainer = {},
						elementUnitConversionData;

				/******************
				 Element Init
				 ******************/

				if (Data(element) === undefined) {
					Velocity.init(element);
				}

				/******************
				 Option: Delay
				 ******************/

				/* Since queue:false doesn't respect the item's existing queue, we avoid injecting its delay here (it's set later on). */
				/* Note: Velocity rolls its own delay function since jQuery doesn't have a utility alias for $.fn.delay()
				 (and thus requires jQuery element creation, which we avoid since its overhead includes DOM querying). */
				if (parseFloat(opts.delay) && opts.queue !== false) {
					$.queue(element, opts.queue, function(next, clearQueue) {
						if (clearQueue === true) {
							/* Do not continue with animation queueing. */
							return true;
						}

						/* This is a flag used to indicate to the upcoming completeCall() function that this queue entry was initiated by Velocity. See completeCall() for further details. */
						Velocity.velocityQueueEntryFlag = true;

						/* The ensuing queue item (which is assigned to the "next" argument that $.queue() automatically passes in) will be triggered after a setTimeout delay.
						 The setTimeout is stored so that it can be subjected to clearTimeout() if this animation is prematurely stopped via Velocity's "stop" command, and
						 delayBegin/delayTime is used to ensure we can "pause" and "resume" a tween that is still mid-delay. */

						/* Temporarily store delayed elements to facilite access for global pause/resume */
						var callIndex = Velocity.State.delayedElements.count++;
						Velocity.State.delayedElements[callIndex] = element;

						var delayComplete = (function(index) {
							return function() {
								/* Clear the temporary element */
								Velocity.State.delayedElements[index] = false;

								/* Finally, issue the call */
								next();
							};
						})(callIndex);


						Data(element).delayBegin = (new Date()).getTime();
						Data(element).delay = parseFloat(opts.delay);
						Data(element).delayTimer = {
							setTimeout: setTimeout(next, parseFloat(opts.delay)),
							next: delayComplete
						};
					});
				}

				/*********************
				 Option: Duration
				 *********************/

				/* Support for jQuery's named durations. */
				switch (opts.duration.toString().toLowerCase()) {
					case "fast":
						opts.duration = 200;
						break;

					case "normal":
						opts.duration = DURATION_DEFAULT;
						break;

					case "slow":
						opts.duration = 600;
						break;

					default:
						/* Remove the potential "ms" suffix and default to 1 if the user is attempting to set a duration of 0 (in order to produce an immediate style change). */
						opts.duration = parseFloat(opts.duration) || 1;
				}

				/************************
				 Global Option: Mock
				 ************************/

				if (Velocity.mock !== false) {
					/* In mock mode, all animations are forced to 1ms so that they occur immediately upon the next rAF tick.
					 Alternatively, a multiplier can be passed in to time remap all delays and durations. */
					if (Velocity.mock === true) {
						opts.duration = opts.delay = 1;
					} else {
						opts.duration *= parseFloat(Velocity.mock) || 1;
						opts.delay *= parseFloat(Velocity.mock) || 1;
					}
				}

				/*******************
				 Option: Easing
				 *******************/

				opts.easing = getEasing(opts.easing, opts.duration);

				/**********************
				 Option: Callbacks
				 **********************/

				/* Callbacks must functions. Otherwise, default to null. */
				if (opts.begin && !Type.isFunction(opts.begin)) {
					opts.begin = null;
				}

				if (opts.progress && !Type.isFunction(opts.progress)) {
					opts.progress = null;
				}

				if (opts.complete && !Type.isFunction(opts.complete)) {
					opts.complete = null;
				}

				/*********************************
				 Option: Display & Visibility
				 *********************************/

				/* Refer to Velocity's documentation (VelocityJS.org/#displayAndVisibility) for a description of the display and visibility options' behavior. */
				/* Note: We strictly check for undefined instead of falsiness because display accepts an empty string value. */
				if (opts.display !== undefined && opts.display !== null) {
					opts.display = opts.display.toString().toLowerCase();

					/* Users can pass in a special "auto" value to instruct Velocity to set the element to its default display value. */
					if (opts.display === "auto") {
						opts.display = Velocity.CSS.Values.getDisplayType(element);
					}
				}

				if (opts.visibility !== undefined && opts.visibility !== null) {
					opts.visibility = opts.visibility.toString().toLowerCase();
				}

				/**********************
				 Option: mobileHA
				 **********************/

				/* When set to true, and if this is a mobile device, mobileHA automatically enables hardware acceleration (via a null transform hack)
				 on animating elements. HA is removed from the element at the completion of its animation. */
				/* Note: Android Gingerbread doesn't support HA. If a null transform hack (mobileHA) is in fact set, it will prevent other tranform subproperties from taking effect. */
				/* Note: You can read more about the use of mobileHA in Velocity's documentation: VelocityJS.org/#mobileHA. */
				opts.mobileHA = (opts.mobileHA && Velocity.State.isMobile && !Velocity.State.isGingerbread);

				/***********************
				 Part II: Queueing
				 ***********************/

				/* When a set of elements is targeted by a Velocity call, the set is broken up and each element has the current Velocity call individually queued onto it.
				 In this way, each element's existing queue is respected; some elements may already be animating and accordingly should not have this current Velocity call triggered immediately. */
				/* In each queue, tween data is processed for each animating property then pushed onto the call-wide calls array. When the last element in the set has had its tweens processed,
				 the call array is pushed to Velocity.State.calls for live processing by the requestAnimationFrame tick. */
				function buildQueue(next) {
					var data, lastTweensContainer;

					/*******************
					 Option: Begin
					 *******************/

					/* The begin callback is fired once per call -- not once per elemenet -- and is passed the full raw DOM element set as both its context and its first argument. */
					if (opts.begin && elementsIndex === 0) {
						/* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */
						try {
							opts.begin.call(elements, elements);
						} catch (error) {
							setTimeout(function() {
								throw error;
							}, 1);
						}
					}

					/*****************************************
					 Tween Data Construction (for Scroll)
					 *****************************************/

					/* Note: In order to be subjected to chaining and animation options, scroll's tweening is routed through Velocity as if it were a standard CSS property animation. */
					if (action === "scroll") {
						/* The scroll action uniquely takes an optional "offset" option -- specified in pixels -- that offsets the targeted scroll position. */
						var scrollDirection = (/^x$/i.test(opts.axis) ? "Left" : "Top"),
								scrollOffset = parseFloat(opts.offset) || 0,
								scrollPositionCurrent,
								scrollPositionCurrentAlternate,
								scrollPositionEnd;

						/* Scroll also uniquely takes an optional "container" option, which indicates the parent element that should be scrolled --
						 as opposed to the browser window itself. This is useful for scrolling toward an element that's inside an overflowing parent element. */
						if (opts.container) {
							/* Ensure that either a jQuery object or a raw DOM element was passed in. */
							if (Type.isWrapped(opts.container) || Type.isNode(opts.container)) {
								/* Extract the raw DOM element from the jQuery wrapper. */
								opts.container = opts.container[0] || opts.container;
								/* Note: Unlike other properties in Velocity, the browser's scroll position is never cached since it so frequently changes
								 (due to the user's natural interaction with the page). */
								scrollPositionCurrent = opts.container["scroll" + scrollDirection]; /* GET */

								/* $.position() values are relative to the container's currently viewable area (without taking into account the container's true dimensions
								 -- say, for example, if the container was not overflowing). Thus, the scroll end value is the sum of the child element's position *and*
								 the scroll container's current scroll position. */
								scrollPositionEnd = (scrollPositionCurrent + $(element).position()[scrollDirection.toLowerCase()]) + scrollOffset; /* GET */
								/* If a value other than a jQuery object or a raw DOM element was passed in, default to null so that this option is ignored. */
							} else {
								opts.container = null;
							}
						} else {
							/* If the window itself is being scrolled -- not a containing element -- perform a live scroll position lookup using
							 the appropriate cached property names (which differ based on browser type). */
							scrollPositionCurrent = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + scrollDirection]]; /* GET */
							/* When scrolling the browser window, cache the alternate axis's current value since window.scrollTo() doesn't let us change only one value at a time. */
							scrollPositionCurrentAlternate = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + (scrollDirection === "Left" ? "Top" : "Left")]]; /* GET */

							/* Unlike $.position(), $.offset() values are relative to the browser window's true dimensions -- not merely its currently viewable area --
							 and therefore end values do not need to be compounded onto current values. */
							scrollPositionEnd = $(element).offset()[scrollDirection.toLowerCase()] + scrollOffset; /* GET */
						}

						/* Since there's only one format that scroll's associated tweensContainer can take, we create it manually. */
						tweensContainer = {
							scroll: {
								rootPropertyValue: false,
								startValue: scrollPositionCurrent,
								currentValue: scrollPositionCurrent,
								endValue: scrollPositionEnd,
								unitType: "",
								easing: opts.easing,
								scrollData: {
									container: opts.container,
									direction: scrollDirection,
									alternateValue: scrollPositionCurrentAlternate
								}
							},
							element: element
						};

						if (Velocity.debug) {
							console.log("tweensContainer (scroll): ", tweensContainer.scroll, element);
						}

						/******************************************
						 Tween Data Construction (for Reverse)
						 ******************************************/

						/* Reverse acts like a "start" action in that a property map is animated toward. The only difference is
						 that the property map used for reverse is the inverse of the map used in the previous call. Thus, we manipulate
						 the previous call to construct our new map: use the previous map's end values as our new map's start values. Copy over all other data. */
						/* Note: Reverse can be directly called via the "reverse" parameter, or it can be indirectly triggered via the loop option. (Loops are composed of multiple reverses.) */
						/* Note: Reverse calls do not need to be consecutively chained onto a currently-animating element in order to operate on cached values;
						 there is no harm to reverse being called on a potentially stale data cache since reverse's behavior is simply defined
						 as reverting to the element's values as they were prior to the previous *Velocity* call. */
					} else if (action === "reverse") {
						data = Data(element);

						/* Abort if there is no prior animation data to reverse to. */
						if (!data) {
							return;
						}

						if (!data.tweensContainer) {
							/* Dequeue the element so that this queue entry releases itself immediately, allowing subsequent queue entries to run. */
							$.dequeue(element, opts.queue);

							return;
						} else {
							/*********************
							 Options Parsing
							 *********************/

							/* If the element was hidden via the display option in the previous call,
							 revert display to "auto" prior to reversal so that the element is visible again. */
							if (data.opts.display === "none") {
								data.opts.display = "auto";
							}

							if (data.opts.visibility === "hidden") {
								data.opts.visibility = "visible";
							}

							/* If the loop option was set in the previous call, disable it so that "reverse" calls aren't recursively generated.
							 Further, remove the previous call's callback options; typically, users do not want these to be refired. */
							data.opts.loop = false;
							data.opts.begin = null;
							data.opts.complete = null;

							/* Since we're extending an opts object that has already been extended with the defaults options object,
							 we remove non-explicitly-defined properties that are auto-assigned values. */
							if (!options.easing) {
								delete opts.easing;
							}

							if (!options.duration) {
								delete opts.duration;
							}

							/* The opts object used for reversal is an extension of the options object optionally passed into this
							 reverse call plus the options used in the previous Velocity call. */
							opts = $.extend({}, data.opts, opts);

							/*************************************
							 Tweens Container Reconstruction
							 *************************************/

							/* Create a deepy copy (indicated via the true flag) of the previous call's tweensContainer. */
							lastTweensContainer = $.extend(true, {}, data ? data.tweensContainer : null);

							/* Manipulate the previous tweensContainer by replacing its end values and currentValues with its start values. */
							for (var lastTween in lastTweensContainer) {
								/* In addition to tween data, tweensContainers contain an element property that we ignore here. */
								if (lastTweensContainer.hasOwnProperty(lastTween) && lastTween !== "element") {
									var lastStartValue = lastTweensContainer[lastTween].startValue;

									lastTweensContainer[lastTween].startValue = lastTweensContainer[lastTween].currentValue = lastTweensContainer[lastTween].endValue;
									lastTweensContainer[lastTween].endValue = lastStartValue;

									/* Easing is the only option that embeds into the individual tween data (since it can be defined on a per-property basis).
									 Accordingly, every property's easing value must be updated when an options object is passed in with a reverse call.
									 The side effect of this extensibility is that all per-property easing values are forcefully reset to the new value. */
									if (!Type.isEmptyObject(options)) {
										lastTweensContainer[lastTween].easing = opts.easing;
									}

									if (Velocity.debug) {
										console.log("reverse tweensContainer (" + lastTween + "): " + JSON.stringify(lastTweensContainer[lastTween]), element);
									}
								}
							}

							tweensContainer = lastTweensContainer;
						}

						/*****************************************
						 Tween Data Construction (for Start)
						 *****************************************/

					} else if (action === "start") {

						/*************************
						 Value Transferring
						 *************************/

						/* If this queue entry follows a previous Velocity-initiated queue entry *and* if this entry was created
						 while the element was in the process of being animated by Velocity, then this current call is safe to use
						 the end values from the prior call as its start values. Velocity attempts to perform this value transfer
						 process whenever possible in order to avoid requerying the DOM. */
						/* If values aren't transferred from a prior call and start values were not forcefed by the user (more on this below),
						 then the DOM is queried for the element's current values as a last resort. */
						/* Note: Conversely, animation reversal (and looping) *always* perform inter-call value transfers; they never requery the DOM. */

						data = Data(element);

						/* The per-element isAnimating flag is used to indicate whether it's safe (i.e. the data isn't stale)
						 to transfer over end values to use as start values. If it's set to true and there is a previous
						 Velocity call to pull values from, do so. */
						if (data && data.tweensContainer && data.isAnimating === true) {
							lastTweensContainer = data.tweensContainer;
						}

						/***************************
						 Tween Data Calculation
						 ***************************/

						/* This function parses property data and defaults endValue, easing, and startValue as appropriate. */
						/* Property map values can either take the form of 1) a single value representing the end value,
						 or 2) an array in the form of [ endValue, [, easing] [, startValue] ].
						 The optional third parameter is a forcefed startValue to be used instead of querying the DOM for
						 the element's current value. Read Velocity's docmentation to learn more about forcefeeding: VelocityJS.org/#forcefeeding */
						var parsePropertyValue = function(valueData, skipResolvingEasing) {
							var endValue, easing, startValue;

							/* If we have a function as the main argument then resolve it first, in case it returns an array that needs to be split */
							if (Type.isFunction(valueData)) {
								valueData = valueData.call(element, elementArrayIndex, elementsLength);
							}

							/* Handle the array format, which can be structured as one of three potential overloads:
							 A) [ endValue, easing, startValue ], B) [ endValue, easing ], or C) [ endValue, startValue ] */
							if (Type.isArray(valueData)) {
								/* endValue is always the first item in the array. Don't bother validating endValue's value now
								 since the ensuing property cycling logic does that. */
								endValue = valueData[0];

								/* Two-item array format: If the second item is a number, function, or hex string, treat it as a
								 start value since easings can only be non-hex strings or arrays. */
								if ((!Type.isArray(valueData[1]) && /^[\d-]/.test(valueData[1])) || Type.isFunction(valueData[1]) || CSS.RegEx.isHex.test(valueData[1])) {
									startValue = valueData[1];
									/* Two or three-item array: If the second item is a non-hex string easing name or an array, treat it as an easing. */
								} else if ((Type.isString(valueData[1]) && !CSS.RegEx.isHex.test(valueData[1]) && Velocity.Easings[valueData[1]]) || Type.isArray(valueData[1])) {
									easing = skipResolvingEasing ? valueData[1] : getEasing(valueData[1], opts.duration);

									/* Don't bother validating startValue's value now since the ensuing property cycling logic inherently does that. */
									startValue = valueData[2];
								} else {
									startValue = valueData[1] || valueData[2];
								}
								/* Handle the single-value format. */
							} else {
								endValue = valueData;
							}

							/* Default to the call's easing if a per-property easing type was not defined. */
							if (!skipResolvingEasing) {
								easing = easing || opts.easing;
							}

							/* If functions were passed in as values, pass the function the current element as its context,
							 plus the element's index and the element set's size as arguments. Then, assign the returned value. */
							if (Type.isFunction(endValue)) {
								endValue = endValue.call(element, elementArrayIndex, elementsLength);
							}

							if (Type.isFunction(startValue)) {
								startValue = startValue.call(element, elementArrayIndex, elementsLength);
							}

							/* Allow startValue to be left as undefined to indicate to the ensuing code that its value was not forcefed. */
							return [endValue || 0, easing, startValue];
						};

						var fixPropertyValue = function(property, valueData) {
							/* In case this property is a hook, there are circumstances where we will intend to work on the hook's root property and not the hooked subproperty. */
							var rootProperty = CSS.Hooks.getRoot(property),
									rootPropertyValue = false,
									/* Parse out endValue, easing, and startValue from the property's data. */
									endValue = valueData[0],
									easing = valueData[1],
									startValue = valueData[2],
									pattern;

							/**************************
							 Start Value Sourcing
							 **************************/

							/* Other than for the dummy tween property, properties that are not supported by the browser (and do not have an associated normalization) will
							 inherently produce no style changes when set, so they are skipped in order to decrease animation tick overhead.
							 Property support is determined via prefixCheck(), which returns a false flag when no supported is detected. */
							/* Note: Since SVG elements have some of their properties directly applied as HTML attributes,
							 there is no way to check for their explicit browser support, and so we skip skip this check for them. */
							if ((!data || !data.isSVG) && rootProperty !== "tween" && CSS.Names.prefixCheck(rootProperty)[1] === false && CSS.Normalizations.registered[rootProperty] === undefined) {
								if (Velocity.debug) {
									console.log("Skipping [" + rootProperty + "] due to a lack of browser support.");
								}
								return;
							}

							/* If the display option is being set to a non-"none" (e.g. "block") and opacity (filter on IE<=8) is being
							 animated to an endValue of non-zero, the user's intention is to fade in from invisible, thus we forcefeed opacity
							 a startValue of 0 if its startValue hasn't already been sourced by value transferring or prior forcefeeding. */
							if (((opts.display !== undefined && opts.display !== null && opts.display !== "none") || (opts.visibility !== undefined && opts.visibility !== "hidden")) && /opacity|filter/.test(property) && !startValue && endValue !== 0) {
								startValue = 0;
							}

							/* If values have been transferred from the previous Velocity call, extract the endValue and rootPropertyValue
							 for all of the current call's properties that were *also* animated in the previous call. */
							/* Note: Value transferring can optionally be disabled by the user via the _cacheValues option. */
							if (opts._cacheValues && lastTweensContainer && lastTweensContainer[property]) {
								if (startValue === undefined) {
									startValue = lastTweensContainer[property].endValue + lastTweensContainer[property].unitType;
								}

								/* The previous call's rootPropertyValue is extracted from the element's data cache since that's the
								 instance of rootPropertyValue that gets freshly updated by the tweening process, whereas the rootPropertyValue
								 attached to the incoming lastTweensContainer is equal to the root property's value prior to any tweening. */
								rootPropertyValue = data.rootPropertyValueCache[rootProperty];
								/* If values were not transferred from a previous Velocity call, query the DOM as needed. */
							} else {
								/* Handle hooked properties. */
								if (CSS.Hooks.registered[property]) {
									if (startValue === undefined) {
										rootPropertyValue = CSS.getPropertyValue(element, rootProperty); /* GET */
										/* Note: The following getPropertyValue() call does not actually trigger a DOM query;
										 getPropertyValue() will extract the hook from rootPropertyValue. */
										startValue = CSS.getPropertyValue(element, property, rootPropertyValue);
										/* If startValue is already defined via forcefeeding, do not query the DOM for the root property's value;
										 just grab rootProperty's zero-value template from CSS.Hooks. This overwrites the element's actual
										 root property value (if one is set), but this is acceptable since the primary reason users forcefeed is
										 to avoid DOM queries, and thus we likewise avoid querying the DOM for the root property's value. */
									} else {
										/* Grab this hook's zero-value template, e.g. "0px 0px 0px black". */
										rootPropertyValue = CSS.Hooks.templates[rootProperty][1];
									}
									/* Handle non-hooked properties that haven't already been defined via forcefeeding. */
								} else if (startValue === undefined) {
									startValue = CSS.getPropertyValue(element, property); /* GET */
								}
							}

							/**************************
							 Value Data Extraction
							 **************************/

							var separatedValue,
									endValueUnitType,
									startValueUnitType,
									operator = false;

							/* Separates a property value into its numeric value and its unit type. */
							var separateValue = function(property, value) {
								var unitType,
										numericValue;

								numericValue = (value || "0")
										.toString()
										.toLowerCase()
										/* Match the unit type at the end of the value. */
										.replace(/[%A-z]+$/, function(match) {
											/* Grab the unit type. */
											unitType = match;

											/* Strip the unit type off of value. */
											return "";
										});

								/* If no unit type was supplied, assign one that is appropriate for this property (e.g. "deg" for rotateZ or "px" for width). */
								if (!unitType) {
									unitType = CSS.Values.getUnitType(property);
								}

								return [numericValue, unitType];
							};

							if (startValue !== endValue && Type.isString(startValue) && Type.isString(endValue)) {
								pattern = "";
								var iStart = 0, // index in startValue
										iEnd = 0, // index in endValue
										aStart = [], // array of startValue numbers
										aEnd = [], // array of endValue numbers
										inCalc = 0, // Keep track of being inside a "calc()" so we don't duplicate it
										inRGB = 0, // Keep track of being inside an RGB as we can't use fractional values
										inRGBA = 0; // Keep track of being inside an RGBA as we must pass fractional for the alpha channel

								startValue = CSS.Hooks.fixColors(startValue);
								endValue = CSS.Hooks.fixColors(endValue);
								while (iStart < startValue.length && iEnd < endValue.length) {
									var cStart = startValue[iStart],
											cEnd = endValue[iEnd];

									if (/[\d\.-]/.test(cStart) && /[\d\.-]/.test(cEnd)) {
										var tStart = cStart, // temporary character buffer
												tEnd = cEnd, // temporary character buffer
												dotStart = ".", // Make sure we can only ever match a single dot in a decimal
												dotEnd = "."; // Make sure we can only ever match a single dot in a decimal

										while (++iStart < startValue.length) {
											cStart = startValue[iStart];
											if (cStart === dotStart) {
												dotStart = ".."; // Can never match two characters
											} else if (!/\d/.test(cStart)) {
												break;
											}
											tStart += cStart;
										}
										while (++iEnd < endValue.length) {
											cEnd = endValue[iEnd];
											if (cEnd === dotEnd) {
												dotEnd = ".."; // Can never match two characters
											} else if (!/\d/.test(cEnd)) {
												break;
											}
											tEnd += cEnd;
										}
										var uStart = CSS.Hooks.getUnit(startValue, iStart), // temporary unit type
												uEnd = CSS.Hooks.getUnit(endValue, iEnd); // temporary unit type

										iStart += uStart.length;
										iEnd += uEnd.length;
										if (uStart === uEnd) {
											// Same units
											if (tStart === tEnd) {
												// Same numbers, so just copy over
												pattern += tStart + uStart;
											} else {
												// Different numbers, so store them
												pattern += "{" + aStart.length + (inRGB ? "!" : "") + "}" + uStart;
												aStart.push(parseFloat(tStart));
												aEnd.push(parseFloat(tEnd));
											}
										} else {
											// Different units, so put into a "calc(from + to)" and animate each side to/from zero
											var nStart = parseFloat(tStart),
													nEnd = parseFloat(tEnd);

											pattern += (inCalc < 5 ? "calc" : "") + "("
													+ (nStart ? "{" + aStart.length + (inRGB ? "!" : "") + "}" : "0") + uStart
													+ " + "
													+ (nEnd ? "{" + (aStart.length + (nStart ? 1 : 0)) + (inRGB ? "!" : "") + "}" : "0") + uEnd
													+ ")";
											if (nStart) {
												aStart.push(nStart);
												aEnd.push(0);
											}
											if (nEnd) {
												aStart.push(0);
												aEnd.push(nEnd);
											}
										}
									} else if (cStart === cEnd) {
										pattern += cStart;
										iStart++;
										iEnd++;
										// Keep track of being inside a calc()
										if (inCalc === 0 && cStart === "c"
												|| inCalc === 1 && cStart === "a"
												|| inCalc === 2 && cStart === "l"
												|| inCalc === 3 && cStart === "c"
												|| inCalc >= 4 && cStart === "("
												) {
											inCalc++;
										} else if ((inCalc && inCalc < 5)
												|| inCalc >= 4 && cStart === ")" && --inCalc < 5) {
											inCalc = 0;
										}
										// Keep track of being inside an rgb() / rgba()
										if (inRGB === 0 && cStart === "r"
												|| inRGB === 1 && cStart === "g"
												|| inRGB === 2 && cStart === "b"
												|| inRGB === 3 && cStart === "a"
												|| inRGB >= 3 && cStart === "("
												) {
											if (inRGB === 3 && cStart === "a") {
												inRGBA = 1;
											}
											inRGB++;
										} else if (inRGBA && cStart === ",") {
											if (++inRGBA > 3) {
												inRGB = inRGBA = 0;
											}
										} else if ((inRGBA && inRGB < (inRGBA ? 5 : 4))
												|| inRGB >= (inRGBA ? 4 : 3) && cStart === ")" && --inRGB < (inRGBA ? 5 : 4)) {
											inRGB = inRGBA = 0;
										}
									} else {
										inCalc = 0;
										// TODO: changing units, fixing colours
										break;
									}
								}
								if (iStart !== startValue.length || iEnd !== endValue.length) {
									if (Velocity.debug) {
										console.error("Trying to pattern match mis-matched strings [\"" + endValue + "\", \"" + startValue + "\"]");
									}
									pattern = undefined;
								}
								if (pattern) {
									if (aStart.length) {
										if (Velocity.debug) {
											console.log("Pattern found \"" + pattern + "\" -> ", aStart, aEnd, "[" + startValue + "," + endValue + "]");
										}
										startValue = aStart;
										endValue = aEnd;
										endValueUnitType = startValueUnitType = "";
									} else {
										pattern = undefined;
									}
								}
							}

							if (!pattern) {
								/* Separate startValue. */
								separatedValue = separateValue(property, startValue);
								startValue = separatedValue[0];
								startValueUnitType = separatedValue[1];

								/* Separate endValue, and extract a value operator (e.g. "+=", "-=") if one exists. */
								separatedValue = separateValue(property, endValue);
								endValue = separatedValue[0].replace(/^([+-\/*])=/, function(match, subMatch) {
									operator = subMatch;

									/* Strip the operator off of the value. */
									return "";
								});
								endValueUnitType = separatedValue[1];

								/* Parse float values from endValue and startValue. Default to 0 if NaN is returned. */
								startValue = parseFloat(startValue) || 0;
								endValue = parseFloat(endValue) || 0;

								/***************************************
								 Property-Specific Value Conversion
								 ***************************************/

								/* Custom support for properties that don't actually accept the % unit type, but where pollyfilling is trivial and relatively foolproof. */
								if (endValueUnitType === "%") {
									/* A %-value fontSize/lineHeight is relative to the parent's fontSize (as opposed to the parent's dimensions),
									 which is identical to the em unit's behavior, so we piggyback off of that. */
									if (/^(fontSize|lineHeight)$/.test(property)) {
										/* Convert % into an em decimal value. */
										endValue = endValue / 100;
										endValueUnitType = "em";
										/* For scaleX and scaleY, convert the value into its decimal format and strip off the unit type. */
									} else if (/^scale/.test(property)) {
										endValue = endValue / 100;
										endValueUnitType = "";
										/* For RGB components, take the defined percentage of 255 and strip off the unit type. */
									} else if (/(Red|Green|Blue)$/i.test(property)) {
										endValue = (endValue / 100) * 255;
										endValueUnitType = "";
									}
								}
							}

							/***************************
							 Unit Ratio Calculation
							 ***************************/

							/* When queried, the browser returns (most) CSS property values in pixels. Therefore, if an endValue with a unit type of
							 %, em, or rem is animated toward, startValue must be converted from pixels into the same unit type as endValue in order
							 for value manipulation logic (increment/decrement) to proceed. Further, if the startValue was forcefed or transferred
							 from a previous call, startValue may also not be in pixels. Unit conversion logic therefore consists of two steps:
							 1) Calculating the ratio of %/em/rem/vh/vw relative to pixels
							 2) Converting startValue into the same unit of measurement as endValue based on these ratios. */
							/* Unit conversion ratios are calculated by inserting a sibling node next to the target node, copying over its position property,
							 setting values with the target unit type then comparing the returned pixel value. */
							/* Note: Even if only one of these unit types is being animated, all unit ratios are calculated at once since the overhead
							 of batching the SETs and GETs together upfront outweights the potential overhead
							 of layout thrashing caused by re-querying for uncalculated ratios for subsequently-processed properties. */
							/* Todo: Shift this logic into the calls' first tick instance so that it's synced with RAF. */
							var calculateUnitRatios = function() {

								/************************
								 Same Ratio Checks
								 ************************/

								/* The properties below are used to determine whether the element differs sufficiently from this call's
								 previously iterated element to also differ in its unit conversion ratios. If the properties match up with those
								 of the prior element, the prior element's conversion ratios are used. Like most optimizations in Velocity,
								 this is done to minimize DOM querying. */
								var sameRatioIndicators = {
									myParent: element.parentNode || document.body, /* GET */
									position: CSS.getPropertyValue(element, "position"), /* GET */
									fontSize: CSS.getPropertyValue(element, "fontSize") /* GET */
								},
										/* Determine if the same % ratio can be used. % is based on the element's position value and its parent's width and height dimensions. */
										samePercentRatio = ((sameRatioIndicators.position === callUnitConversionData.lastPosition) && (sameRatioIndicators.myParent === callUnitConversionData.lastParent)),
										/* Determine if the same em ratio can be used. em is relative to the element's fontSize. */
										sameEmRatio = (sameRatioIndicators.fontSize === callUnitConversionData.lastFontSize);

								/* Store these ratio indicators call-wide for the next element to compare against. */
								callUnitConversionData.lastParent = sameRatioIndicators.myParent;
								callUnitConversionData.lastPosition = sameRatioIndicators.position;
								callUnitConversionData.lastFontSize = sameRatioIndicators.fontSize;

								/***************************
								 Element-Specific Units
								 ***************************/

								/* Note: IE8 rounds to the nearest pixel when returning CSS values, thus we perform conversions using a measurement
								 of 100 (instead of 1) to give our ratios a precision of at least 2 decimal values. */
								var measurement = 100,
										unitRatios = {};

								if (!sameEmRatio || !samePercentRatio) {
									var dummy = data && data.isSVG ? document.createElementNS("http://www.w3.org/2000/svg", "rect") : document.createElement("div");

									Velocity.init(dummy);
									sameRatioIndicators.myParent.appendChild(dummy);

									/* To accurately and consistently calculate conversion ratios, the element's cascaded overflow and box-sizing are stripped.
									 Similarly, since width/height can be artificially constrained by their min-/max- equivalents, these are controlled for as well. */
									/* Note: Overflow must be also be controlled for per-axis since the overflow property overwrites its per-axis values. */
									$.each(["overflow", "overflowX", "overflowY"], function(i, property) {
										Velocity.CSS.setPropertyValue(dummy, property, "hidden");
									});
									Velocity.CSS.setPropertyValue(dummy, "position", sameRatioIndicators.position);
									Velocity.CSS.setPropertyValue(dummy, "fontSize", sameRatioIndicators.fontSize);
									Velocity.CSS.setPropertyValue(dummy, "boxSizing", "content-box");

									/* width and height act as our proxy properties for measuring the horizontal and vertical % ratios. */
									$.each(["minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height"], function(i, property) {
										Velocity.CSS.setPropertyValue(dummy, property, measurement + "%");
									});
									/* paddingLeft arbitrarily acts as our proxy property for the em ratio. */
									Velocity.CSS.setPropertyValue(dummy, "paddingLeft", measurement + "em");

									/* Divide the returned value by the measurement to get the ratio between 1% and 1px. Default to 1 since working with 0 can produce Infinite. */
									unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth = (parseFloat(CSS.getPropertyValue(dummy, "width", null, true)) || 1) / measurement; /* GET */
									unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight = (parseFloat(CSS.getPropertyValue(dummy, "height", null, true)) || 1) / measurement; /* GET */
									unitRatios.emToPx = callUnitConversionData.lastEmToPx = (parseFloat(CSS.getPropertyValue(dummy, "paddingLeft")) || 1) / measurement; /* GET */

									sameRatioIndicators.myParent.removeChild(dummy);
								} else {
									unitRatios.emToPx = callUnitConversionData.lastEmToPx;
									unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth;
									unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight;
								}

								/***************************
								 Element-Agnostic Units
								 ***************************/

								/* Whereas % and em ratios are determined on a per-element basis, the rem unit only needs to be checked
								 once per call since it's exclusively dependant upon document.body's fontSize. If this is the first time
								 that calculateUnitRatios() is being run during this call, remToPx will still be set to its default value of null,
								 so we calculate it now. */
								if (callUnitConversionData.remToPx === null) {
									/* Default to browsers' default fontSize of 16px in the case of 0. */
									callUnitConversionData.remToPx = parseFloat(CSS.getPropertyValue(document.body, "fontSize")) || 16; /* GET */
								}

								/* Similarly, viewport units are %-relative to the window's inner dimensions. */
								if (callUnitConversionData.vwToPx === null) {
									callUnitConversionData.vwToPx = parseFloat(window.innerWidth) / 100; /* GET */
									callUnitConversionData.vhToPx = parseFloat(window.innerHeight) / 100; /* GET */
								}

								unitRatios.remToPx = callUnitConversionData.remToPx;
								unitRatios.vwToPx = callUnitConversionData.vwToPx;
								unitRatios.vhToPx = callUnitConversionData.vhToPx;

								if (Velocity.debug >= 1) {
									console.log("Unit ratios: " + JSON.stringify(unitRatios), element);
								}
								return unitRatios;
							};

							/********************
							 Unit Conversion
							 ********************/

							/* The * and / operators, which are not passed in with an associated unit, inherently use startValue's unit. Skip value and unit conversion. */
							if (/[\/*]/.test(operator)) {
								endValueUnitType = startValueUnitType;
								/* If startValue and endValue differ in unit type, convert startValue into the same unit type as endValue so that if endValueUnitType
								 is a relative unit (%, em, rem), the values set during tweening will continue to be accurately relative even if the metrics they depend
								 on are dynamically changing during the course of the animation. Conversely, if we always normalized into px and used px for setting values, the px ratio
								 would become stale if the original unit being animated toward was relative and the underlying metrics change during the animation. */
								/* Since 0 is 0 in any unit type, no conversion is necessary when startValue is 0 -- we just start at 0 with endValueUnitType. */
							} else if ((startValueUnitType !== endValueUnitType) && startValue !== 0) {
								/* Unit conversion is also skipped when endValue is 0, but *startValueUnitType* must be used for tween values to remain accurate. */
								/* Note: Skipping unit conversion here means that if endValueUnitType was originally a relative unit, the animation won't relatively
								 match the underlying metrics if they change, but this is acceptable since we're animating toward invisibility instead of toward visibility,
								 which remains past the point of the animation's completion. */
								if (endValue === 0) {
									endValueUnitType = startValueUnitType;
								} else {
									/* By this point, we cannot avoid unit conversion (it's undesirable since it causes layout thrashing).
									 If we haven't already, we trigger calculateUnitRatios(), which runs once per element per call. */
									elementUnitConversionData = elementUnitConversionData || calculateUnitRatios();

									/* The following RegEx matches CSS properties that have their % values measured relative to the x-axis. */
									/* Note: W3C spec mandates that all of margin and padding's properties (even top and bottom) are %-relative to the *width* of the parent element. */
									var axis = (/margin|padding|left|right|width|text|word|letter/i.test(property) || /X$/.test(property) || property === "x") ? "x" : "y";

									/* In order to avoid generating n^2 bespoke conversion functions, unit conversion is a two-step process:
									 1) Convert startValue into pixels. 2) Convert this new pixel value into endValue's unit type. */
									switch (startValueUnitType) {
										case "%":
											/* Note: translateX and translateY are the only properties that are %-relative to an element's own dimensions -- not its parent's dimensions.
											 Velocity does not include a special conversion process to account for this behavior. Therefore, animating translateX/Y from a % value
											 to a non-% value will produce an incorrect start value. Fortunately, this sort of cross-unit conversion is rarely done by users in practice. */
											startValue *= (axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight);
											break;

										case "px":
											/* px acts as our midpoint in the unit conversion process; do nothing. */
											break;

										default:
											startValue *= elementUnitConversionData[startValueUnitType + "ToPx"];
									}

									/* Invert the px ratios to convert into to the target unit. */
									switch (endValueUnitType) {
										case "%":
											startValue *= 1 / (axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight);
											break;

										case "px":
											/* startValue is already in px, do nothing; we're done. */
											break;

										default:
											startValue *= 1 / elementUnitConversionData[endValueUnitType + "ToPx"];
									}
								}
							}

							/*********************
							 Relative Values
							 *********************/

							/* Operator logic must be performed last since it requires unit-normalized start and end values. */
							/* Note: Relative *percent values* do not behave how most people think; while one would expect "+=50%"
							 to increase the property 1.5x its current value, it in fact increases the percent units in absolute terms:
							 50 points is added on top of the current % value. */
							switch (operator) {
								case "+":
									endValue = startValue + endValue;
									break;

								case "-":
									endValue = startValue - endValue;
									break;

								case "*":
									endValue = startValue * endValue;
									break;

								case "/":
									endValue = startValue / endValue;
									break;
							}

							/**************************
							 tweensContainer Push
							 **************************/

							/* Construct the per-property tween object, and push it to the element's tweensContainer. */
							tweensContainer[property] = {
								rootPropertyValue: rootPropertyValue,
								startValue: startValue,
								currentValue: startValue,
								endValue: endValue,
								unitType: endValueUnitType,
								easing: easing
							};
							if (pattern) {
								tweensContainer[property].pattern = pattern;
							}

							if (Velocity.debug) {
								console.log("tweensContainer (" + property + "): " + JSON.stringify(tweensContainer[property]), element);
							}
						};

						/* Create a tween out of each property, and append its associated data to tweensContainer. */
						for (var property in propertiesMap) {

							if (!propertiesMap.hasOwnProperty(property)) {
								continue;
							}
							/* The original property name's format must be used for the parsePropertyValue() lookup,
							 but we then use its camelCase styling to normalize it for manipulation. */
							var propertyName = CSS.Names.camelCase(property),
									valueData = parsePropertyValue(propertiesMap[property]);

							/* Find shorthand color properties that have been passed a hex string. */
							/* Would be quicker to use CSS.Lists.colors.includes() if possible */
							if (_inArray(CSS.Lists.colors, propertyName)) {
								/* Parse the value data for each shorthand. */
								var endValue = valueData[0],
										easing = valueData[1],
										startValue = valueData[2];

								if (CSS.RegEx.isHex.test(endValue)) {
									/* Convert the hex strings into their RGB component arrays. */
									var colorComponents = ["Red", "Green", "Blue"],
											endValueRGB = CSS.Values.hexToRgb(endValue),
											startValueRGB = startValue ? CSS.Values.hexToRgb(startValue) : undefined;

									/* Inject the RGB component tweens into propertiesMap. */
									for (var i = 0; i < colorComponents.length; i++) {
										var dataArray = [endValueRGB[i]];

										if (easing) {
											dataArray.push(easing);
										}

										if (startValueRGB !== undefined) {
											dataArray.push(startValueRGB[i]);
										}

										fixPropertyValue(propertyName + colorComponents[i], dataArray);
									}
									/* If we have replaced a shortcut color value then don't update the standard property name */
									continue;
								}
							}
							fixPropertyValue(propertyName, valueData);
						}

						/* Along with its property data, store a reference to the element itself onto tweensContainer. */
						tweensContainer.element = element;
					}

					/*****************
					 Call Push
					 *****************/

					/* Note: tweensContainer can be empty if all of the properties in this call's property map were skipped due to not
					 being supported by the browser. The element property is used for checking that the tweensContainer has been appended to. */
					if (tweensContainer.element) {
						/* Apply the "velocity-animating" indicator class. */
						CSS.Values.addClass(element, "velocity-animating");

						/* The call array houses the tweensContainers for each element being animated in the current call. */
						call.push(tweensContainer);

						data = Data(element);

						if (data) {
							/* Store the tweensContainer and options if we're working on the default effects queue, so that they can be used by the reverse command. */
							if (opts.queue === "") {

								data.tweensContainer = tweensContainer;
								data.opts = opts;
							}

							/* Switch on the element's animating flag. */
							data.isAnimating = true;
						}

						/* Once the final element in this call's element set has been processed, push the call array onto
						 Velocity.State.calls for the animation tick to immediately begin processing. */
						if (elementsIndex === elementsLength - 1) {
							/* Add the current call plus its associated metadata (the element set and the call's options) onto the global call container.
							 Anything on this call container is subjected to tick() processing. */
							Velocity.State.calls.push([call, elements, opts, null, promiseData.resolver, null, 0]);

							/* If the animation tick isn't running, start it. (Velocity shuts it off when there are no active calls to process.) */
							if (Velocity.State.isTicking === false) {
								Velocity.State.isTicking = true;

								/* Start the tick loop. */
								tick();
							}
						} else {
							elementsIndex++;
						}
					}
				}

				/* When the queue option is set to false, the call skips the element's queue and fires immediately. */
				if (opts.queue === false) {
					/* Since this buildQueue call doesn't respect the element's existing queue (which is where a delay option would have been appended),
					 we manually inject the delay property here with an explicit setTimeout. */
					if (opts.delay) {

						/* Temporarily store delayed elements to facilitate access for global pause/resume */
						var callIndex = Velocity.State.delayedElements.count++;
						Velocity.State.delayedElements[callIndex] = element;

						var delayComplete = (function(index) {
							return function() {
								/* Clear the temporary element */
								Velocity.State.delayedElements[index] = false;

								/* Finally, issue the call */
								buildQueue();
							};
						})(callIndex);

						Data(element).delayBegin = (new Date()).getTime();
						Data(element).delay = parseFloat(opts.delay);
						Data(element).delayTimer = {
							setTimeout: setTimeout(buildQueue, parseFloat(opts.delay)),
							next: delayComplete
						};
					} else {
						buildQueue();
					}
					/* Otherwise, the call undergoes element queueing as normal. */
					/* Note: To interoperate with jQuery, Velocity uses jQuery's own $.queue() stack for queuing logic. */
				} else {
					$.queue(element, opts.queue, function(next, clearQueue) {
						/* If the clearQueue flag was passed in by the stop command, resolve this call's promise. (Promises can only be resolved once,
						 so it's fine if this is repeatedly triggered for each element in the associated call.) */
						if (clearQueue === true) {
							if (promiseData.promise) {
								promiseData.resolver(elements);
							}

							/* Do not continue with animation queueing. */
							return true;
						}

						/* This flag indicates to the upcoming completeCall() function that this queue entry was initiated by Velocity.
						 See completeCall() for further details. */
						Velocity.velocityQueueEntryFlag = true;

						buildQueue(next);
					});
				}

				/*********************
				 Auto-Dequeuing
				 *********************/

				/* As per jQuery's $.queue() behavior, to fire the first non-custom-queue entry on an element, the element
				 must be dequeued if its queue stack consists *solely* of the current call. (This can be determined by checking
				 for the "inprogress" item that jQuery prepends to active queue stack arrays.) Regardless, whenever the element's
				 queue is further appended with additional items -- including $.delay()'s or even $.animate() calls, the queue's
				 first entry is automatically fired. This behavior contrasts that of custom queues, which never auto-fire. */
				/* Note: When an element set is being subjected to a non-parallel Velocity call, the animation will not begin until
				 each one of the elements in the set has reached the end of its individually pre-existing queue chain. */
				/* Note: Unfortunately, most people don't fully grasp jQuery's powerful, yet quirky, $.queue() function.
				 Lean more here: http://stackoverflow.com/questions/1058158/can-somebody-explain-jquery-queue-to-me */
				if ((opts.queue === "" || opts.queue === "fx") && $.queue(element)[0] !== "inprogress") {
					$.dequeue(element);
				}
			}

			/**************************
			 Element Set Iteration
			 **************************/

			/* If the "nodeType" property exists on the elements variable, we're animating a single element.
			 Place it in an array so that $.each() can iterate over it. */
			$.each(elements, function(i, element) {
				/* Ensure each element in a set has a nodeType (is a real element) to avoid throwing errors. */
				if (Type.isNode(element)) {
					processElement(element, i);
				}
			});

			/******************
			 Option: Loop
			 ******************/

			/* The loop option accepts an integer indicating how many times the element should loop between the values in the
			 current call's properties map and the element's property values prior to this call. */
			/* Note: The loop option's logic is performed here -- after element processing -- because the current call needs
			 to undergo its queue insertion prior to the loop option generating its series of constituent "reverse" calls,
			 which chain after the current call. Two reverse calls (two "alternations") constitute one loop. */
			opts = $.extend({}, Velocity.defaults, options);
			opts.loop = parseInt(opts.loop, 10);
			var reverseCallsCount = (opts.loop * 2) - 1;

			if (opts.loop) {
				/* Double the loop count to convert it into its appropriate number of "reverse" calls.
				 Subtract 1 from the resulting value since the current call is included in the total alternation count. */
				for (var x = 0; x < reverseCallsCount; x++) {
					/* Since the logic for the reverse action occurs inside Queueing and therefore this call's options object
					 isn't parsed until then as well, the current call's delay option must be explicitly passed into the reverse
					 call so that the delay logic that occurs inside *Pre-Queueing* can process it. */
					var reverseOptions = {
						delay: opts.delay,
						progress: opts.progress
					};

					/* If a complete callback was passed into this call, transfer it to the loop redirect's final "reverse" call
					 so that it's triggered when the entire redirect is complete (and not when the very first animation is complete). */
					if (x === reverseCallsCount - 1) {
						reverseOptions.display = opts.display;
						reverseOptions.visibility = opts.visibility;
						reverseOptions.complete = opts.complete;
					}

					animate(elements, "reverse", reverseOptions);
				}
			}

			/***************
			 Chaining
			 ***************/

			/* Return the elements back to the call chain, with wrapped elements taking precedence in case Velocity was called via the $.fn. extension. */
			return getChain();
		};

		/* Turn Velocity into the animation function, extended with the pre-existing Velocity object. */
		Velocity = $.extend(animate, Velocity);
		/* For legacy support, also expose the literal animate method. */
		Velocity.animate = animate;

		/**************
		 Timing
		 **************/

		/* Ticker function. */
		var ticker = window.requestAnimationFrame || rAFShim;

		/* Inactive browser tabs pause rAF, which results in all active animations immediately sprinting to their completion states when the tab refocuses.
		 To get around this, we dynamically switch rAF to setTimeout (which the browser *doesn't* pause) when the tab loses focus. We skip this for mobile
		 devices to avoid wasting battery power on inactive tabs. */
		/* Note: Tab focus detection doesn't work on older versions of IE, but that's okay since they don't support rAF to begin with. */
		if (!Velocity.State.isMobile && document.hidden !== undefined) {
			var updateTicker = function() {
				/* Reassign the rAF function (which the global tick() function uses) based on the tab's focus state. */
				if (document.hidden) {
					ticker = function(callback) {
						/* The tick function needs a truthy first argument in order to pass its internal timestamp check. */
						return setTimeout(function() {
							callback(true);
						}, 16);
					};

					/* The rAF loop has been paused by the browser, so we manually restart the tick. */
					tick();
				} else {
					ticker = window.requestAnimationFrame || rAFShim;
				}
			};

			/* Page could be sitting in the background at this time (i.e. opened as new tab) so making sure we use correct ticker from the start */
			updateTicker();

			/* And then run check again every time visibility changes */
			document.addEventListener("visibilitychange", updateTicker);
		}

		/************
		 Tick
		 ************/

		/* Note: All calls to Velocity are pushed to the Velocity.State.calls array, which is fully iterated through upon each tick. */
		function tick(timestamp) {
			/* An empty timestamp argument indicates that this is the first tick occurence since ticking was turned on.
			 We leverage this metadata to fully ignore the first tick pass since RAF's initial pass is fired whenever
			 the browser's next tick sync time occurs, which results in the first elements subjected to Velocity
			 calls being animated out of sync with any elements animated immediately thereafter. In short, we ignore
			 the first RAF tick pass so that elements being immediately consecutively animated -- instead of simultaneously animated
			 by the same Velocity call -- are properly batched into the same initial RAF tick and consequently remain in sync thereafter. */
			if (timestamp) {
				/* We normally use RAF's high resolution timestamp but as it can be significantly offset when the browser is
				 under high stress we give the option for choppiness over allowing the browser to drop huge chunks of frames.
				 We use performance.now() and shim it if it doesn't exist for when the tab is hidden. */
				var timeCurrent = Velocity.timestamp && timestamp !== true ? timestamp : performance.now();

				/********************
				 Call Iteration
				 ********************/

				var callsLength = Velocity.State.calls.length;

				/* To speed up iterating over this array, it is compacted (falsey items -- calls that have completed -- are removed)
				 when its length has ballooned to a point that can impact tick performance. This only becomes necessary when animation
				 has been continuous with many elements over a long period of time; whenever all active calls are completed, completeCall() clears Velocity.State.calls. */
				if (callsLength > 10000) {
					Velocity.State.calls = compactSparseArray(Velocity.State.calls);
					callsLength = Velocity.State.calls.length;
				}

				/* Iterate through each active call. */
				for (var i = 0; i < callsLength; i++) {
					/* When a Velocity call is completed, its Velocity.State.calls entry is set to false. Continue on to the next call. */
					if (!Velocity.State.calls[i]) {
						continue;
					}

					/************************
					 Call-Wide Variables
					 ************************/

					var callContainer = Velocity.State.calls[i],
							call = callContainer[0],
							opts = callContainer[2],
							timeStart = callContainer[3],
							firstTick = !timeStart,
							tweenDummyValue = null,
							pauseObject = callContainer[5],
							millisecondsEllapsed = callContainer[6];



					/* If timeStart is undefined, then this is the first time that this call has been processed by tick().
					 We assign timeStart now so that its value is as close to the real animation start time as possible.
					 (Conversely, had timeStart been defined when this call was added to Velocity.State.calls, the delay
					 between that time and now would cause the first few frames of the tween to be skipped since
					 percentComplete is calculated relative to timeStart.) */
					/* Further, subtract 16ms (the approximate resolution of RAF) from the current time value so that the
					 first tick iteration isn't wasted by animating at 0% tween completion, which would produce the
					 same style value as the element's current value. */
					if (!timeStart) {
						timeStart = Velocity.State.calls[i][3] = timeCurrent - 16;
					}

					/* If a pause object is present, skip processing unless it has been set to resume */
					if (pauseObject) {
						if (pauseObject.resume === true) {
							/* Update the time start to accomodate the paused completion amount */
							timeStart = callContainer[3] = Math.round(timeCurrent - millisecondsEllapsed - 16);

							/* Remove pause object after processing */
							callContainer[5] = null;
						} else {
							continue;
						}
					}

					millisecondsEllapsed = callContainer[6] = timeCurrent - timeStart;

					/* The tween's completion percentage is relative to the tween's start time, not the tween's start value
					 (which would result in unpredictable tween durations since JavaScript's timers are not particularly accurate).
					 Accordingly, we ensure that percentComplete does not exceed 1. */
					var percentComplete = Math.min((millisecondsEllapsed) / opts.duration, 1);

					/**********************
					 Element Iteration
					 **********************/

					/* For every call, iterate through each of the elements in its set. */
					for (var j = 0, callLength = call.length; j < callLength; j++) {
						var tweensContainer = call[j],
								element = tweensContainer.element;

						/* Check to see if this element has been deleted midway through the animation by checking for the
						 continued existence of its data cache. If it's gone, or the element is currently paused, skip animating this element. */
						if (!Data(element)) {
							continue;
						}

						var transformPropertyExists = false;

						/**********************************
						 Display & Visibility Toggling
						 **********************************/

						/* If the display option is set to non-"none", set it upfront so that the element can become visible before tweening begins.
						 (Otherwise, display's "none" value is set in completeCall() once the animation has completed.) */
						if (opts.display !== undefined && opts.display !== null && opts.display !== "none") {
							if (opts.display === "flex") {
								var flexValues = ["-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex"];

								$.each(flexValues, function(i, flexValue) {
									CSS.setPropertyValue(element, "display", flexValue);
								});
							}

							CSS.setPropertyValue(element, "display", opts.display);
						}

						/* Same goes with the visibility option, but its "none" equivalent is "hidden". */
						if (opts.visibility !== undefined && opts.visibility !== "hidden") {
							CSS.setPropertyValue(element, "visibility", opts.visibility);
						}

						/************************
						 Property Iteration
						 ************************/

						/* For every element, iterate through each property. */
						for (var property in tweensContainer) {
							/* Note: In addition to property tween data, tweensContainer contains a reference to its associated element. */
							if (tweensContainer.hasOwnProperty(property) && property !== "element") {
								var tween = tweensContainer[property],
										currentValue,
										/* Easing can either be a pre-genereated function or a string that references a pre-registered easing
										 on the Velocity.Easings object. In either case, return the appropriate easing *function*. */
										easing = Type.isString(tween.easing) ? Velocity.Easings[tween.easing] : tween.easing;

								/******************************
								 Current Value Calculation
								 ******************************/

								if (Type.isString(tween.pattern)) {
									var patternReplace = percentComplete === 1 ?
											function($0, index, round) {
												var result = tween.endValue[index];

												return round ? Math.round(result) : result;
											} :
											function($0, index, round) {
												var startValue = tween.startValue[index],
														tweenDelta = tween.endValue[index] - startValue,
														result = startValue + (tweenDelta * easing(percentComplete, opts, tweenDelta));

												return round ? Math.round(result) : result;
											};

									currentValue = tween.pattern.replace(/{(\d+)(!)?}/g, patternReplace);
								} else if (percentComplete === 1) {
									/* If this is the last tick pass (if we've reached 100% completion for this tween),
									 ensure that currentValue is explicitly set to its target endValue so that it's not subjected to any rounding. */
									currentValue = tween.endValue;
								} else {
									/* Otherwise, calculate currentValue based on the current delta from startValue. */
									var tweenDelta = tween.endValue - tween.startValue;

									currentValue = tween.startValue + (tweenDelta * easing(percentComplete, opts, tweenDelta));
									/* If no value change is occurring, don't proceed with DOM updating. */
								}
								if (!firstTick && (currentValue === tween.currentValue)) {
									continue;
								}

								tween.currentValue = currentValue;

								/* If we're tweening a fake 'tween' property in order to log transition values, update the one-per-call variable so that
								 it can be passed into the progress callback. */
								if (property === "tween") {
									tweenDummyValue = currentValue;
								} else {
									/******************
									 Hooks: Part I
									 ******************/
									var hookRoot;

									/* For hooked properties, the newly-updated rootPropertyValueCache is cached onto the element so that it can be used
									 for subsequent hooks in this call that are associated with the same root property. If we didn't cache the updated
									 rootPropertyValue, each subsequent update to the root property in this tick pass would reset the previous hook's
									 updates to rootPropertyValue prior to injection. A nice performance byproduct of rootPropertyValue caching is that
									 subsequently chained animations using the same hookRoot but a different hook can use this cached rootPropertyValue. */
									if (CSS.Hooks.registered[property]) {
										hookRoot = CSS.Hooks.getRoot(property);

										var rootPropertyValueCache = Data(element).rootPropertyValueCache[hookRoot];

										if (rootPropertyValueCache) {
											tween.rootPropertyValue = rootPropertyValueCache;
										}
									}

									/*****************
									 DOM Update
									 *****************/

									/* setPropertyValue() returns an array of the property name and property value post any normalization that may have been performed. */
									/* Note: To solve an IE<=8 positioning bug, the unit type is dropped when setting a property value of 0. */
									var adjustedSetData = CSS.setPropertyValue(element, /* SET */
											property,
											tween.currentValue + (IE < 9 && parseFloat(currentValue) === 0 ? "" : tween.unitType),
											tween.rootPropertyValue,
											tween.scrollData);

									/*******************
									 Hooks: Part II
									 *******************/

									/* Now that we have the hook's updated rootPropertyValue (the post-processed value provided by adjustedSetData), cache it onto the element. */
									if (CSS.Hooks.registered[property]) {
										/* Since adjustedSetData contains normalized data ready for DOM updating, the rootPropertyValue needs to be re-extracted from its normalized form. ?? */
										if (CSS.Normalizations.registered[hookRoot]) {
											Data(element).rootPropertyValueCache[hookRoot] = CSS.Normalizations.registered[hookRoot]("extract", null, adjustedSetData[1]);
										} else {
											Data(element).rootPropertyValueCache[hookRoot] = adjustedSetData[1];
										}
									}

									/***************
									 Transforms
									 ***************/

									/* Flag whether a transform property is being animated so that flushTransformCache() can be triggered once this tick pass is complete. */
									if (adjustedSetData[0] === "transform") {
										transformPropertyExists = true;
									}

								}
							}
						}

						/****************
						 mobileHA
						 ****************/

						/* If mobileHA is enabled, set the translate3d transform to null to force hardware acceleration.
						 It's safe to override this property since Velocity doesn't actually support its animation (hooks are used in its place). */
						if (opts.mobileHA) {
							/* Don't set the null transform hack if we've already done so. */
							if (Data(element).transformCache.translate3d === undefined) {
								/* All entries on the transformCache object are later concatenated into a single transform string via flushTransformCache(). */
								Data(element).transformCache.translate3d = "(0px, 0px, 0px)";

								transformPropertyExists = true;
							}
						}

						if (transformPropertyExists) {
							CSS.flushTransformCache(element);
						}
					}

					/* The non-"none" display value is only applied to an element once -- when its associated call is first ticked through.
					 Accordingly, it's set to false so that it isn't re-processed by this call in the next tick. */
					if (opts.display !== undefined && opts.display !== "none") {
						Velocity.State.calls[i][2].display = false;
					}
					if (opts.visibility !== undefined && opts.visibility !== "hidden") {
						Velocity.State.calls[i][2].visibility = false;
					}

					/* Pass the elements and the timing data (percentComplete, msRemaining, timeStart, tweenDummyValue) into the progress callback. */
					if (opts.progress) {
						opts.progress.call(callContainer[1],
								callContainer[1],
								percentComplete,
								Math.max(0, (timeStart + opts.duration) - timeCurrent),
								timeStart,
								tweenDummyValue);
					}

					/* If this call has finished tweening, pass its index to completeCall() to handle call cleanup. */
					if (percentComplete === 1) {
						completeCall(i);
					}
				}
			}

			/* Note: completeCall() sets the isTicking flag to false when the last call on Velocity.State.calls has completed. */
			if (Velocity.State.isTicking) {
				ticker(tick);
			}
		}

		/**********************
		 Call Completion
		 **********************/

		/* Note: Unlike tick(), which processes all active calls at once, call completion is handled on a per-call basis. */
		function completeCall(callIndex, isStopped) {
			/* Ensure the call exists. */
			if (!Velocity.State.calls[callIndex]) {
				return false;
			}

			/* Pull the metadata from the call. */
			var call = Velocity.State.calls[callIndex][0],
					elements = Velocity.State.calls[callIndex][1],
					opts = Velocity.State.calls[callIndex][2],
					resolver = Velocity.State.calls[callIndex][4];

			var remainingCallsExist = false;

			/*************************
			 Element Finalization
			 *************************/

			for (var i = 0, callLength = call.length; i < callLength; i++) {
				var element = call[i].element;

				/* If the user set display to "none" (intending to hide the element), set it now that the animation has completed. */
				/* Note: display:none isn't set when calls are manually stopped (via Velocity("stop"). */
				/* Note: Display gets ignored with "reverse" calls and infinite loops, since this behavior would be undesirable. */
				if (!isStopped && !opts.loop) {
					if (opts.display === "none") {
						CSS.setPropertyValue(element, "display", opts.display);
					}

					if (opts.visibility === "hidden") {
						CSS.setPropertyValue(element, "visibility", opts.visibility);
					}
				}

				/* If the element's queue is empty (if only the "inprogress" item is left at position 0) or if its queue is about to run
				 a non-Velocity-initiated entry, turn off the isAnimating flag. A non-Velocity-initiatied queue entry's logic might alter
				 an element's CSS values and thereby cause Velocity's cached value data to go stale. To detect if a queue entry was initiated by Velocity,
				 we check for the existence of our special Velocity.queueEntryFlag declaration, which minifiers won't rename since the flag
				 is assigned to jQuery's global $ object and thus exists out of Velocity's own scope. */
				var data = Data(element);

				if (opts.loop !== true && ($.queue(element)[1] === undefined || !/\.velocityQueueEntryFlag/i.test($.queue(element)[1]))) {
					/* The element may have been deleted. Ensure that its data cache still exists before acting on it. */
					if (data) {
						data.isAnimating = false;
						/* Clear the element's rootPropertyValueCache, which will become stale. */
						data.rootPropertyValueCache = {};

						var transformHAPropertyExists = false;
						/* If any 3D transform subproperty is at its default value (regardless of unit type), remove it. */
						$.each(CSS.Lists.transforms3D, function(i, transformName) {
							var defaultValue = /^scale/.test(transformName) ? 1 : 0,
									currentValue = data.transformCache[transformName];

							if (data.transformCache[transformName] !== undefined && new RegExp("^\\(" + defaultValue + "[^.]").test(currentValue)) {
								transformHAPropertyExists = true;

								delete data.transformCache[transformName];
							}
						});

						/* Mobile devices have hardware acceleration removed at the end of the animation in order to avoid hogging the GPU's memory. */
						if (opts.mobileHA) {
							transformHAPropertyExists = true;
							delete data.transformCache.translate3d;
						}

						/* Flush the subproperty removals to the DOM. */
						if (transformHAPropertyExists) {
							CSS.flushTransformCache(element);
						}

						/* Remove the "velocity-animating" indicator class. */
						CSS.Values.removeClass(element, "velocity-animating");
					}
				}

				/*********************
				 Option: Complete
				 *********************/

				/* Complete is fired once per call (not once per element) and is passed the full raw DOM element set as both its context and its first argument. */
				/* Note: Callbacks aren't fired when calls are manually stopped (via Velocity("stop"). */
				if (!isStopped && opts.complete && !opts.loop && (i === callLength - 1)) {
					/* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */
					try {
						opts.complete.call(elements, elements);
					} catch (error) {
						setTimeout(function() {
							throw error;
						}, 1);
					}
				}

				/**********************
				 Promise Resolving
				 **********************/

				/* Note: Infinite loops don't return promises. */
				if (resolver && opts.loop !== true) {
					resolver(elements);
				}

				/****************************
				 Option: Loop (Infinite)
				 ****************************/

				if (data && opts.loop === true && !isStopped) {
					/* If a rotateX/Y/Z property is being animated by 360 deg with loop:true, swap tween start/end values to enable
					 continuous iterative rotation looping. (Otherise, the element would just rotate back and forth.) */
					$.each(data.tweensContainer, function(propertyName, tweenContainer) {
						if (/^rotate/.test(propertyName) && ((parseFloat(tweenContainer.startValue) - parseFloat(tweenContainer.endValue)) % 360 === 0)) {
							var oldStartValue = tweenContainer.startValue;

							tweenContainer.startValue = tweenContainer.endValue;
							tweenContainer.endValue = oldStartValue;
						}

						if (/^backgroundPosition/.test(propertyName) && parseFloat(tweenContainer.endValue) === 100 && tweenContainer.unitType === "%") {
							tweenContainer.endValue = 0;
							tweenContainer.startValue = 100;
						}
					});

					Velocity(element, "reverse", {loop: true, delay: opts.delay});
				}

				/***************
				 Dequeueing
				 ***************/

				/* Fire the next call in the queue so long as this call's queue wasn't set to false (to trigger a parallel animation),
				 which would have already caused the next call to fire. Note: Even if the end of the animation queue has been reached,
				 $.dequeue() must still be called in order to completely clear jQuery's animation queue. */
				if (opts.queue !== false) {
					$.dequeue(element, opts.queue);
				}
			}

			/************************
			 Calls Array Cleanup
			 ************************/

			/* Since this call is complete, set it to false so that the rAF tick skips it. This array is later compacted via compactSparseArray().
			 (For performance reasons, the call is set to false instead of being deleted from the array: http://www.html5rocks.com/en/tutorials/speed/v8/) */
			Velocity.State.calls[callIndex] = false;

			/* Iterate through the calls array to determine if this was the final in-progress animation.
			 If so, set a flag to end ticking and clear the calls array. */
			for (var j = 0, callsLength = Velocity.State.calls.length; j < callsLength; j++) {
				if (Velocity.State.calls[j] !== false) {
					remainingCallsExist = true;

					break;
				}
			}

			if (remainingCallsExist === false) {
				/* tick() will detect this flag upon its next iteration and subsequently turn itself off. */
				Velocity.State.isTicking = false;

				/* Clear the calls array so that its length is reset. */
				delete Velocity.State.calls;
				Velocity.State.calls = [];
			}
		}

		/******************
		 Frameworks
		 ******************/

		/* Both jQuery and Zepto allow their $.fn object to be extended to allow wrapped elements to be subjected to plugin calls.
		 If either framework is loaded, register a "velocity" extension pointing to Velocity's core animate() method.  Velocity
		 also registers itself onto a global container (window.jQuery || window.Zepto || window) so that certain features are
		 accessible beyond just a per-element scope. This master object contains an .animate() method, which is later assigned to $.fn
		 (if jQuery or Zepto are present). Accordingly, Velocity can both act on wrapped DOM elements and stand alone for targeting raw DOM elements. */
		global.Velocity = Velocity;

		if (global !== window) {
			/* Assign the element function to Velocity's core animate() method. */
			global.fn.velocity = animate;
			/* Assign the object function's defaults to Velocity's global defaults object. */
			global.fn.velocity.defaults = Velocity.defaults;
		}

		/***********************
		 Packaged Redirects
		 ***********************/

		/* slideUp, slideDown */
		$.each(["Down", "Up"], function(i, direction) {
			Velocity.Redirects["slide" + direction] = function(element, options, elementsIndex, elementsSize, elements, promiseData) {
				var opts = $.extend({}, options),
						begin = opts.begin,
						complete = opts.complete,
						inlineValues = {},
						computedValues = {height: "", marginTop: "", marginBottom: "", paddingTop: "", paddingBottom: ""};

				if (opts.display === undefined) {
					/* Show the element before slideDown begins and hide the element after slideUp completes. */
					/* Note: Inline elements cannot have dimensions animated, so they're reverted to inline-block. */
					opts.display = (direction === "Down" ? (Velocity.CSS.Values.getDisplayType(element) === "inline" ? "inline-block" : "block") : "none");
				}

				opts.begin = function() {
					/* If the user passed in a begin callback, fire it now. */
					if (elementsIndex === 0 && begin) {
						begin.call(elements, elements);
					}

					/* Cache the elements' original vertical dimensional property values so that we can animate back to them. */
					for (var property in computedValues) {
						if (!computedValues.hasOwnProperty(property)) {
							continue;
						}
						inlineValues[property] = element.style[property];

						/* For slideDown, use forcefeeding to animate all vertical properties from 0. For slideUp,
						 use forcefeeding to start from computed values and animate down to 0. */
						var propertyValue = CSS.getPropertyValue(element, property);
						computedValues[property] = (direction === "Down") ? [propertyValue, 0] : [0, propertyValue];
					}

					/* Force vertical overflow content to clip so that sliding works as expected. */
					inlineValues.overflow = element.style.overflow;
					element.style.overflow = "hidden";
				};

				opts.complete = function() {
					/* Reset element to its pre-slide inline values once its slide animation is complete. */
					for (var property in inlineValues) {
						if (inlineValues.hasOwnProperty(property)) {
							element.style[property] = inlineValues[property];
						}
					}

					/* If the user passed in a complete callback, fire it now. */
					if (elementsIndex === elementsSize - 1) {
						if (complete) {
							complete.call(elements, elements);
						}
						if (promiseData) {
							promiseData.resolver(elements);
						}
					}
				};

				Velocity(element, computedValues, opts);
			};
		});

		/* fadeIn, fadeOut */
		$.each(["In", "Out"], function(i, direction) {
			Velocity.Redirects["fade" + direction] = function(element, options, elementsIndex, elementsSize, elements, promiseData) {
				var opts = $.extend({}, options),
						complete = opts.complete,
						propertiesMap = {opacity: (direction === "In") ? 1 : 0};

				/* Since redirects are triggered individually for each element in the animated set, avoid repeatedly triggering
				 callbacks by firing them only when the final element has been reached. */
				if (elementsIndex !== 0) {
					opts.begin = null;
				}
				if (elementsIndex !== elementsSize - 1) {
					opts.complete = null;
				} else {
					opts.complete = function() {
						if (complete) {
							complete.call(elements, elements);
						}
						if (promiseData) {
							promiseData.resolver(elements);
						}
					};
				}

				/* If a display was passed in, use it. Otherwise, default to "none" for fadeOut or the element-specific default for fadeIn. */
				/* Note: We allow users to pass in "null" to skip display setting altogether. */
				if (opts.display === undefined) {
					opts.display = (direction === "In" ? "auto" : "none");
				}

				Velocity(this, propertiesMap, opts);
			};
		});

		return Velocity;
	}((__webpack_provided_window_dot_jQuery || window.Zepto || window), window, (window ? window.document : undefined));
}));

/******************
 Known Issues
 ******************/

/* The CSS spec mandates that the translateX/Y/Z transforms are %-relative to the element itself -- not its parent.
 Velocity, however, doesn't make this distinction. Thus, converting to or from the % unit with these subproperties
 will produce an inaccurate conversion value. The same issue exists with the cx/cy attributes of SVG circles and ellipses. */

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(0)))

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", { value: true });
var maquette = __webpack_require__(1);
var h = maquette.h;
var CaliforniaApp_1 = __webpack_require__(3);
var CaliforniaGenerated_1 = __webpack_require__(2);
var ClientState_1 = __webpack_require__(4);
var PropertyBarVM_1 = __webpack_require__(5);
var currentApp;
var currentRouter;
var CaliforniaRouter = function () {
    function CaliforniaRouter(californiaAppArg) {
        this.deepestLevelCurrentRow = 0;
        this.updateData = function (response, isInitial, preventRenderChainedCalls) {
            var _a;
            if (isInitial === void 0) {
                isInitial = false;
            }
            if (preventRenderChainedCalls === void 0) {
                preventRenderChainedCalls = false;
            }
            var isValidResponse = currentRouter.validateResponse(response);
            if (!isValidResponse) {
                return;
            }
            var isFullDataUpdate = false;
            var isUpdateSuccess = false;
            switch (response.CaliforniaEvent) {
                case CaliforniaGenerated_1.CaliforniaEvent.UpdateContentAtom:
                    if (response.PartialUpdate.ContentAtom !== undefined) {
                        var currentContentAtomIndex = currentApp.clientData.CaliforniaProject.ContentAtoms.findIndex(function (c) {
                            return c.ContentAtomId == response.PartialUpdate.ContentAtom.ContentAtomId;
                        });
                        (_a = currentApp.clientData.CaliforniaProject.ContentAtoms).splice.apply(_a, [currentContentAtomIndex, 1].concat([response.PartialUpdate.ContentAtom]));
                        currentApp.clientData.CaliforniaProject.LayoutMolecules.find(function (l) {
                            return l.LayoutBaseId == response.PartialUpdate.ContentAtom.InstancedOnLayoutId;
                        }).HostedContentAtom = response.PartialUpdate.ContentAtom;
                        isUpdateSuccess = true;
                    }
                    break;
                default:
                    isFullDataUpdate = true;
                    break;
            }
            if (isFullDataUpdate === true) {
                if (response.CaliforniaProject !== undefined) {
                    currentApp.clientData.CaliforniaProject = response.CaliforniaProject;
                    currentApp.clientData.UrlToReadOnly = response.UrlToReadOnly;
                    currentApp.clientData.UrlToReadAndEdit = response.UrlToReadAndEdit;
                    if (response.CaliforniaProject.ResponsiveDevices.length !== undefined && response.CaliforniaProject.ResponsiveDevices.length > 0) {
                        currentApp.clientData.CaliforniaProject.ResponsiveDevices = currentApp.clientData.CaliforniaProject.ResponsiveDevices.sort(function (r1, r2) {
                            return r1.WidthThreshold !== undefined && r2.WidthThreshold !== undefined ? r1.WidthThreshold < r2.WidthThreshold ? -1 : r1.WidthThreshold == r2.WidthThreshold ? 0 : 1 : 0;
                        });
                        currentApp.state.lowestWidthThresholdResponsiveDeviceId = currentApp.clientData.CaliforniaProject.ResponsiveDevices[1].ResponsiveDeviceId;
                        currentApp.state.highestWidthThresholdResponsiveDeviceId = currentApp.clientData.CaliforniaProject.ResponsiveDevices[currentApp.clientData.CaliforniaProject.ResponsiveDevices.length - 1].ResponsiveDeviceId;
                        currentApp.state.noneResponsiveDeviceId = currentApp.clientData.CaliforniaProject.ResponsiveDevices[0].ResponsiveDeviceId;
                        if (isInitial) {
                            for (var i = 0; i < currentApp.propertyBars.length; i++) {
                                var propertyBar = currentApp.propertyBars[i];
                                propertyBar.viewModel.setSelectedResponsiveDeviceId(currentApp.state.noneResponsiveDeviceId, true);
                            }
                        }
                        if (currentApp.pagePreview.virtualStyleIndex.length == 0) {
                            currentApp.pagePreview.virtualStyleIndex = [];
                            currentApp.pagePreview.virtualPseudoStyleIndex = [];
                            for (var _i = 0, _b = currentApp.clientData.CaliforniaProject.ResponsiveDevices; _i < _b.length; _i++) {
                                var responsiveDevice = _b[_i];
                                currentApp.pagePreview.virtualStyleIndex.push([]);
                                currentApp.pagePreview.virtualPseudoStyleIndex.push({});
                            }
                        }
                    }
                    if (isInitial === true) {
                        currentApp.clientData.AllCssProperties = response.AllCssProperties;
                        currentApp.clientData.StyleAtomCssPropertyMapping = response.StyleAtomCssPropertyMapping;
                        currentApp.clientData.ThirdPartyFonts = response.ThirdPartyFonts;
                    }
                    if (currentApp.clientData.CaliforniaProject.StyleQuantums !== undefined && currentApp.clientData.CaliforniaProject.StyleAtoms !== undefined && currentApp.clientData.CaliforniaProject.StyleMolecules !== undefined && currentApp.clientData.CaliforniaProject.LayoutMolecules !== undefined && currentApp.clientData.CaliforniaProject.CaliforniaViews !== undefined && currentApp.clientData.CaliforniaProject.CaliforniaViews.length > 0) {
                        currentRouter.restoreLayoutMoleculeAndStyleReferences();
                        currentApp.state.specialStyleHolder = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (v) {
                            return v.IsInternal === true && v.Name === "[Internal] Special Styles";
                        });
                        if (currentApp.state.specialStyleHolder === undefined) {
                            console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                            return;
                        }
                        currentApp.clientData.CaliforniaProject.CaliforniaViews.filter(function (v) {
                            return !v.IsInternal;
                        }).map(function (v) {
                            if (currentApp.state.specialStyleHolder !== undefined) {
                                var californiaViewStyleHolderRow = currentApp.state.specialStyleHolder.PlacedLayoutRows.find(function (layoutRow) {
                                    var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                                        return m.StyleForLayoutId == layoutRow.LayoutBaseId;
                                    });
                                    if (styleMolecule.Name === "[Internal] " + v.Name + " View Style") {
                                        v.SpecialStyleViewStyleMoleculeId = styleMolecule.StyleMoleculeId;
                                        return true;
                                    }
                                    return false;
                                });
                                var californiaViewBodyStyleHolderRow = currentApp.state.specialStyleHolder.PlacedLayoutRows.find(function (layoutRow) {
                                    var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                                        return m.StyleForLayoutId == layoutRow.LayoutBaseId;
                                    });
                                    if (styleMolecule.Name === "[Internal] " + v.Name + " Body Style") {
                                        v.SpecialStyleBodyStyleMoleculeId = styleMolecule.StyleMoleculeId;
                                        return true;
                                    }
                                    return false;
                                });
                                var californiaViewHtmlStyleHolderRow = currentApp.state.specialStyleHolder.PlacedLayoutRows.find(function (layoutRow) {
                                    var styleMolecule = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (m) {
                                        return m.StyleForLayoutId == layoutRow.LayoutBaseId;
                                    });
                                    if (styleMolecule.Name === "[Internal] " + v.Name + " Html Style") {
                                        v.SpecialStyleHtmlStyleMoleculeId = styleMolecule.StyleMoleculeId;
                                        return true;
                                    }
                                    return false;
                                });
                                v.SpecialStyleViewStyleMoleculeIdString = v.SpecialStyleViewStyleMoleculeId.toString();
                                v.SpecialStyleViewStyleString = "s" + v.SpecialStyleViewStyleMoleculeIdString;
                                v.SpecialStyleBodyStyleMoleculeIdString = v.SpecialStyleBodyStyleMoleculeId.toString();
                                v.SpecialStyleBodyStyleString = "s" + v.SpecialStyleBodyStyleMoleculeIdString;
                                v.SpecialStyleHtmlStyleMoleculeIdString = v.SpecialStyleHtmlStyleMoleculeId.toString();
                                v.SpecialStyleHtmlStyleString = "s" + v.SpecialStyleHtmlStyleMoleculeIdString;
                            } else {
                                v.SpecialStyleViewStyleString = "";
                                v.SpecialStyleBodyStyleString = "";
                                v.SpecialStyleHtmlStyleString = "";
                            }
                        });
                        var instanceableAtomsView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (view) {
                            return view.IsInternal && view.Name === "[Internal] Instanceable Layout Atoms";
                        });
                        var instanceableRowsView = currentApp.clientData.CaliforniaProject.CaliforniaViews.find(function (view) {
                            return view.IsInternal && view.Name === "[Internal] Instanceable Layout Rows";
                        });
                        currentRouter.setActiveCaliforniaViewId(currentApp.pagePreviewVM.activeCaliforniaViewId != 0 ? currentApp.pagePreviewVM.activeCaliforniaViewId : 0, true, isInitial);
                        for (var i = 0; i < currentApp.propertyBars.length; i++) {
                            currentApp.propertyBars[i].viewModel.updateData(currentApp.clientData.CaliforniaProject.StyleQuantums, currentApp.clientData.CaliforniaProject.StyleAtoms, currentApp.clientData.CaliforniaProject.StyleMolecules, currentApp.clientData.CaliforniaProject.LayoutMolecules, currentApp.clientData.CaliforniaProject.CaliforniaViews, instanceableAtomsView, instanceableRowsView);
                        }
                        var firstRow_1 = instanceableRowsView.PlacedLayoutRows[0];
                        currentApp.state.newBoxStyleMoleculeId = currentApp.clientData.CaliforniaProject.StyleMolecules.find(function (s) {
                            return s.StyleForLayoutId == firstRow_1.AllBoxesBelowRow[0].LayoutBaseId;
                        }).StyleMoleculeId;
                    } else {
                        currentApp.state.specialStyleHolder = undefined;
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                    }
                    if (isInitial === true) {
                        var i = 0;
                        if (i < currentApp.propertyBarCount) {
                            currentApp.propertyBarVMs[i++].currentPropertyBarMode = PropertyBarVM_1.PropertyBarMode.CaliforniaView;
                            if (i < currentApp.propertyBarCount) {
                                currentApp.propertyBarVMs[i++].currentPropertyBarMode = PropertyBarVM_1.PropertyBarMode.AllCaliforniaViews;
                                if (i < currentApp.propertyBarCount) {
                                    currentApp.propertyBarVMs[i++].currentPropertyBarMode = PropertyBarVM_1.PropertyBarMode.StyleMolecule;
                                    if (i < currentApp.propertyBarCount) {
                                        currentApp.propertyBarVMs[i++].currentPropertyBarMode = PropertyBarVM_1.PropertyBarMode.AllStyleQuantums;
                                    }
                                }
                            }
                        }
                    }
                    currentRouter.setupUiForDevice();
                    isUpdateSuccess = true;
                }
            }
            if (isUpdateSuccess === false) {
                console.log("missing client data");
                location.reload();
            }
            currentApp.state.isDataLoaded = true;
            if (!preventRenderChainedCalls) {
                currentApp.projector.scheduleRender();
            }
        };
        this.restoreLayoutMoleculeAndStyleReferences = function () {
            var project = currentApp.clientData.CaliforniaProject;
            var allRows = [];
            var allBoxes = [];
            var allAtoms = [];
            project.LayoutMolecules.map(function (mol) {
                switch (mol.LayoutType) {
                    case CaliforniaGenerated_1.LayoutType.Row:
                        allRows.push(mol);
                        break;
                    case CaliforniaGenerated_1.LayoutType.Box:
                        allBoxes.push(mol);
                        break;
                    case CaliforniaGenerated_1.LayoutType.Atom:
                        allAtoms.push(mol);
                        break;
                    default:
                        console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                        break;
                }
            });
            var allContentAtoms = project.ContentAtoms;
            var allInteractions = project.LayoutStyleInteractions;
            project.CaliforniaViews.map(function (view) {
                view.PlacedLayoutRows = allRows.filter(function (row) {
                    return row.PlacedOnViewId == view.CaliforniaViewId;
                }).sort(function (rowA, rowB) {
                    if (rowA.LayoutSortOrderKey < rowB.LayoutSortOrderKey) {
                        return -1;
                    } else if (rowA.LayoutSortOrderKey == rowB.LayoutSortOrderKey) {
                        return 0;
                    } else {
                        return 1;
                    }
                });
            });
            var deepestLevelCurrentView = 0;
            project.CaliforniaViews.map(function (view) {
                deepestLevelCurrentView = 0;
                var _loop_1 = function _loop_1(iRow) {
                    currentRouter.deepestLevelCurrentRow = 0;
                    var row = view.PlacedLayoutRows[iRow];
                    row.AllBoxesBelowRow = allBoxes.filter(function (box) {
                        return box.BoxOwnerRowId == row.LayoutBaseId && box.PlacedBoxInBoxId == undefined;
                    });
                    row.AllBoxesBelowRow.map(function (box) {
                        currentRouter.restoreLayoutBoxReferencesRecursive(0, box, row, allBoxes, allAtoms, allContentAtoms, allInteractions);
                        box.BoxOwnerRow = row;
                    });
                    row.DeepestLevel = currentRouter.deepestLevelCurrentRow;
                    if (currentRouter.deepestLevelCurrentRow > deepestLevelCurrentView) {
                        deepestLevelCurrentView = currentRouter.deepestLevelCurrentRow;
                    }
                };
                for (var iRow = 0; iRow < view.PlacedLayoutRows.length; iRow++) {
                    _loop_1(iRow);
                }
                view.DeepestLevel = deepestLevelCurrentView;
            });
        };
        this.restoreLayoutBoxReferencesRecursive = function (boxLevel, box, boxOwnerRow, allBoxes, allAtoms, allContentAtoms, allInteractions) {
            var _a;
            box.Level = boxLevel;
            box.PlacedInBoxBoxes = allBoxes.filter(function (subBox) {
                return subBox.PlacedBoxInBoxId !== undefined && subBox.PlacedBoxInBoxId == box.LayoutBaseId;
            });
            box.PlacedInBoxBoxes.map(function (subBox) {
                currentRouter.restoreLayoutBoxReferencesRecursive(boxLevel + 1, subBox, boxOwnerRow, allBoxes, allAtoms, allContentAtoms, allInteractions);
                subBox.BoxOwnerRow = boxOwnerRow;
                subBox.PlacedBoxInBox = box;
            });
            (_a = boxOwnerRow.AllBoxesBelowRow).push.apply(_a, box.PlacedInBoxBoxes);
            box.PlacedInBoxAtoms = allAtoms.filter(function (subAtom) {
                return subAtom.PlacedAtomInBoxId !== undefined && subAtom.PlacedAtomInBoxId == box.LayoutBaseId;
            });
            box.PlacedInBoxAtoms.map(function (subAtom) {
                subAtom.HostedContentAtom = allContentAtoms.find(function (contentAtom) {
                    return contentAtom.InstancedOnLayoutId == subAtom.LayoutBaseId;
                });
                subAtom.PlacedAtomInBox = box;
                subAtom.LayoutStyleInteractions = allInteractions.filter(function (map) {
                    return map.LayoutAtomId == subAtom.LayoutBaseId;
                });
                subAtom.Level = boxLevel + 1;
            });
            if (box.PlacedInBoxAtoms.length > 0) {
                if (boxLevel + 1 > currentRouter.deepestLevelCurrentRow) {
                    currentRouter.deepestLevelCurrentRow = boxLevel + 1;
                }
            } else if (boxLevel > currentRouter.deepestLevelCurrentRow) {
                currentRouter.deepestLevelCurrentRow = boxLevel;
            }
        };
        this.setupUiForDevice = function () {
            var californiaAppHeight = $(window).height();
            if (californiaAppHeight === undefined) {
                console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
                return;
            }
            document.body.style.height = californiaAppHeight + "px";
            if (currentApp.state.isHideUserInterface === true || currentApp.state.editViewMode === ClientState_1.EditViewMode.PagePreviewOnly) {
                currentApp.state.availableSpacePagePreviewPx = currentApp.pagePreviewHolder !== undefined ? window.innerWidth + 2 * currentApp.state.targetPagePreviewHolderMarginPx : 0;
            } else {
                currentApp.state.availableSpacePagePreviewPx = currentApp.pagePreviewHolder !== undefined ? currentApp.pagePreviewHolder.clientWidth + 2 * currentApp.state.targetPagePreviewHolderMarginPx : 0;
            }
            if (currentApp.clientData.CaliforniaProject !== undefined && currentApp.clientData.CaliforniaProject.ResponsiveDevices !== undefined && currentApp.clientData.CaliforniaProject.ResponsiveDevices.length > 0) {
                if (currentApp.pagePreviewVM.editedLayoutAtomId == 0) {
                    currentApp.pagePreview.updatePagePreviewDimensions();
                }
            }
        };
        this.validateResponse = function (response) {
            if (response == null) {
                console.log("invalid client data");
                return false;
            } else if (response.StatusText !== null && response.StatusText !== "") {
                console.log(response.StatusText);
                return false;
            }
            if (currentApp.clientData !== undefined && response.CurrentRevision < currentApp.clientData.CurrentRevision) {
                console.log("Ignoring client data: revision is lower");
                return false;
            }
            return true;
        };
        currentRouter = this;
        currentApp = californiaAppArg;
    }
    ;
    CaliforniaRouter.prototype.clearCaliforniaPropertyBars = function (isClearWhenNonEqual, clearWhenEqualsCaliforniaViewId) {
        for (var i = 0; i < currentApp.propertyBars.length; i++) {
            currentApp.propertyBars[i].viewModel.clearSelectedCaliforniaView(isClearWhenNonEqual, clearWhenEqualsCaliforniaViewId);
        }
    };
    ;
    CaliforniaRouter.prototype.setActiveCaliforniaViewId = function (californiaViewId, isDefaultToHome, isSetAllPropertyBars) {
        var userPages = currentApp.clientData.CaliforniaProject.CaliforniaViews.filter(function (view) {
            return !view.IsInternal;
        });
        var activeView = undefined;
        var activePageIndex = -1;
        if (californiaViewId != 0) {
            activePageIndex = userPages.findIndex(function (v) {
                return v.CaliforniaViewId == californiaViewId;
            });
        }
        if (activePageIndex == -1 && isDefaultToHome === true) {
            activePageIndex = userPages.findIndex(function (v) {
                return v.Name === "Home";
            });
        }
        if (activePageIndex > -1) {
            activeView = userPages[activePageIndex];
            currentRouter.setActiveCaliforniaView(activeView);
            if (isSetAllPropertyBars === true) {
                for (var i = 0; i < currentApp.propertyBars.length; i++) {
                    currentApp.propertyBars[i].viewModel.setSelectedCaliforniaView(activeView, true);
                }
            } else {
                currentApp.propertyBars[0].viewModel.setSelectedCaliforniaView(activeView, true);
                var _loop_2 = function _loop_2(i) {
                    var propertyBarViewId = currentApp.propertyBars[i].viewModel.selectedCaliforniaViewId;
                    if (propertyBarViewId != 0) {
                        var propertyBarView = userPages.find(function (v) {
                            return v.CaliforniaViewId === propertyBarViewId;
                        });
                        currentApp.propertyBars[i].viewModel.setSelectedCaliforniaView(propertyBarView, true);
                    }
                };
                for (var i = 1; i < currentApp.propertyBars.length; i++) {
                    _loop_2(i);
                }
            }
        } else {
            console.log(CaliforniaApp_1.DEFAULT_EXCEPTION);
        }
    };
    ;
    CaliforniaRouter.prototype.setActiveCaliforniaView = function (californiaView) {
        currentApp.pagePreview.viewModel.activeCaliforniaViewId = californiaView.CaliforniaViewId;
        currentApp.pagePreviewVM.californiaViewProjector.map([californiaView]);
        currentApp.pagePreviewVM.fixedLayoutRowsProjector.map(californiaView.PlacedLayoutRows);
    };
    ;
    return CaliforniaRouter;
}();
exports.CaliforniaRouter = CaliforniaRouter;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var CaliforniaClientPartialData = function () {
    function CaliforniaClientPartialData() {}
    return CaliforniaClientPartialData;
}();
exports.CaliforniaClientPartialData = CaliforniaClientPartialData;

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,